// Copyright 2024 The Lynx Authors. All rights reserved.
// Licensed under the Apache License Version 2.0 that can be found in the
// LICENSE file in the root directory of this source tree.

buildscript {
    repositories {
        mavenCentral()
    }
}

task assembleAllModulesRelease {
    rootProject.afterEvaluate {
        rootProject.subprojects.each { subproject ->
            if (!subproject.state.executed) {
                subproject.evaluate()
            }
            if(subproject.plugins.hasPlugin("maven-publish") && subproject.plugins.hasPlugin('com.android.library')) {
                def hasNoAsanFlavor = subproject.android.productFlavors.names.contains('noasan')
                if (hasNoAsanFlavor) {
                    dependsOn subproject.tasks.named('assembleNoasanRelease')
                } else {
                    dependsOn subproject.tasks.named('assembleRelease')
                }
            }
        }
    }
}

task assembleAllModulesDevRelease {
    rootProject.afterEvaluate {
        rootProject.subprojects.each { subproject ->
            if (!subproject.state.executed) {
                subproject.evaluate()
            }
            if(subproject.plugins.hasPlugin("maven-publish") && subproject.plugins.hasPlugin('com.android.library') && subproject.android.productFlavors.names.contains('dev')) {
                dependsOn subproject.tasks.named('assembleDevRelease')
            }
        }
    }
}

task publishAllModules {
    rootProject.afterEvaluate {
        rootProject.subprojects.each { subproject ->
            if(subproject.plugins.hasPlugin("maven-publish")) {
                dependsOn subproject.tasks.named('publish')
            }
        }
    }
}

def artifactList = []

task zipArtifacts {
    doLast {
        def version = findProperty("version")
        def artifactPath
        rootProject.subprojects.each { subproject ->
            if(subproject.plugins.hasPlugin("maven-publish")) {
                ant.zip(destfile: file("${project.buildDir}/${subproject.ARTIFACT_NAME}-${version}.zip"),
                        basedir: "${subproject.buildDir}/release/${version}")
                artifactList.add("${project.buildDir}/${subproject.ARTIFACT_NAME}-${version}.zip")
                if(subproject.plugins.hasPlugin('com.android.library') && subproject.android.productFlavors.any { it.name == "dev" }) {
                    def devVersion = "${version}-dev"
                    ant.zip(destfile: file("${project.buildDir}/${subproject.ARTIFACT_NAME}-${devVersion}.zip"),
                            basedir: "${subproject.buildDir}/release/${devVersion}")
                    artifactList.add("${project.buildDir}/${subproject.ARTIFACT_NAME}-${devVersion}.zip")
                }
            }
        }
    }
}

task getArtifactList {
    dependsOn(zipArtifacts)
    doLast {
        println "artifactInfo: ${artifactList}"
        def json = new groovy.json.JsonBuilder(artifactList).toPrettyString()
        File file = new File("${project.buildDir}/artifact-list")
        FileOutputStream outputStream = new FileOutputStream(file)
        outputStream.write(json.getBytes())
    }
}