/*
 * This file is generated, do not edit.
 * @generated
 *
 * @generate-command: python3 tools/api/main.py -u
 *
 */

public class abstract com::lynx::tasm::behavior::shadow::text::AbsBaselineShiftCalculatorSpan : ReplacementSpan {
  public void com.lynx.tasm.behavior.shadow.text.AbsBaselineShiftCalculatorSpan.setVerticalAlign(int valign, float length);
  public int com.lynx.tasm.behavior.shadow.text.AbsBaselineShiftCalculatorSpan.getVerticalAlign();
  public void com.lynx.tasm.behavior.shadow.text.AbsBaselineShiftCalculatorSpan.setEnableTextRefactor(boolean enableTextRefactor);
  public void com.lynx.tasm.behavior.shadow.text.AbsBaselineShiftCalculatorSpan.setBaselineShiftCalculator(BaselineShiftCalculator baselineShiftCalculator);
  public float com.lynx.tasm.behavior.shadow.text.AbsBaselineShiftCalculatorSpan.calcBaselineShiftAscender(float ascender, float descender);
  public void com.lynx.tasm.behavior.shadow.text.AbsBaselineShiftCalculatorSpan.AdjustFontMetrics(Paint.FontMetricsInt fm);
}

public class abstract com::lynx::tasm::behavior::shadow::text::AbsInlineImageShadowNode : com.lynx.tasm.behavior.shadow.text.BaseTextShadowNode {
  public final String com.lynx.tasm.behavior.shadow.text.AbsInlineImageShadowNode.TAG_NAME TAG_NAME;
  public final String com.lynx.tasm.behavior.shadow.text.AbsInlineImageShadowNode.EVENT_ERROR EVENT_ERROR;
  public final String com.lynx.tasm.behavior.shadow.text.AbsInlineImageShadowNode.EVENT_LOAD EVENT_LOAD;
  public com.lynx.tasm.behavior.shadow.text.AbsInlineImageShadowNode.AbsInlineImageShadowNode();
  public void com.lynx.tasm.behavior.shadow.text.AbsInlineImageShadowNode.setEvents(Map< String, EventsListener > events);
  public abstract void com.lynx.tasm.behavior.shadow.text.AbsInlineImageShadowNode.setSource(@Nullable String source);
  public abstract void com.lynx.tasm.behavior.shadow.text.AbsInlineImageShadowNode.setMode(String mode);
  public void com.lynx.tasm.behavior.shadow.text.AbsInlineImageShadowNode.setBackgroundColor(int bgColor);
  public void com.lynx.tasm.behavior.shadow.text.AbsInlineImageShadowNode.setVerticalAlign(@Nullable ReadableArray array);
  public void com.lynx.tasm.behavior.shadow.text.AbsInlineImageShadowNode.setBorderRadius(int index, @Nullable ReadableArray ra);
  public void com.lynx.tasm.behavior.shadow.text.AbsInlineImageShadowNode.setBorderStyle(int index, int borderStyle);
  public void com.lynx.tasm.behavior.shadow.text.AbsInlineImageShadowNode.setBorderWidth(int index, int borderWidth);
  public void com.lynx.tasm.behavior.shadow.text.AbsInlineImageShadowNode.setBorderColor(int index, Integer color);
  public boolean com.lynx.tasm.behavior.shadow.text.AbsInlineImageShadowNode.isVirtual();
  public abstract AbsInlineImageSpan com.lynx.tasm.behavior.shadow.text.AbsInlineImageShadowNode.generateInlineImageSpan();
}

public class abstract com::lynx::tasm::behavior::ui::text::AbsInlineImageSpan : com.lynx.tasm.behavior.shadow.text.AbsBaselineShiftCalculatorSpan {
  public com.lynx.tasm.behavior.ui.text.AbsInlineImageSpan.AbsInlineImageSpan(int width, int height, int[] margins);
  public void com.lynx.tasm.behavior.ui.text.AbsInlineImageSpan.setBackgroundColor(@ColorInt int color);
  public void com.lynx.tasm.behavior.ui.text.AbsInlineImageSpan.setComplexBackground(LynxBackground background);
  public void com.lynx.tasm.behavior.ui.text.AbsInlineImageSpan.setVerticalShift(float shift);
  public void com.lynx.tasm.behavior.ui.text.AbsInlineImageSpan.draw(Canvas canvas, CharSequence text, int start, int end, float x, int top, int y, int bottom, Paint paint);
  public int com.lynx.tasm.behavior.ui.text.AbsInlineImageSpan.getSize(Paint paint, CharSequence text, int start, int end, Paint.FontMetricsInt fm);
  public abstract Drawable com.lynx.tasm.behavior.ui.text.AbsInlineImageSpan.getDrawable();
  public abstract void com.lynx.tasm.behavior.ui.text.AbsInlineImageSpan.onDetachedFromWindow();
  public abstract void com.lynx.tasm.behavior.ui.text.AbsInlineImageSpan.onStartTemporaryDetach();
  public abstract void com.lynx.tasm.behavior.ui.text.AbsInlineImageSpan.onAttachedToWindow();
  public abstract void com.lynx.tasm.behavior.ui.text.AbsInlineImageSpan.onFinishTemporaryDetach();
  public void com.lynx.tasm.behavior.ui.text.AbsInlineImageSpan.setCallback(Drawable.Callback callback);
  public Drawable.Callback com.lynx.tasm.behavior.ui.text.AbsInlineImageSpan.getCallback();
  public int com.lynx.tasm.behavior.ui.text.AbsInlineImageSpan.getWidth();
  public int com.lynx.tasm.behavior.ui.text.AbsInlineImageSpan.getHeight();
  public static void com.lynx.tasm.behavior.ui.text.AbsInlineImageSpan.possiblyUpdateInlineImageSpans(Spanned spannable, Drawable.Callback callback);
}

public class abstract com::lynx::tasm::base::AbsLogDelegate : com.lynx.tasm.base.ILogDelegate {
  public final int com.lynx.tasm.base.AbsLogDelegate.TYPE_OVERRIDE TYPE_OVERRIDE;
  public final int com.lynx.tasm.base.AbsLogDelegate.TYPE_INC TYPE_INC;
  public int com.lynx.tasm.base.AbsLogDelegate.mMinimumLoggingLevel mMinimumLoggingLevel;
  public int com.lynx.tasm.base.AbsLogDelegate.type();
  public void com.lynx.tasm.base.AbsLogDelegate.setMinimumLoggingLevel(int level);
  public int com.lynx.tasm.base.AbsLogDelegate.getMinimumLoggingLevel();
  public boolean com.lynx.tasm.base.AbsLogDelegate.isLoggable(int level);
  public boolean com.lynx.tasm.base.AbsLogDelegate.isLoggable(LogSource source, int level);
  public void com.lynx.tasm.base.AbsLogDelegate.v(String tag, String msg);
  public void com.lynx.tasm.base.AbsLogDelegate.d(String tag, String msg);
  public void com.lynx.tasm.base.AbsLogDelegate.i(String tag, String msg);
  public void com.lynx.tasm.base.AbsLogDelegate.w(String tag, String msg);
  public void com.lynx.tasm.base.AbsLogDelegate.e(String tag, String msg);
  public void com.lynx.tasm.base.AbsLogDelegate.log(int priority, String tag, String msg);
  public void com.lynx.tasm.base.AbsLogDelegate.k(String tag, String msg);
}

public class abstract com::lynx::jsbridge::jsi::AbsLynxJSIObjectDescriptor : com.lynx.jsbridge.jsi.ILynxJSIObjectDescriptor {
  public abstract String com.lynx.jsbridge.jsi.AbsLynxJSIObjectDescriptor.getClassName();
  public String[] com.lynx.jsbridge.jsi.AbsLynxJSIObjectDescriptor.getFields();
  public String[] com.lynx.jsbridge.jsi.AbsLynxJSIObjectDescriptor.getLynxObjectDescriptorInfo(String fieldName);
  public void com.lynx.jsbridge.jsi.AbsLynxJSIObjectDescriptor.warmUp();
}

public class abstract com::lynx::tasm::behavior::ui::list::AbsLynxList : com::lynx::tasm::behavior::ui::view::UISimpleView< T > {
  public com.lynx.tasm.behavior.ui.list.AbsLynxList< T extends ViewGroup >.AbsLynxList(LynxContext context);
  public final JavaOnlyMap com.lynx.tasm.behavior.ui.list.AbsLynxList< T extends ViewGroup >.getPlatformInfo();
  public final LynxUI com.lynx.tasm.behavior.ui.list.AbsLynxList< T extends ViewGroup >.renderChild(int index, long operationId);
  public final void com.lynx.tasm.behavior.ui.list.AbsLynxList< T extends ViewGroup >.updateChild(LynxUI child, int index, long operationId);
  public final void com.lynx.tasm.behavior.ui.list.AbsLynxList< T extends ViewGroup >.removeChild(LynxUI child);
  public final LynxUI com.lynx.tasm.behavior.ui.list.AbsLynxList< T extends ViewGroup >.obtainChild(int index, long operationId, boolean enableReuseNotification);
  public final void com.lynx.tasm.behavior.ui.list.AbsLynxList< T extends ViewGroup >.obtainChildAsync(int index, long operationId);
  public final void com.lynx.tasm.behavior.ui.list.AbsLynxList< T extends ViewGroup >.recycleChild(LynxUI child);
  public final void com.lynx.tasm.behavior.ui.list.AbsLynxList< T extends ViewGroup >.recycleChildAsync(LynxUI child);
  public void com.lynx.tasm.behavior.ui.list.AbsLynxList< T extends ViewGroup >.onInsertChild(LynxBaseUI child, int index);
  public final void com.lynx.tasm.behavior.ui.list.AbsLynxList< T extends ViewGroup >.insertChild(LynxBaseUI child, int index);
  public abstract void com.lynx.tasm.behavior.ui.list.AbsLynxList< T extends ViewGroup >.setScrollY(Dynamic enable);
  public abstract void com.lynx.tasm.behavior.ui.list.AbsLynxList< T extends ViewGroup >.setScrollX(Dynamic enable);
  public abstract void com.lynx.tasm.behavior.ui.list.AbsLynxList< T extends ViewGroup >.setNeedVisibleCells(boolean needVisibleCells);
  public abstract void com.lynx.tasm.behavior.ui.list.AbsLynxList< T extends ViewGroup >.setUpperThreshold(Dynamic value);
  public abstract void com.lynx.tasm.behavior.ui.list.AbsLynxList< T extends ViewGroup >.setLowerThreshold(Dynamic value);
  public abstract void com.lynx.tasm.behavior.ui.list.AbsLynxList< T extends ViewGroup >.setScrollEventThrottle(Dynamic value);
  public void com.lynx.tasm.behavior.ui.list.AbsLynxList< T extends ViewGroup >.setUpperThresholdItemCount(Dynamic value);
  public void com.lynx.tasm.behavior.ui.list.AbsLynxList< T extends ViewGroup >.setLowerThresholdItemCount(Dynamic value);
  public abstract void com.lynx.tasm.behavior.ui.list.AbsLynxList< T extends ViewGroup >.setScrollStateChangeEventThrottle(String value);
  public abstract void com.lynx.tasm.behavior.ui.list.AbsLynxList< T extends ViewGroup >.setCacheQueueRatio(Dynamic value);
  public abstract void com.lynx.tasm.behavior.ui.list.AbsLynxList< T extends ViewGroup >.setColumnCount(int columnCount);
  public abstract void com.lynx.tasm.behavior.ui.list.AbsLynxList< T extends ViewGroup >.setMainAxisGap(float gap);
  public abstract void com.lynx.tasm.behavior.ui.list.AbsLynxList< T extends ViewGroup >.setCrossAxisGap(float gap);
  public abstract void com.lynx.tasm.behavior.ui.list.AbsLynxList< T extends ViewGroup >.setListType(String listType);
  public abstract void com.lynx.tasm.behavior.ui.list.AbsLynxList< T extends ViewGroup >.setUpdateAnimation(String animationType);
  public abstract void com.lynx.tasm.behavior.ui.list.AbsLynxList< T extends ViewGroup >.setEnablePagerSnap(Dynamic enable);
  public abstract void com.lynx.tasm.behavior.ui.list.AbsLynxList< T extends ViewGroup >.setPagingAlignment(ReadableMap map);
  public void com.lynx.tasm.behavior.ui.list.AbsLynxList< T extends ViewGroup >.setInternalCellAppearNotification(boolean isNeedAppearNotification);
  public void com.lynx.tasm.behavior.ui.list.AbsLynxList< T extends ViewGroup >.setInternalCellDisappearNotification(boolean isNeedDisAppearNotification);
  public void com.lynx.tasm.behavior.ui.list.AbsLynxList< T extends ViewGroup >.setInternalCellPrepareForReuseNotification(boolean isNeedReuseNotification);
  public void com.lynx.tasm.behavior.ui.list.AbsLynxList< T extends ViewGroup >.setShouldRequestStateRestore(boolean shouldRequestStateRestore);
  public void com.lynx.tasm.behavior.ui.list.AbsLynxList< T extends ViewGroup >.setOverScroll(Dynamic enable);
  public abstract void com.lynx.tasm.behavior.ui.list.AbsLynxList< T extends ViewGroup >.setEnableSticky(Dynamic enable);
  public abstract void com.lynx.tasm.behavior.ui.list.AbsLynxList< T extends ViewGroup >.setStickyOffset(Dynamic value);
  public abstract void com.lynx.tasm.behavior.ui.list.AbsLynxList< T extends ViewGroup >.sendCustomEvent(int left, int top, int dx, int dy, String type);
  public double com.lynx.tasm.behavior.ui.list.AbsLynxList< T extends ViewGroup >.getCellOffsetByIndex(int index);
  public abstract void com.lynx.tasm.behavior.ui.list.AbsLynxList< T extends ViewGroup >.setScrollEnable(Dynamic value);
  public abstract void com.lynx.tasm.behavior.ui.list.AbsLynxList< T extends ViewGroup >.setTouchScroll(Dynamic value);
  public abstract void com.lynx.tasm.behavior.ui.list.AbsLynxList< T extends ViewGroup >.setInitialScrollIndex(Dynamic value);
  public boolean com.lynx.tasm.behavior.ui.list.AbsLynxList< T extends ViewGroup >.isScrollable();
  public abstract void com.lynx.tasm.behavior.ui.list.AbsLynxList< T extends ViewGroup >.setNoInvalidate(boolean noInvalidate);
  public abstract void com.lynx.tasm.behavior.ui.list.AbsLynxList< T extends ViewGroup >.setComponentInitMeasure(boolean value);
}

public class abstract com::lynx::tasm::behavior::ui::scroll::AbsLynxUIScroll : com::lynx::tasm::behavior::ui::view::UISimpleView< T > {
  public void com.lynx.tasm.behavior.ui.scroll.AbsLynxUIScroll< T extends ViewGroup >.setEnableNewNested(boolean value);
  public final int com.lynx.tasm.behavior.ui.scroll.AbsLynxUIScroll< T extends ViewGroup >.SCROLL_UP SCROLL_UP;
  public final int com.lynx.tasm.behavior.ui.scroll.AbsLynxUIScroll< T extends ViewGroup >.SCROLL_DOWN SCROLL_DOWN;
  public final int com.lynx.tasm.behavior.ui.scroll.AbsLynxUIScroll< T extends ViewGroup >.SCROLL_LEFT SCROLL_LEFT;
  public final int com.lynx.tasm.behavior.ui.scroll.AbsLynxUIScroll< T extends ViewGroup >.SCROLL_RIGHT SCROLL_RIGHT;
  public com.lynx.tasm.behavior.ui.scroll.AbsLynxUIScroll< T extends ViewGroup >.AbsLynxUIScroll(LynxContext context);
  public void com.lynx.tasm.behavior.ui.scroll.AbsLynxUIScroll< T extends ViewGroup >.setScrollY(Dynamic enable);
  public abstract void com.lynx.tasm.behavior.ui.scroll.AbsLynxUIScroll< T extends ViewGroup >.setScrollY(boolean enable);
  public void com.lynx.tasm.behavior.ui.scroll.AbsLynxUIScroll< T extends ViewGroup >.setScrollX(Dynamic enable);
  public void com.lynx.tasm.behavior.ui.scroll.AbsLynxUIScroll< T extends ViewGroup >.setEnableScroll(boolean value);
  public abstract void com.lynx.tasm.behavior.ui.scroll.AbsLynxUIScroll< T extends ViewGroup >.setScrollX(boolean enable);
  public abstract void com.lynx.tasm.behavior.ui.scroll.AbsLynxUIScroll< T extends ViewGroup >.setScrollBarEnable(boolean value);
  public abstract void com.lynx.tasm.behavior.ui.scroll.AbsLynxUIScroll< T extends ViewGroup >.setUpperThreshole(int value);
  public abstract void com.lynx.tasm.behavior.ui.scroll.AbsLynxUIScroll< T extends ViewGroup >.setLowerThreshole(int value);
  public abstract void com.lynx.tasm.behavior.ui.scroll.AbsLynxUIScroll< T extends ViewGroup >.setScrollTop(int value);
  public abstract void com.lynx.tasm.behavior.ui.scroll.AbsLynxUIScroll< T extends ViewGroup >.setScrollLeft(int value);
  public abstract void com.lynx.tasm.behavior.ui.scroll.AbsLynxUIScroll< T extends ViewGroup >.setScrollTap(boolean value);
  public abstract void com.lynx.tasm.behavior.ui.scroll.AbsLynxUIScroll< T extends ViewGroup >.scrollToIndex(int index);
  public void com.lynx.tasm.behavior.ui.scroll.AbsLynxUIScroll< T extends ViewGroup >.setForbidFlingFocusChange(boolean value);
  public void com.lynx.tasm.behavior.ui.scroll.AbsLynxUIScroll< T extends ViewGroup >.setBlockDescendantFocusability(boolean value);
  public abstract void com.lynx.tasm.behavior.ui.scroll.AbsLynxUIScroll< T extends ViewGroup >.sendCustomEvent(int l, int t, int oldl, int oldt, String type);
  public void com.lynx.tasm.behavior.ui.scroll.AbsLynxUIScroll< T extends ViewGroup >.scrollInto(LynxBaseUI node, boolean isSmooth, String block, String inline);
  public void com.lynx.tasm.behavior.ui.scroll.AbsLynxUIScroll< T extends ViewGroup >.scrollInto(LynxBaseUI node, boolean isSmooth, String block, String inline, int bottomInset);
  public boolean com.lynx.tasm.behavior.ui.scroll.AbsLynxUIScroll< T extends ViewGroup >.canScroll(int direction);
  public void com.lynx.tasm.behavior.ui.scroll.AbsLynxUIScroll< T extends ViewGroup >.scrollByX(double delta);
  public void com.lynx.tasm.behavior.ui.scroll.AbsLynxUIScroll< T extends ViewGroup >.scrollByY(double delta);
  public void com.lynx.tasm.behavior.ui.scroll.AbsLynxUIScroll< T extends ViewGroup >.flingX(double velocityX);
  public void com.lynx.tasm.behavior.ui.scroll.AbsLynxUIScroll< T extends ViewGroup >.flingY(double velocityY);
  public boolean com.lynx.tasm.behavior.ui.scroll.AbsLynxUIScroll< T extends ViewGroup >.isScrollable();
}

public class abstract com::lynx::tasm::provider::AbsNetworkingModuleProvider :  {
  public abstract void com.lynx.tasm.provider.AbsNetworkingModuleProvider.request(@NonNull final ReadableMap map, final Callback callback);
}

public class com::lynx::tasm::behavior::shadow::text::AbsoluteSizeSpan : android.text.style.AbsoluteSizeSpan {
  public com.lynx.tasm.behavior.shadow.text.AbsoluteSizeSpan.AbsoluteSizeSpan(int size);
  public com.lynx.tasm.behavior.shadow.text.AbsoluteSizeSpan.AbsoluteSizeSpan(int size, boolean dip);
  public boolean com.lynx.tasm.behavior.shadow.text.AbsoluteSizeSpan.equals(Object o);
  public int com.lynx.tasm.behavior.shadow.text.AbsoluteSizeSpan.hashCode();
}

public class abstract com::lynx::tasm::provider::AbsTemplateProvider :  {
  public abstract void com.lynx.tasm.provider.AbsTemplateProvider.loadTemplate(@NonNull String url, Callback callback);
  public void com.lynx.tasm.provider.AbsTemplateProvider.loadTemplate(@NonNull String url, Callback callback, LynxContext context);
}

public class abstract com::lynx::tasm::animation::layout::AbstractLayoutAnimation :  {
  public com.lynx.tasm.animation.layout.AbstractLayoutAnimation.AbstractLayoutAnimation();
  public void com.lynx.tasm.animation.layout.AbstractLayoutAnimation.setInterpolator(@Nullable ReadableArray interpolator);
  public void com.lynx.tasm.animation.layout.AbstractLayoutAnimation.setInterpolator(int timingType, float x1, float y1, float x2, float y2, int stepsType);
  public void com.lynx.tasm.animation.layout.AbstractLayoutAnimation.setAnimatedProperty(@Nullable int animatedProperty);
  public void com.lynx.tasm.animation.layout.AbstractLayoutAnimation.setDelay(@Nullable long delay);
  public void com.lynx.tasm.animation.layout.AbstractLayoutAnimation.setDuration(@Nullable long duration);
}

public class abstract com::lynx::tasm::image::ScalingUtils::AbstractScaleType : com.lynx.tasm.image.ScalingUtils.ScaleType {
  public Matrix com.lynx.tasm.image.ScalingUtils.AbstractScaleType.getTransform(Matrix outTransform, Rect parentRect, int childWidth, int childHeight, float focusX, float focusY);
  public abstract void com.lynx.tasm.image.ScalingUtils.AbstractScaleType.getTransformImpl(Matrix matrix, float availableWidth, float availableHeight, float sourceWidth, float sourceHeight, float offsetStartX, float offsetStartY);
}

public class abstract com::lynx::tasm::behavior::ui::image::AbsUIImage : com::lynx::tasm::behavior::ui::LynxUI< T > {
  public com.lynx.tasm.behavior.ui.image.AbsUIImage< T extends View >.AbsUIImage(Context context);
  public com.lynx.tasm.behavior.ui.image.AbsUIImage< T extends View >.AbsUIImage(LynxContext context);
  public abstract void com.lynx.tasm.behavior.ui.image.AbsUIImage< T extends View >.setSource(String sources);
  public abstract void com.lynx.tasm.behavior.ui.image.AbsUIImage< T extends View >.setPlaceholder(String placeholder);
  public abstract void com.lynx.tasm.behavior.ui.image.AbsUIImage< T extends View >.setObjectFit(String objectFit);
  public abstract void com.lynx.tasm.behavior.ui.image.AbsUIImage< T extends View >.setBlurRadius(String objectFit);
  public abstract void com.lynx.tasm.behavior.ui.image.AbsUIImage< T extends View >.setRepeat(boolean repeat);
  public abstract void com.lynx.tasm.behavior.ui.image.AbsUIImage< T extends View >.setCoverStart(boolean coverStart);
  public abstract void com.lynx.tasm.behavior.ui.image.AbsUIImage< T extends View >.setCapInsets(String insets);
  public void com.lynx.tasm.behavior.ui.image.AbsUIImage< T extends View >.setCapInsetsBackUp(String insets);
  public void com.lynx.tasm.behavior.ui.image.AbsUIImage< T extends View >.setCapInsetsScale(String scale);
  public abstract void com.lynx.tasm.behavior.ui.image.AbsUIImage< T extends View >.setLoopCount(int count);
  public abstract void com.lynx.tasm.behavior.ui.image.AbsUIImage< T extends View >.setPreFetchWidth(String width);
  public abstract void com.lynx.tasm.behavior.ui.image.AbsUIImage< T extends View >.setPreFetchHeight(String height);
  public void com.lynx.tasm.behavior.ui.image.AbsUIImage< T extends View >.setDisableDefaultPlaceholder(boolean disable);
  public void com.lynx.tasm.behavior.ui.image.AbsUIImage< T extends View >.setAutoSize(boolean autoSize);
  public void com.lynx.tasm.behavior.ui.image.AbsUIImage< T extends View >.setDisableDefaultResize(boolean disable);
}

public enum com::lynx::tasm::TemplateData::ActionType {
  public com.lynx.tasm.TemplateData.ActionType.STRING_DATA STRING_DATA;
  public com.lynx.tasm.TemplateData.ActionType.BYTE_BUFFER BYTE_BUFFER;
  public com.lynx.tasm.TemplateData.ActionType.NATIVE_DATA NATIVE_DATA;
}

public interface com::lynx::tasm::behavior::ui::swiper::ViewPager::Adapter {
  public int com.lynx.tasm.behavior.ui.swiper.ViewPager.Adapter.getCount();
  public View com.lynx.tasm.behavior.ui.swiper.ViewPager.Adapter.get(ViewGroup container, int position);
  public void com.lynx.tasm.behavior.ui.swiper.ViewPager.Adapter.recycle(ViewGroup container, int position, View view);
}

public class com::lynx::tasm::behavior::shadow::AlignContext :  {
}

public class com::lynx::tasm::behavior::shadow::AlignParam :  {
  public void com.lynx.tasm.behavior.shadow.AlignParam.setLeftOffset(float leftOffset);
  public void com.lynx.tasm.behavior.shadow.AlignParam.setTopOffset(float topOffset);
  public float com.lynx.tasm.behavior.shadow.AlignParam.getLeftOffset();
  public float com.lynx.tasm.behavior.shadow.AlignParam.getTopOffset();
}

public class com::lynx::tasm::behavior::ui::scroll::AndroidScrollView : com.lynx.tasm.behavior.ui.scroll.NestedScrollView, com.lynx.tasm.behavior.ui.IDrawChildHook.IDrawChildHookBinding {
  public final int com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.HORIZONTAL HORIZONTAL;
  public final int com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.VERTICAL VERTICAL;
  public final int com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.SCROLL_STATE_IDLE SCROLL_STATE_IDLE;
  public final int com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.SCROLL_STATE_DRAGGING SCROLL_STATE_DRAGGING;
  public final int com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.SCROLL_STATE_FLING SCROLL_STATE_FLING;
  public final int com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.SCROLL_STATE_ANIMATION SCROLL_STATE_ANIMATION;
  public final int com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.SCROLL_NESTED_SCROLL SCROLL_NESTED_SCROLL;
  public void com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.consumeGesture(boolean consume);
  public void com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.interceptGesture(boolean interceptGesture);
  public com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.AndroidScrollView(Context context, UIScrollView uiScrollView);
  public boolean com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.onTouchEvent(MotionEvent ev);
  public void com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.bindDrawChildHook(IDrawChildHook hook);
  public void com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.addView(View child);
  public void com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.addView(View child, int index);
  public void com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.addView(View child, int index, ViewGroup.LayoutParams params);
  public void com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.addView(View child, ViewGroup.LayoutParams params);
  public void com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.addView(View child, int width, int height);
  public void com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.removeView(View view);
  public void com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.removeViewAt(int index);
  public void com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.removeAllViews();
  public void com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.computeScroll();
  public void com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.sendScrollToEdgeEvent(int l, int t);
  public int com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.getContentWidth();
  public int com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.getContentHeight();
  public boolean com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.dispatchTouchEvent(MotionEvent ev);
  public boolean com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.onInterceptTouchEvent(MotionEvent ev);
  public boolean com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.dispatchNestedScroll(int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int[] offsetInWindow);
  public boolean com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.dispatchNestedScroll(int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int[] offsetInWindow, int type);
  public boolean com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.dispatchNestedPreScroll(int dx, int dy, int[] consumed, int[] offsetInWindow);
  public boolean com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.dispatchNestedPreScroll(int dx, int dy, int[] consumed, int[] offsetInWindow, int type);
  public boolean com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.dispatchNestedFling(float velocityX, float velocityY, boolean consumed);
  public boolean com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.dispatchNestedPreFling(float velocityX, float velocityY);
  public void com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.setClipBounds(Rect clipBounds);
  public void com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.setPadding(int left, int top, int right, int bottom);
  public void com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.setScrollBarEnable(boolean enable);
  public void com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.setBlockDescendantFocusability(boolean value);
  public void com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.setScrollTo(int x, int y, boolean animate);
  public void com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.abortAnimation(View mScrollView);
  public int com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.getRealScrollX();
  public boolean com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.isHorizontal();
  public int com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.getRealScrollY();
  public void com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.setEnableScroll(final boolean scroll);
  public void com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.setOrientation(int orientation);
  public int com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.getOrientation();
  public boolean com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.canScrollVertically(int direction);
  public void com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.fling(int velocityY);
  public void com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.setMeasuredSize(int measuredWidth, int measuredHeight);
  public CustomHorizontalScrollView com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.getHScrollView();
  public void com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.setForbidFlingFocusChange(boolean value);
  public LinearLayout com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.getLinearLayout();
  public void com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.setForceCanScroll(boolean value);
  public void com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.setOnScrollListener(OnScrollListener listener);
  public void com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.addOnScrollListener(OnScrollListener listener);
  public void com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.clearOnScrollListener();
  public void com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.removeOnScrollListener(OnScrollListener listener);
}

public class com::lynx::tasm::behavior::ui::text::AndroidText : com.lynx.tasm.behavior.ui.view.AndroidView, ActionMode.Callback {
  public com.lynx.tasm.behavior.ui.text.AndroidText.AndroidText(Context context);
  public void com.lynx.tasm.behavior.ui.text.AndroidText.setTextBundle(TextUpdateBundle bundle);
  public CharSequence com.lynx.tasm.behavior.ui.text.AndroidText.getOriginText();
  public void com.lynx.tasm.behavior.ui.text.AndroidText.setTextGradient(String gradient);
  public void com.lynx.tasm.behavior.ui.text.AndroidText.setTextGradient(ReadableArray gradient);
  public void com.lynx.tasm.behavior.ui.text.AndroidText.setEnableTextSelection(boolean enable);
  public void com.lynx.tasm.behavior.ui.text.AndroidText.updateSelectionBackgroundColor(int color);
  public void com.lynx.tasm.behavior.ui.text.AndroidText.updateSelectionHandleColor(int color);
  public void com.lynx.tasm.behavior.ui.text.AndroidText.updateSelectionHandleSize(int size);
  public boolean com.lynx.tasm.behavior.ui.text.AndroidText.onTouchEvent(MotionEvent event);
  public void com.lynx.tasm.behavior.ui.text.AndroidText.dispatchDraw(Canvas canvas);
  public ArrayList< RectF > com.lynx.tasm.behavior.ui.text.AndroidText.getTextBoundingBoxes(int start, int end);
  public void com.lynx.tasm.behavior.ui.text.AndroidText.setBindSelectionChange(boolean isBindSelectionChange, int sign);
  public void com.lynx.tasm.behavior.ui.text.AndroidText.setCustomContextMenu(boolean enable);
  public void com.lynx.tasm.behavior.ui.text.AndroidText.setCustomTextSelection(boolean enable);
  public ArrayList< RectF > com.lynx.tasm.behavior.ui.text.AndroidText.setTextSelection(float startX, float startY, float endX, float endY, boolean showStartHandle, boolean showEndHandle);
  public ArrayList< Float >[] com.lynx.tasm.behavior.ui.text.AndroidText.getHandlesInfo();
  public String com.lynx.tasm.behavior.ui.text.AndroidText.getSelectedText();
  public void com.lynx.tasm.behavior.ui.text.AndroidText.invalidateDrawable(Drawable drawable);
  public void com.lynx.tasm.behavior.ui.text.AndroidText.onDetachedFromWindow();
  public void com.lynx.tasm.behavior.ui.text.AndroidText.onStartTemporaryDetach();
  public void com.lynx.tasm.behavior.ui.text.AndroidText.onAttachedToWindow();
  public void com.lynx.tasm.behavior.ui.text.AndroidText.onFinishTemporaryDetach();
  public CharSequence com.lynx.tasm.behavior.ui.text.AndroidText.getText();
  public Layout com.lynx.tasm.behavior.ui.text.AndroidText.getTextLayout();
  public void com.lynx.tasm.behavior.ui.text.AndroidText.setOverflow(int overflow);
  public void com.lynx.tasm.behavior.ui.text.AndroidText.release();
  public boolean com.lynx.tasm.behavior.ui.text.AndroidText.onCreateActionMode(ActionMode mode, Menu menu);
  public boolean com.lynx.tasm.behavior.ui.text.AndroidText.onPrepareActionMode(ActionMode mode, Menu menu);
  public boolean com.lynx.tasm.behavior.ui.text.AndroidText.onActionItemClicked(ActionMode mode, MenuItem item);
  public void com.lynx.tasm.behavior.ui.text.AndroidText.onDestroyActionMode(ActionMode mode);
}

public class com::lynx::tasm::behavior::ui::view::AndroidView : ViewGroup, com.lynx.tasm.behavior.ui.IDrawChildHook.IDrawChildHookBinding {
  public void com.lynx.tasm.behavior.ui.view.AndroidView.setBlurSampling(int sampling);
  public com.lynx.tasm.behavior.ui.view.AndroidView.AndroidView(Context context);
  public void com.lynx.tasm.behavior.ui.view.AndroidView.interceptGesture(boolean interceptGesture);
  public boolean com.lynx.tasm.behavior.ui.view.AndroidView.onInterceptTouchEvent(MotionEvent ev);
  public boolean com.lynx.tasm.behavior.ui.view.AndroidView.onTouchEvent(MotionEvent event);
  public void com.lynx.tasm.behavior.ui.view.AndroidView.setNativeInteractionEnabled(boolean enabled);
  public void com.lynx.tasm.behavior.ui.view.AndroidView.setImpressionId(String id);
  public String com.lynx.tasm.behavior.ui.view.AndroidView.getImpressionId();
  public IDrawChildHook com.lynx.tasm.behavior.ui.view.AndroidView.getDrawChildHook();
  public void com.lynx.tasm.behavior.ui.view.AndroidView.bindDrawChildHook(IDrawChildHook hook);
  public void com.lynx.tasm.behavior.ui.view.AndroidView.draw(Canvas canvas);
  public void com.lynx.tasm.behavior.ui.view.AndroidView.setGestureManager(GestureArenaManager manager);
  public void com.lynx.tasm.behavior.ui.view.AndroidView.computeScroll();
  public void com.lynx.tasm.behavior.ui.view.AndroidView.setChildrenDrawingOrderEnabled(boolean enabled);
  public boolean com.lynx.tasm.behavior.ui.view.AndroidView.hasOverlappingRendering();
  public boolean com.lynx.tasm.behavior.ui.view.AndroidView.onHoverEvent(MotionEvent event);
  public void com.lynx.tasm.behavior.ui.view.AndroidView.setConsumeHoverEvent(boolean consumeHoverEvent);
  public void com.lynx.tasm.behavior.ui.view.AndroidView.setBlur(float radius);
  public void com.lynx.tasm.behavior.ui.view.AndroidView.removeBlur();
}

public class com::lynx::tasm::animation::AnimationConstant :  {
  public final String com.lynx.tasm.animation.AnimationConstant.TRANSITION TRANSITION;
  public final String com.lynx.tasm.animation.AnimationConstant.PROP_STR_NONE PROP_STR_NONE;
  public final String com.lynx.tasm.animation.AnimationConstant.PROP_STR_OPACITY PROP_STR_OPACITY;
  public final String com.lynx.tasm.animation.AnimationConstant.PROP_STR_SCALE_X PROP_STR_SCALE_X;
  public final String com.lynx.tasm.animation.AnimationConstant.PROP_STR_SCALE_Y PROP_STR_SCALE_Y;
  public final String com.lynx.tasm.animation.AnimationConstant.PROP_STR_SCALE_X_Y PROP_STR_SCALE_X_Y;
  public final String com.lynx.tasm.animation.AnimationConstant.PROP_STR_WIDTH PROP_STR_WIDTH;
  public final String com.lynx.tasm.animation.AnimationConstant.PROP_STR_HEIGHT PROP_STR_HEIGHT;
  public final String com.lynx.tasm.animation.AnimationConstant.PROP_STR_LEFT PROP_STR_LEFT;
  public final String com.lynx.tasm.animation.AnimationConstant.PROP_STR_TOP PROP_STR_TOP;
  public final String com.lynx.tasm.animation.AnimationConstant.PROP_STR_RIGHT PROP_STR_RIGHT;
  public final String com.lynx.tasm.animation.AnimationConstant.PROP_STR_BOTTOM PROP_STR_BOTTOM;
  public final String com.lynx.tasm.animation.AnimationConstant.PROP_STR_BACKGROUND_COLOR PROP_STR_BACKGROUND_COLOR;
  public final String com.lynx.tasm.animation.AnimationConstant.PROP_STR_VISIBILITY PROP_STR_VISIBILITY;
  public final String com.lynx.tasm.animation.AnimationConstant.PROP_STR_TRANSFORM PROP_STR_TRANSFORM;
  public final int com.lynx.tasm.animation.AnimationConstant.LAYOUT_ANIMATION_TYPE_CREATE LAYOUT_ANIMATION_TYPE_CREATE;
  public final int com.lynx.tasm.animation.AnimationConstant.LAYOUT_ANIMATION_TYPE_UPDATE LAYOUT_ANIMATION_TYPE_UPDATE;
  public final int com.lynx.tasm.animation.AnimationConstant.LAYOUT_ANIMATION_TYPE_DELETE LAYOUT_ANIMATION_TYPE_DELETE;
  public final String com.lynx.tasm.animation.AnimationConstant.C_DURATION C_DURATION;
  public final String com.lynx.tasm.animation.AnimationConstant.D_DURATION D_DURATION;
  public final String com.lynx.tasm.animation.AnimationConstant.U_DURATION U_DURATION;
  public final String com.lynx.tasm.animation.AnimationConstant.C_DELAY C_DELAY;
  public final String com.lynx.tasm.animation.AnimationConstant.D_DELAY D_DELAY;
  public final String com.lynx.tasm.animation.AnimationConstant.U_DELAY U_DELAY;
  public final String com.lynx.tasm.animation.AnimationConstant.C_PROPERTY C_PROPERTY;
  public final String com.lynx.tasm.animation.AnimationConstant.D_PROPERTY D_PROPERTY;
  public final String com.lynx.tasm.animation.AnimationConstant.U_PROPERTY U_PROPERTY;
  public final String com.lynx.tasm.animation.AnimationConstant.C_TIMING_FUNCTION C_TIMING_FUNCTION;
  public final String com.lynx.tasm.animation.AnimationConstant.D_TIMING_FUNCTION D_TIMING_FUNCTION;
  public final String com.lynx.tasm.animation.AnimationConstant.U_TIMING_FUNCTION U_TIMING_FUNCTION;
  public final int com.lynx.tasm.animation.AnimationConstant.INTERCEPTOR_LINEAR INTERCEPTOR_LINEAR;
  public final int com.lynx.tasm.animation.AnimationConstant.INTERCEPTOR_EASE_IN INTERCEPTOR_EASE_IN;
  public final int com.lynx.tasm.animation.AnimationConstant.INTERCEPTOR_EASE_OUT INTERCEPTOR_EASE_OUT;
  public final int com.lynx.tasm.animation.AnimationConstant.INTERCEPTOR_EASE_IN_OUT INTERCEPTOR_EASE_IN_OUT;
  public final int com.lynx.tasm.animation.AnimationConstant.INTERCEPTOR_SQUARE_BEZIER INTERCEPTOR_SQUARE_BEZIER;
  public final int com.lynx.tasm.animation.AnimationConstant.INTERCEPTOR_CUBIC_BEZIER INTERCEPTOR_CUBIC_BEZIER;
  public final int com.lynx.tasm.animation.AnimationConstant.INTERCEPTOR_STEPS INTERCEPTOR_STEPS;
  public final int com.lynx.tasm.animation.AnimationConstant.PROP_NONE PROP_NONE;
  public final int com.lynx.tasm.animation.AnimationConstant.PROP_OPACITY PROP_OPACITY;
  public final int com.lynx.tasm.animation.AnimationConstant.PROP_SCALE_X PROP_SCALE_X;
  public final int com.lynx.tasm.animation.AnimationConstant.PROP_SCALE_Y PROP_SCALE_Y;
  public final int com.lynx.tasm.animation.AnimationConstant.PROP_SCALE_X_Y PROP_SCALE_X_Y;
  public final int com.lynx.tasm.animation.AnimationConstant.PROP_WIDTH PROP_WIDTH;
  public final int com.lynx.tasm.animation.AnimationConstant.PROP_HEIGHT PROP_HEIGHT;
  public final int com.lynx.tasm.animation.AnimationConstant.PROP_BACKGROUND_COLOR PROP_BACKGROUND_COLOR;
  public final int com.lynx.tasm.animation.AnimationConstant.PROP_VISIBILITY PROP_VISIBILITY;
  public final int com.lynx.tasm.animation.AnimationConstant.PROP_LEFT PROP_LEFT;
  public final int com.lynx.tasm.animation.AnimationConstant.PROP_TOP PROP_TOP;
  public final int com.lynx.tasm.animation.AnimationConstant.PROP_RIGHT PROP_RIGHT;
  public final int com.lynx.tasm.animation.AnimationConstant.PROP_BOTTOM PROP_BOTTOM;
  public final int com.lynx.tasm.animation.AnimationConstant.PROP_TRANSFORM PROP_TRANSFORM;
  public final int com.lynx.tasm.animation.AnimationConstant.PROP_COLOR PROP_COLOR;
  public final int com.lynx.tasm.animation.AnimationConstant.PROP_MAX_WIDTH PROP_MAX_WIDTH;
  public final int com.lynx.tasm.animation.AnimationConstant.PROP_MIN_WIDTH PROP_MIN_WIDTH;
  public final int com.lynx.tasm.animation.AnimationConstant.PROP_MAX_HEIGHT PROP_MAX_HEIGHT;
  public final int com.lynx.tasm.animation.AnimationConstant.PROP_MIN_HEIGHT PROP_MIN_HEIGHT;
  public final int com.lynx.tasm.animation.AnimationConstant.TRAN_PROP_ALL TRAN_PROP_ALL;
  public final int com.lynx.tasm.animation.AnimationConstant.TRAN_PROP_LEGACY_ALL_1 TRAN_PROP_LEGACY_ALL_1;
  public final int com.lynx.tasm.animation.AnimationConstant.TRAN_PROP_LEGACY_ALL_2 TRAN_PROP_LEGACY_ALL_2;
  public final int com.lynx.tasm.animation.AnimationConstant.TRAN_PROP_LEGACY_ALL_3 TRAN_PROP_LEGACY_ALL_3;
  public final int [] com.lynx.tasm.animation.AnimationConstant.ALL_PLATFORM_TRANSITION_PROPS_ARR ALL_PLATFORM_TRANSITION_PROPS_ARR;
  public final int com.lynx.tasm.animation.AnimationConstant.PROP_OF_LAYOUT PROP_OF_LAYOUT;
}

public class com::lynx::tasm::animation::AnimationInfo : Cloneable {
  public com.lynx.tasm.animation.AnimationInfo.AnimationInfo(String name, long duration, long delay, int timingType, float x1, float y1, float x2, float y2, int stepsType, int iterationCount, int fillMode, int direction, int playState);
  public com.lynx.tasm.animation.AnimationInfo.AnimationInfo(int layoutAnimationType, long duration, long delay, int property, int timingType, float x1, float y1, float x2, float y2, int stepsType);
  public com.lynx.tasm.animation.AnimationInfo.AnimationInfo();
  public com.lynx.tasm.animation.AnimationInfo.AnimationInfo(AnimationInfo info);
  public void com.lynx.tasm.animation.AnimationInfo.setProperty(int property);
  public void com.lynx.tasm.animation.AnimationInfo.setOrderIndex(int index);
  public int com.lynx.tasm.animation.AnimationInfo.getOrderIndex();
  public String com.lynx.tasm.animation.AnimationInfo.getName();
  public long com.lynx.tasm.animation.AnimationInfo.getDuration();
  public long com.lynx.tasm.animation.AnimationInfo.getDelay();
  public int com.lynx.tasm.animation.AnimationInfo.getProperty();
  public int com.lynx.tasm.animation.AnimationInfo.getTimingType();
  public float com.lynx.tasm.animation.AnimationInfo.getX1();
  public float com.lynx.tasm.animation.AnimationInfo.getY1();
  public float com.lynx.tasm.animation.AnimationInfo.getX2();
  public float com.lynx.tasm.animation.AnimationInfo.getY2();
  public int com.lynx.tasm.animation.AnimationInfo.getStepsType();
  public int com.lynx.tasm.animation.AnimationInfo.getIterationCount();
  public int com.lynx.tasm.animation.AnimationInfo.getFillMode();
  public int com.lynx.tasm.animation.AnimationInfo.getDirection();
  public int com.lynx.tasm.animation.AnimationInfo.getPlayState();
  public int com.lynx.tasm.animation.AnimationInfo.getLayoutAnimationType();
  public void com.lynx.tasm.animation.AnimationInfo.setCount(float count);
  public int com.lynx.tasm.animation.AnimationInfo.getCount();
  public void com.lynx.tasm.animation.AnimationInfo.setName(String name);
  public void com.lynx.tasm.animation.AnimationInfo.setDuration(long duration);
  public void com.lynx.tasm.animation.AnimationInfo.setDelay(long delay);
  public void com.lynx.tasm.animation.AnimationInfo.setTimingType(int timingType);
  public void com.lynx.tasm.animation.AnimationInfo.setX1(float x1);
  public void com.lynx.tasm.animation.AnimationInfo.setY1(float y1);
  public void com.lynx.tasm.animation.AnimationInfo.setX2(float x2);
  public void com.lynx.tasm.animation.AnimationInfo.setY2(float y2);
  public void com.lynx.tasm.animation.AnimationInfo.setStepsType(int stepsType);
  public void com.lynx.tasm.animation.AnimationInfo.setIterationCount(int iterationCount);
  public void com.lynx.tasm.animation.AnimationInfo.setFillMode(int fillMode);
  public void com.lynx.tasm.animation.AnimationInfo.setDirection(int direction);
  public void com.lynx.tasm.animation.AnimationInfo.setPlayState(int playState);
  public void com.lynx.tasm.animation.AnimationInfo.setLayoutAnimationType(int layoutAnimationType);
  public int com.lynx.tasm.animation.AnimationInfo.setTimingFunction(ReadableArray array, int startPos);
  public void com.lynx.tasm.animation.AnimationInfo.setTimingFunction(int timingType, float x1, float y1, float x2, float y2, int stepsType);
  public boolean com.lynx.tasm.animation.AnimationInfo.isEqualTo(AnimationInfo info);
  public boolean com.lynx.tasm.animation.AnimationInfo.isOnlyPlayStateChanged(AnimationInfo info);
  public static AnimationInfo com.lynx.tasm.animation.AnimationInfo.toAnimationInfo(ReadableArray array);
  public static boolean com.lynx.tasm.animation.AnimationInfo.isDirectionReverse(AnimationInfo info);
  public static boolean com.lynx.tasm.animation.AnimationInfo.isDirectionAlternate(AnimationInfo info);
  public static boolean com.lynx.tasm.animation.AnimationInfo.isFillModeForwards(AnimationInfo info);
  public static boolean com.lynx.tasm.animation.AnimationInfo.isFillModeBackwards(AnimationInfo info);
  public static void com.lynx.tasm.animation.AnimationInfo.removeDuplicateAnimation(SparseArray< AnimationInfo > infos, int lhsKey, int rhsKey);
}

public interface com::lynx::tasm::image::model::AnimationListener {
  public void com.lynx.tasm.image.model.AnimationListener.onAnimationStart(Drawable drawable);
  public void com.lynx.tasm.image.model.AnimationListener.onAnimationFinalLoop(Drawable drawable);
  public void com.lynx.tasm.image.model.AnimationListener.onAnimationCurrentLoop(Drawable drawable);
}

public class com::lynx::tasm::behavior::ui::list::AppearEventCourier : com.lynx.tasm.behavior.ui.list.AppearEventCourierInterface {
  public com.lynx.tasm.behavior.ui.list.AppearEventCourier.AppearEventCourier( @NonNull EventEmitter eventEmitter, @NonNull RecyclerView recyclerView);
  public void com.lynx.tasm.behavior.ui.list.AppearEventCourier.onListNodeAttached(@NonNull ListViewHolder holder);
  public void com.lynx.tasm.behavior.ui.list.AppearEventCourier.onListNodeDetached(@NonNull ListViewHolder holder);
  public void com.lynx.tasm.behavior.ui.list.AppearEventCourier.holderAttached(ListViewHolder holder);
  public void com.lynx.tasm.behavior.ui.list.AppearEventCourier.onListLayout();
}

public class com::lynx::tasm::behavior::ui::list::AppearEventCourierImpl : com.lynx.tasm.behavior.ui.list.AppearEventCourierInterface {
  public com.lynx.tasm.behavior.ui.list.AppearEventCourierImpl.AppearEventCourierImpl(@NonNull EventEmitter emitter);
  public void com.lynx.tasm.behavior.ui.list.AppearEventCourierImpl.onListNodeAttached(@NonNull ListViewHolder holder);
  public void com.lynx.tasm.behavior.ui.list.AppearEventCourierImpl.onListNodeDetached(@NonNull ListViewHolder holder);
  public void com.lynx.tasm.behavior.ui.list.AppearEventCourierImpl.holderAttached(ListViewHolder holder);
  public void com.lynx.tasm.behavior.ui.list.AppearEventCourierImpl.onListLayout();
}

public class com::lynx::tasm::behavior::ui::list::AppearEventCourierImplV2 : com.lynx.tasm.behavior.ui.list.AppearEventCourierInterface {
  public com.lynx.tasm.behavior.ui.list.AppearEventCourierImplV2.AppearEventCourierImplV2( @NonNull EventEmitter emitter, @NonNull RecyclerView recyclerView);
  public void com.lynx.tasm.behavior.ui.list.AppearEventCourierImplV2.onListNodeAttached(@NonNull ListViewHolder holder);
  public void com.lynx.tasm.behavior.ui.list.AppearEventCourierImplV2.onListNodeDetached(@NonNull ListViewHolder holder);
  public void com.lynx.tasm.behavior.ui.list.AppearEventCourierImplV2.holderAttached(ListViewHolder holder);
  public void com.lynx.tasm.behavior.ui.list.AppearEventCourierImplV2.onListLayout();
}

public interface com::lynx::tasm::behavior::ui::list::AppearEventCourierInterface {
  public void com.lynx.tasm.behavior.ui.list.AppearEventCourierInterface.onListNodeAttached(@NonNull ListViewHolder holder);
  public void com.lynx.tasm.behavior.ui.list.AppearEventCourierInterface.onListNodeDetached(@NonNull ListViewHolder holder);
  public void com.lynx.tasm.behavior.ui.list.AppearEventCourierInterface.holderAttached(ListViewHolder holder);
  public void com.lynx.tasm.behavior.ui.list.AppearEventCourierInterface.onListLayout();
}

public class com::lynx::jsbridge::Arguments :  {
  public static JavaOnlyArray com.lynx.jsbridge.Arguments.makeNativeArray(List objects);
  public static< T > JavaOnlyArray com.lynx.jsbridge.Arguments.makeNativeArray(final Object objects);
  public static JavaOnlyMap com.lynx.jsbridge.Arguments.makeNativeMap(Map< String, Object > objects);
  public static JavaOnlyMap com.lynx.jsbridge.Arguments.makeNativeMap(Bundle bundle);
  public static WritableArray com.lynx.jsbridge.Arguments.createArray();
  public static WritableMap com.lynx.jsbridge.Arguments.createMap();
  public static JavaOnlyArray com.lynx.jsbridge.Arguments.fromJavaArgs(Object[] args);
  public static WritableArray com.lynx.jsbridge.Arguments.fromArray(Object array);
  public static WritableArray com.lynx.jsbridge.Arguments.fromList(List list);
  public static WritableMap com.lynx.jsbridge.Arguments.fromBundle(Bundle bundle);
  public static ArrayList com.lynx.jsbridge.Arguments.toList(@Nullable ReadableArray readableArray);
  public static Bundle com.lynx.jsbridge.Arguments.toBundle(@Nullable ReadableMap readableMap);
}

public class com::lynx::tasm::base::Assertions :  {
  public com.lynx.tasm.base.Assertions.Assertions();
  public static< T > T com.lynx.tasm.base.Assertions.assumeNotNull(@Nullable T var0);
  public static< T > T com.lynx.tasm.base.Assertions.assumeNotNull(@Nullable T var0, String var1);
  public static< T > T com.lynx.tasm.base.Assertions.assertNotNull(@Nullable T var0);
  public static< T > T com.lynx.tasm.base.Assertions.assertNotNull(@Nullable T var0, String var1);
  public static< T > T com.lynx.tasm.base.Assertions.getAssumingNotNull(List< T > var0, int var1);
  public static< T > T com.lynx.tasm.base.Assertions.getAssertingNotNull(List< T > var0, int var1);
  public static< K, V > V com.lynx.tasm.base.Assertions.getAssumingNotNull(Map< K, V > var0, K var1);
  public static< K, V > V com.lynx.tasm.base.Assertions.getAssertingNotNull(Map< K, V > var0, K var1);
  public static void com.lynx.tasm.base.Assertions.assumeCondition(boolean var0);
  public static void com.lynx.tasm.base.Assertions.assumeCondition(boolean var0, String var1);
  public static void com.lynx.tasm.base.Assertions.assertCondition(boolean var0);
  public static void com.lynx.tasm.base.Assertions.assertCondition(boolean var0, String var1);
  public static AssertionError com.lynx.tasm.base.Assertions.assertUnreachable();
  public static AssertionError com.lynx.tasm.base.Assertions.assertUnreachable(String var0);
  public static AssertionError com.lynx.tasm.base.Assertions.assertUnreachable(Exception var0);
}

public enum com::lynx::tasm::resourceprovider::LynxResourceRequest::AsyncMode {
  public com.lynx.tasm.resourceprovider.LynxResourceRequest.AsyncMode.EXACTLY_ASYNC EXACTLY_ASYNC;
  public com.lynx.tasm.resourceprovider.LynxResourceRequest.AsyncMode.EXACTLY_SYNC EXACTLY_SYNC;
  public com.lynx.tasm.resourceprovider.LynxResourceRequest.AsyncMode.MOST_SYNC MOST_SYNC;
}

public interface com::lynx::tasm::behavior::ui::UIBody::UIBodyView::attachLynxPageUICallback {
  public void com.lynx.tasm.behavior.ui.UIBody.UIBodyView.attachLynxPageUICallback.attachLynxPageUI(@NonNull WeakReference< Object > ui);
}

public class com::lynx::jsbridge::AttributeDescriptor :  {
  public com.lynx.jsbridge.AttributeDescriptor.AttributeDescriptor(String name, JavaOnlyArray value);
  public String com.lynx.jsbridge.AttributeDescriptor.getName();
  public JavaOnlyArray com.lynx.jsbridge.AttributeDescriptor.getValue();
}

public interface com::lynx::tasm::behavior::AutoGenStyleConstants {
  public final int com.lynx.tasm.behavior.AutoGenStyleConstants.WHITESPACE_NORMAL WHITESPACE_NORMAL;
  public final int com.lynx.tasm.behavior.AutoGenStyleConstants.WHITESPACE_NOWRAP WHITESPACE_NOWRAP;
  public final int com.lynx.tasm.behavior.AutoGenStyleConstants.TEXTOVERFLOW_CLIP TEXTOVERFLOW_CLIP;
  public final int com.lynx.tasm.behavior.AutoGenStyleConstants.TEXTOVERFLOW_ELLIPSIS TEXTOVERFLOW_ELLIPSIS;
  public final int com.lynx.tasm.behavior.AutoGenStyleConstants.FONTWEIGHT_NORMAL FONTWEIGHT_NORMAL;
  public final int com.lynx.tasm.behavior.AutoGenStyleConstants.FONTWEIGHT_BOLD FONTWEIGHT_BOLD;
  public final int com.lynx.tasm.behavior.AutoGenStyleConstants.FONTWEIGHT_100 FONTWEIGHT_100;
  public final int com.lynx.tasm.behavior.AutoGenStyleConstants.FONTWEIGHT_200 FONTWEIGHT_200;
  public final int com.lynx.tasm.behavior.AutoGenStyleConstants.FONTWEIGHT_300 FONTWEIGHT_300;
  public final int com.lynx.tasm.behavior.AutoGenStyleConstants.FONTWEIGHT_400 FONTWEIGHT_400;
  public final int com.lynx.tasm.behavior.AutoGenStyleConstants.FONTWEIGHT_500 FONTWEIGHT_500;
  public final int com.lynx.tasm.behavior.AutoGenStyleConstants.FONTWEIGHT_600 FONTWEIGHT_600;
  public final int com.lynx.tasm.behavior.AutoGenStyleConstants.FONTWEIGHT_700 FONTWEIGHT_700;
  public final int com.lynx.tasm.behavior.AutoGenStyleConstants.FONTWEIGHT_800 FONTWEIGHT_800;
  public final int com.lynx.tasm.behavior.AutoGenStyleConstants.FONTWEIGHT_900 FONTWEIGHT_900;
  public final int com.lynx.tasm.behavior.AutoGenStyleConstants.FONTSTYLE_NORMAL FONTSTYLE_NORMAL;
  public final int com.lynx.tasm.behavior.AutoGenStyleConstants.FONTSTYLE_ITALIC FONTSTYLE_ITALIC;
  public final int com.lynx.tasm.behavior.AutoGenStyleConstants.FONTSTYLE_OBLIQUE FONTSTYLE_OBLIQUE;
  public final int com.lynx.tasm.behavior.AutoGenStyleConstants.VISIBILITY_HIDDEN VISIBILITY_HIDDEN;
  public final int com.lynx.tasm.behavior.AutoGenStyleConstants.VISIBILITY_VISIBLE VISIBILITY_VISIBLE;
  public final int com.lynx.tasm.behavior.AutoGenStyleConstants.VISIBILITY_NONE VISIBILITY_NONE;
  public final int com.lynx.tasm.behavior.AutoGenStyleConstants.VISIBILITY_COLLAPSE VISIBILITY_COLLAPSE;
  public final int com.lynx.tasm.behavior.AutoGenStyleConstants.WORDBREAK_NORMAL WORDBREAK_NORMAL;
  public final int com.lynx.tasm.behavior.AutoGenStyleConstants.WORDBREAK_BREAKALL WORDBREAK_BREAKALL;
  public final int com.lynx.tasm.behavior.AutoGenStyleConstants.WORDBREAK_KEEPALL WORDBREAK_KEEPALL;
  public final int com.lynx.tasm.behavior.AutoGenStyleConstants.IMAGERENDERING_AUTO IMAGERENDERING_AUTO;
  public final int com.lynx.tasm.behavior.AutoGenStyleConstants.IMAGERENDERING_CRISPEDGES IMAGERENDERING_CRISPEDGES;
  public final int com.lynx.tasm.behavior.AutoGenStyleConstants.IMAGERENDERING_PIXELATED IMAGERENDERING_PIXELATED;
  public final int com.lynx.tasm.behavior.AutoGenStyleConstants.HYPHENS_NONE HYPHENS_NONE;
  public final int com.lynx.tasm.behavior.AutoGenStyleConstants.HYPHENS_MANUAL HYPHENS_MANUAL;
  public final int com.lynx.tasm.behavior.AutoGenStyleConstants.HYPHENS_AUTO HYPHENS_AUTO;
  public final int com.lynx.tasm.behavior.AutoGenStyleConstants.XAPPREGION_NONE XAPPREGION_NONE;
  public final int com.lynx.tasm.behavior.AutoGenStyleConstants.XAPPREGION_DRAG XAPPREGION_DRAG;
  public final int com.lynx.tasm.behavior.AutoGenStyleConstants.XAPPREGION_NODRAG XAPPREGION_NODRAG;
  public final int com.lynx.tasm.behavior.AutoGenStyleConstants.XANIMATIONCOLORINTERPOLATION_AUTO XANIMATIONCOLORINTERPOLATION_AUTO;
  public final int com.lynx.tasm.behavior.AutoGenStyleConstants.XANIMATIONCOLORINTERPOLATION_SRGB XANIMATIONCOLORINTERPOLATION_SRGB;
  public final int com.lynx.tasm.behavior.AutoGenStyleConstants.XANIMATIONCOLORINTERPOLATION_LINEARRGB XANIMATIONCOLORINTERPOLATION_LINEARRGB;
}

public class com::lynx::tasm::image::AutoSizeImage : com.lynx.tasm.behavior.shadow.ShadowNode, com.lynx.tasm.behavior.shadow.MeasureFunc {
  public com.lynx.tasm.image.AutoSizeImage.AutoSizeImage();
  public long com.lynx.tasm.image.AutoSizeImage.measure(LayoutNode node, float width, MeasureMode widthMode, float height, MeasureMode heightMode);
  public void com.lynx.tasm.image.AutoSizeImage.justSizeIfNeeded(final boolean autoSize, final int bitmapW, final int bitmapH, final int width, final int height);
}

public class com::lynx::tasm::behavior::shadow::text::BackgroundColorSpan : android.text.style.BackgroundColorSpan {
  public com.lynx.tasm.behavior.shadow.text.BackgroundColorSpan.BackgroundColorSpan(int color);
  public boolean com.lynx.tasm.behavior.shadow.text.BackgroundColorSpan.equals(Object o);
  public int com.lynx.tasm.behavior.shadow.text.BackgroundColorSpan.hashCode();
}

public class com::lynx::tasm::behavior::ui::utils::BackgroundDrawable : com.lynx.tasm.behavior.ui.utils.LayerDrawable< BackgroundLayerManager > {
  public com.lynx.tasm.behavior.ui.utils.BackgroundDrawable.BackgroundDrawable(LynxContext lynxContext, float curFontSize);
  public void com.lynx.tasm.behavior.ui.utils.BackgroundDrawable.draw(Canvas canvas);
  public void com.lynx.tasm.behavior.ui.utils.BackgroundDrawable.drawBackGround(Canvas canvas);
  public void com.lynx.tasm.behavior.ui.utils.BackgroundDrawable.setAlpha(int alpha);
  public int com.lynx.tasm.behavior.ui.utils.BackgroundDrawable.getAlpha();
  public void com.lynx.tasm.behavior.ui.utils.BackgroundDrawable.setColorFilter(ColorFilter cf);
  public int com.lynx.tasm.behavior.ui.utils.BackgroundDrawable.getOpacity();
  public void com.lynx.tasm.behavior.ui.utils.BackgroundDrawable.getOutline(Outline outline);
  public boolean com.lynx.tasm.behavior.ui.utils.BackgroundDrawable.setBorderWidth(int position, float width);
  public boolean com.lynx.tasm.behavior.ui.utils.BackgroundDrawable.setPaddingWidth(float top, float right, float bottom, float left);
  public void com.lynx.tasm.behavior.ui.utils.BackgroundDrawable.setBorderColor(int position, float rgb, float alpha);
  public BorderStyle com.lynx.tasm.behavior.ui.utils.BackgroundDrawable.getBorderStyle(int position);
  public void com.lynx.tasm.behavior.ui.utils.BackgroundDrawable.setBorderStyle(int position, int style);
  public BorderRadius com.lynx.tasm.behavior.ui.utils.BackgroundDrawable.getBorderRadius();
  public void com.lynx.tasm.behavior.ui.utils.BackgroundDrawable.setBorderRadiusCorner(int position, BorderRadius.Corner radius);
  public void com.lynx.tasm.behavior.ui.utils.BackgroundDrawable.setColor(int color);
  public int com.lynx.tasm.behavior.ui.utils.BackgroundDrawable.getColor();
  public Path com.lynx.tasm.behavior.ui.utils.BackgroundDrawable.getInnerClipPathForBorderRadius();
  public void com.lynx.tasm.behavior.ui.utils.BackgroundDrawable.setBoxShadowInsetDrawer(UIShadowProxy.InsetDrawer drawer);
  public UIShadowProxy.InsetDrawer com.lynx.tasm.behavior.ui.utils.BackgroundDrawable.getBoxShadowInsetDrawer();
}

public class abstract com::lynx::tasm::behavior::ui::background::BackgroundGradientLayer : com.lynx.tasm.behavior.ui.background.BackgroundLayerDrawable {
  public boolean com.lynx.tasm.behavior.ui.background.BackgroundGradientLayer.isReady();
  public int com.lynx.tasm.behavior.ui.background.BackgroundGradientLayer.getImageWidth();
  public int com.lynx.tasm.behavior.ui.background.BackgroundGradientLayer.getImageHeight();
  public void com.lynx.tasm.behavior.ui.background.BackgroundGradientLayer.onAttach();
  public void com.lynx.tasm.behavior.ui.background.BackgroundGradientLayer.onDetach();
  public void com.lynx.tasm.behavior.ui.background.BackgroundGradientLayer.onSizeChanged(int width, int height);
  public Shader com.lynx.tasm.behavior.ui.background.BackgroundGradientLayer.getShader();
  public void com.lynx.tasm.behavior.ui.background.BackgroundGradientLayer.draw(@NonNull Canvas canvas);
}

public class com::lynx::tasm::behavior::ui::image::BackgroundImageDrawable : com.lynx.tasm.behavior.ui.background.BackgroundLayerDrawable {
  public final String com.lynx.tasm.behavior.ui.image.BackgroundImageDrawable.EVENT_ERROR EVENT_ERROR;
  public final String com.lynx.tasm.behavior.ui.image.BackgroundImageDrawable.EVENT_LOAD EVENT_LOAD;
  public com.lynx.tasm.behavior.ui.image.BackgroundImageDrawable.BackgroundImageDrawable(Context context, String url);
  public boolean com.lynx.tasm.behavior.ui.image.BackgroundImageDrawable.isReady();
  public int com.lynx.tasm.behavior.ui.image.BackgroundImageDrawable.getImageWidth();
  public int com.lynx.tasm.behavior.ui.image.BackgroundImageDrawable.getImageHeight();
  public void com.lynx.tasm.behavior.ui.image.BackgroundImageDrawable.setBitmapConfig(@Nullable Bitmap.Config config);
  public void com.lynx.tasm.behavior.ui.image.BackgroundImageDrawable.onAttach();
  public void com.lynx.tasm.behavior.ui.image.BackgroundImageDrawable.onDetach();
  public void com.lynx.tasm.behavior.ui.image.BackgroundImageDrawable.onSizeChanged(int width, int height);
  public void com.lynx.tasm.behavior.ui.image.BackgroundImageDrawable.draw(@NonNull Canvas canvas);
  public void com.lynx.tasm.behavior.ui.image.BackgroundImageDrawable.setLynxUI(LynxBaseUI ui);
}

public interface com::lynx::tasm::behavior::ui::background::BackgroundImageLoader {
  public BackgroundLayerDrawable com.lynx.tasm.behavior.ui.background.BackgroundImageLoader.loadImage(Context ctx, String url);
}

public class abstract com::lynx::tasm::behavior::ui::background::BackgroundLayerDrawable : Drawable {
  public abstract boolean com.lynx.tasm.behavior.ui.background.BackgroundLayerDrawable.isReady();
  public abstract int com.lynx.tasm.behavior.ui.background.BackgroundLayerDrawable.getImageWidth();
  public abstract int com.lynx.tasm.behavior.ui.background.BackgroundLayerDrawable.getImageHeight();
  public abstract void com.lynx.tasm.behavior.ui.background.BackgroundLayerDrawable.onAttach();
  public abstract void com.lynx.tasm.behavior.ui.background.BackgroundLayerDrawable.onDetach();
  public abstract void com.lynx.tasm.behavior.ui.background.BackgroundLayerDrawable.onSizeChanged(int width, int height);
  public void com.lynx.tasm.behavior.ui.background.BackgroundLayerDrawable.setAlpha(int alpha);
  public void com.lynx.tasm.behavior.ui.background.BackgroundLayerDrawable.setColorFilter(@Nullable ColorFilter colorFilter);
  public int com.lynx.tasm.behavior.ui.background.BackgroundLayerDrawable.getOpacity();
  public void com.lynx.tasm.behavior.ui.background.BackgroundLayerDrawable.setPathEffect(Path path);
  public Path com.lynx.tasm.behavior.ui.background.BackgroundLayerDrawable.getPathEffect();
  public void com.lynx.tasm.behavior.ui.background.BackgroundLayerDrawable.setBitmapConfig(@Nullable Bitmap.Config config);
  public void com.lynx.tasm.behavior.ui.background.BackgroundLayerDrawable.setEnableBitmapGradient(boolean enable);
  public void com.lynx.tasm.behavior.ui.background.BackgroundLayerDrawable.setLynxUI(LynxBaseUI ui);
}

public class com::lynx::tasm::behavior::ui::background::BackgroundLayerManager : com.lynx.tasm.behavior.ui.background.LayerManager {
  public com.lynx.tasm.behavior.ui.background.BackgroundLayerManager.BackgroundLayerManager(LynxContext context, Drawable drawable, float curFontSize);
  public boolean com.lynx.tasm.behavior.ui.background.BackgroundLayerManager.hasBackgroundLayers();
}

public class com::lynx::tasm::behavior::ui::background::BackgroundLinearGradientLayer : com.lynx.tasm.behavior.ui.background.BackgroundGradientLayer {
  public com.lynx.tasm.behavior.ui.background.BackgroundLinearGradientLayer.BackgroundLinearGradientLayer(ReadableArray array);
  public void com.lynx.tasm.behavior.ui.background.BackgroundLinearGradientLayer.setBounds(Rect bounds);
  public void com.lynx.tasm.behavior.ui.background.BackgroundLinearGradientLayer.setEnableBitmapGradient(boolean enable);
}

public class com::lynx::tasm::behavior::ui::utils::BackgroundManager : com.lynx.tasm.behavior.ui.utils.LynxBackground {
  public com.lynx.tasm.behavior.ui.utils.BackgroundManager.BackgroundManager(LynxUI ui, LynxContext lynxContext);
  public void com.lynx.tasm.behavior.ui.utils.BackgroundManager.setPostTranlate(PointF tranlate);
  public void com.lynx.tasm.behavior.ui.utils.BackgroundManager.setTransformOrigin(TransformOrigin transformOrigin);
  public void com.lynx.tasm.behavior.ui.utils.BackgroundManager.appendTransform(@Nullable List< TransformRaw > styleProperty);
  public void com.lynx.tasm.behavior.ui.utils.BackgroundManager.setTransform(@Nullable List< TransformRaw > styleProperty);
  public float com.lynx.tasm.behavior.ui.utils.BackgroundManager.getTranslateZ();
  public TransformProps com.lynx.tasm.behavior.ui.utils.BackgroundManager.getTransformProps();
  public void com.lynx.tasm.behavior.ui.utils.BackgroundManager.setTransformOrder(boolean transformOrder);
  public static float com.lynx.tasm.behavior.ui.utils.BackgroundManager.convertAngle(String angle);
}

public class com::lynx::tasm::behavior::ui::background::BackgroundNoneLayer : com.lynx.tasm.behavior.ui.background.BackgroundLayerDrawable {
  public com.lynx.tasm.behavior.ui.background.BackgroundNoneLayer.BackgroundNoneLayer();
  public boolean com.lynx.tasm.behavior.ui.background.BackgroundNoneLayer.isReady();
  public int com.lynx.tasm.behavior.ui.background.BackgroundNoneLayer.getImageWidth();
  public int com.lynx.tasm.behavior.ui.background.BackgroundNoneLayer.getImageHeight();
  public void com.lynx.tasm.behavior.ui.background.BackgroundNoneLayer.onAttach();
  public void com.lynx.tasm.behavior.ui.background.BackgroundNoneLayer.onDetach();
  public void com.lynx.tasm.behavior.ui.background.BackgroundNoneLayer.onSizeChanged(int width, int height);
  public void com.lynx.tasm.behavior.ui.background.BackgroundNoneLayer.draw(@NonNull Canvas canvas);
}

public class com::lynx::tasm::behavior::ui::background::BackgroundPosition :  {
  public com.lynx.tasm.behavior.ui.background.BackgroundPosition.BackgroundPosition(Dynamic value, int type);
  public float com.lynx.tasm.behavior.ui.background.BackgroundPosition.apply(float parentValue);
}

public class com::lynx::tasm::behavior::ui::background::BackgroundRadialGradientLayer : com.lynx.tasm.behavior.ui.background.BackgroundGradientLayer {
  public com.lynx.tasm.behavior.ui.background.BackgroundRadialGradientLayer.BackgroundRadialGradientLayer(ReadableArray array);
  public void com.lynx.tasm.behavior.ui.background.BackgroundRadialGradientLayer.setBounds(Rect bounds);
}

public enum com::lynx::tasm::behavior::ui::background::BackgroundRepeat {
  public com.lynx.tasm.behavior.ui.background.BackgroundRepeat.REPEAT REPEAT;
  public com.lynx.tasm.behavior.ui.background.BackgroundRepeat.NO_REPEAT NO_REPEAT;
  public com.lynx.tasm.behavior.ui.background.BackgroundRepeat.REPEAT_X REPEAT_X;
  public com.lynx.tasm.behavior.ui.background.BackgroundRepeat.REPEAT_Y REPEAT_Y;
  public com.lynx.tasm.behavior.ui.background.BackgroundRepeat.ROUND ROUND;
  public com.lynx.tasm.behavior.ui.background.BackgroundRepeat.SPACE SPACE;
  public static BackgroundRepeat com.lynx.tasm.behavior.ui.background.BackgroundRepeat.valueOf(int value);
}

public class com::lynx::tasm::behavior::ui::background::BackgroundSize :  {
  public boolean com.lynx.tasm.behavior.ui.background.BackgroundSize.isCover();
  public boolean com.lynx.tasm.behavior.ui.background.BackgroundSize.isContain();
  public boolean com.lynx.tasm.behavior.ui.background.BackgroundSize.isAuto();
  public com.lynx.tasm.behavior.ui.background.BackgroundSize.BackgroundSize(Dynamic value, int type);
  public float com.lynx.tasm.behavior.ui.background.BackgroundSize.apply(float parentValue, float currentValue);
}

public class abstract com::lynx::tasm::gesture::handler::BaseGestureHandler :  {
  public com.lynx.tasm.gesture.handler.BaseGestureHandler.BaseGestureHandler(int sign, LynxContext lynxContext, @NonNull GestureDetector gestureDetector, @NonNull GestureArenaMember gestureArenaMember);
  public void com.lynx.tasm.gesture.handler.BaseGestureHandler.handleMotionEvent(@Nullable MotionEvent event, @Nullable LynxTouchEvent lynxTouchEvent, float deltaX, float deltaY);
  public void com.lynx.tasm.gesture.handler.BaseGestureHandler.activate();
  public void com.lynx.tasm.gesture.handler.BaseGestureHandler.reset();
  public void com.lynx.tasm.gesture.handler.BaseGestureHandler.fail();
  public void com.lynx.tasm.gesture.handler.BaseGestureHandler.begin();
  public void com.lynx.tasm.gesture.handler.BaseGestureHandler.ignore();
  public void com.lynx.tasm.gesture.handler.BaseGestureHandler.end();
  public void com.lynx.tasm.gesture.handler.BaseGestureHandler.onTouchesDown(LynxTouchEvent touchEvent);
  public void com.lynx.tasm.gesture.handler.BaseGestureHandler.onTouchesMove(LynxTouchEvent touchEvent);
  public void com.lynx.tasm.gesture.handler.BaseGestureHandler.onTouchesUp(LynxTouchEvent touchEvent);
  public void com.lynx.tasm.gesture.handler.BaseGestureHandler.onTouchesCancel(LynxTouchEvent touchEvent);
  public static Map< Integer, BaseGestureHandler > com.lynx.tasm.gesture.handler.BaseGestureHandler.convertToGestureHandler(int sign, LynxContext lynxContext, GestureArenaMember member, Map< Integer, GestureDetector > gestureDetectors);
}

public class com::lynx::tasm::behavior::shadow::text::TextRendererKey::BaseKey :  {
  public boolean com.lynx.tasm.behavior.shadow.text.TextRendererKey.BaseKey.equals(Object o);
  public int com.lynx.tasm.behavior.shadow.text.TextRendererKey.BaseKey.hashCode();
}

public class abstract com::lynx::tasm::animation::layout::BaseLayoutAnimation : com.lynx.tasm.animation.layout.AbstractLayoutAnimation {
}

public class com::lynx::tasm::behavior::shadow::text::BaselineShiftCalculator :  {
  public com.lynx.tasm.behavior.shadow.text.BaselineShiftCalculator.BaselineShiftCalculator(List< Float > textFontMetricForVerticalAlign);
  public float com.lynx.tasm.behavior.shadow.text.BaselineShiftCalculator.calcBaselineShiftAscender(int verticalAlign, float verticalAlignValue, float ascender, float descender);
  public float com.lynx.tasm.behavior.shadow.text.BaselineShiftCalculator.getMaxFontDescent();
  public float com.lynx.tasm.behavior.shadow.text.BaselineShiftCalculator.getMaxFontAscent();
}

public class com::lynx::tasm::behavior::shadow::text::BaseTextShadowNode : com.lynx.tasm.behavior.shadow.ShadowNode {
  public com.lynx.tasm.behavior.shadow.text.BaseTextShadowNode.BaseTextShadowNode();
  public void com.lynx.tasm.behavior.shadow.text.BaseTextShadowNode.setContext(LynxContext context);
  public TextAttributes com.lynx.tasm.behavior.shadow.text.BaseTextShadowNode.getTextAttributes();
  public void com.lynx.tasm.behavior.shadow.text.BaseTextShadowNode.setWhiteSpace(int whiteSpace);
  public void com.lynx.tasm.behavior.shadow.text.BaseTextShadowNode.setIncludeFontPadding(boolean includeFontPadding);
  public void com.lynx.tasm.behavior.shadow.text.BaseTextShadowNode.setTextOverflow(int textOverflow);
  public void com.lynx.tasm.behavior.shadow.text.BaseTextShadowNode.setFontWeight(int fontWeightNumeric);
  public void com.lynx.tasm.behavior.shadow.text.BaseTextShadowNode.setFontStyle(int fontStyle);
  public void com.lynx.tasm.behavior.shadow.text.BaseTextShadowNode.setFontFamily(String fontFamily);
  public void com.lynx.tasm.behavior.shadow.text.BaseTextShadowNode.setUseWebLineHeight(boolean useWebLineHeight);
  public void com.lynx.tasm.behavior.shadow.text.BaseTextShadowNode.setBaselineShift(String shift);
  public void com.lynx.tasm.behavior.shadow.text.BaseTextShadowNode.setLineHeight(float lineHeight);
  public void com.lynx.tasm.behavior.shadow.text.BaseTextShadowNode.setFontSize(float fontSize);
  public void com.lynx.tasm.behavior.shadow.text.BaseTextShadowNode.setEnableFontScaling(String enable);
  public void com.lynx.tasm.behavior.shadow.text.BaseTextShadowNode.setColor(int color);
  public void com.lynx.tasm.behavior.shadow.text.BaseTextShadowNode.setColor(Dynamic color);
  public void com.lynx.tasm.behavior.shadow.text.BaseTextShadowNode.setLetterSpacing(float letterSpacing);
  public void com.lynx.tasm.behavior.shadow.text.BaseTextShadowNode.setLineSpacing(float lineSpacing);
  public void com.lynx.tasm.behavior.shadow.text.BaseTextShadowNode.setTextShadow(@Nullable ReadableArray textShadow);
  public void com.lynx.tasm.behavior.shadow.text.BaseTextShadowNode.setTextDecoration(@StyleConstants.TextDecoration int textDecoration);
  public void com.lynx.tasm.behavior.shadow.text.BaseTextShadowNode.setTextDecoration(ReadableArray textDecoration);
  public void com.lynx.tasm.behavior.shadow.text.BaseTextShadowNode.setTextStrokeWidth(float textStrokeWidth);
  public void com.lynx.tasm.behavior.shadow.text.BaseTextShadowNode.setTextStrokeColor(Dynamic color);
  public void com.lynx.tasm.behavior.shadow.text.BaseTextShadowNode.setTextAlign(int textAlign);
  public void com.lynx.tasm.behavior.shadow.text.BaseTextShadowNode.setDirection(int direction);
  public void com.lynx.tasm.behavior.shadow.text.BaseTextShadowNode.setTextVerticalAlign(String textVerticalAlign);
  public void com.lynx.tasm.behavior.shadow.text.BaseTextShadowNode.setTextMaxLine(String maxLine);
  public void com.lynx.tasm.behavior.shadow.text.BaseTextShadowNode.setTextMaxLength(String textMaxLength);
  public void com.lynx.tasm.behavior.shadow.text.BaseTextShadowNode.setWordBreakStrategy(int value);
  public void com.lynx.tasm.behavior.shadow.text.BaseTextShadowNode.setTextFakeBold(boolean fakeBold);
  public int com.lynx.tasm.behavior.shadow.text.BaseTextShadowNode.getTypefaceStyle();
  public void com.lynx.tasm.behavior.shadow.text.BaseTextShadowNode.addChildAt(ShadowNode child, int i);
  public void com.lynx.tasm.behavior.shadow.text.BaseTextShadowNode.setEnableBitmapGradient(boolean enable);
  public void com.lynx.tasm.behavior.shadow.text.BaseTextShadowNode.setTextIndent(ReadableArray array);
  public void com.lynx.tasm.behavior.shadow.text.BaseTextShadowNode.setEnableEmojiCompat(boolean enable);
  public void com.lynx.tasm.behavior.shadow.text.BaseTextShadowNode.setText(@Nullable Dynamic text);
}

public class com::lynx::tasm::behavior::ui::shapes::BasicShape :  {
  public final int com.lynx.tasm.behavior.ui.shapes.BasicShape.RAW_PARAMS_LEN_PATH RAW_PARAMS_LEN_PATH;
  public final int com.lynx.tasm.behavior.ui.shapes.BasicShape.RAW_PARAMS_LEN_CIRCLE RAW_PARAMS_LEN_CIRCLE;
  public final int com.lynx.tasm.behavior.ui.shapes.BasicShape.RAW_PARAMS_LEN_ELLIPSE RAW_PARAMS_LEN_ELLIPSE;
  public final int com.lynx.tasm.behavior.ui.shapes.BasicShape.RAW_PARAMS_LEN_SUPER_ELLIPSE RAW_PARAMS_LEN_SUPER_ELLIPSE;
  public final int com.lynx.tasm.behavior.ui.shapes.BasicShape.RAW_INDEX_PATH_DATA RAW_INDEX_PATH_DATA;
  public final int com.lynx.tasm.behavior.ui.shapes.BasicShape.RAW_INDEX_CIRCLE_RADIUS RAW_INDEX_CIRCLE_RADIUS;
  public final int com.lynx.tasm.behavior.ui.shapes.BasicShape.RAW_INDEX_CIRCLE_RADIUS_UNIT RAW_INDEX_CIRCLE_RADIUS_UNIT;
  public final int com.lynx.tasm.behavior.ui.shapes.BasicShape.RAW_INDEX_CIRCLE_CENTER_X RAW_INDEX_CIRCLE_CENTER_X;
  public final int com.lynx.tasm.behavior.ui.shapes.BasicShape.RAW_INDEX_CIRCLE_CENTER_X_UNIT RAW_INDEX_CIRCLE_CENTER_X_UNIT;
  public final int com.lynx.tasm.behavior.ui.shapes.BasicShape.RAW_INDEX_CIRCLE_CENTER_Y RAW_INDEX_CIRCLE_CENTER_Y;
  public final int com.lynx.tasm.behavior.ui.shapes.BasicShape.RAW_INDEX_CIRCLE_CENTER_Y_UNIT RAW_INDEX_CIRCLE_CENTER_Y_UNIT;
  public final int com.lynx.tasm.behavior.ui.shapes.BasicShape.RAW_INDEX_ELLIPSE_RADIUS_X RAW_INDEX_ELLIPSE_RADIUS_X;
  public final int com.lynx.tasm.behavior.ui.shapes.BasicShape.RAW_INDEX_ELLIPSE_RADIUS_X_UNIT RAW_INDEX_ELLIPSE_RADIUS_X_UNIT;
  public final int com.lynx.tasm.behavior.ui.shapes.BasicShape.RAW_INDEX_ELLIPSE_RADIUS_Y RAW_INDEX_ELLIPSE_RADIUS_Y;
  public final int com.lynx.tasm.behavior.ui.shapes.BasicShape.RAW_INDEX_ELLIPSE_RADIUS_Y_UNIT RAW_INDEX_ELLIPSE_RADIUS_Y_UNIT;
  public final int com.lynx.tasm.behavior.ui.shapes.BasicShape.RAW_INDEX_ELLIPSE_CENTER_X RAW_INDEX_ELLIPSE_CENTER_X;
  public final int com.lynx.tasm.behavior.ui.shapes.BasicShape.RAW_INDEX_ELLIPSE_CENTER_X_UNIT RAW_INDEX_ELLIPSE_CENTER_X_UNIT;
  public final int com.lynx.tasm.behavior.ui.shapes.BasicShape.RAW_INDEX_ELLIPSE_CENTER_Y RAW_INDEX_ELLIPSE_CENTER_Y;
  public final int com.lynx.tasm.behavior.ui.shapes.BasicShape.RAW_INDEX_ELLIPSE_CENTER_Y_UNIT RAW_INDEX_ELLIPSE_CENTER_Y_UNIT;
  public final int com.lynx.tasm.behavior.ui.shapes.BasicShape.RAW_INDEX_SUPER_ELLIPSE_RADIUS_X RAW_INDEX_SUPER_ELLIPSE_RADIUS_X;
  public final int com.lynx.tasm.behavior.ui.shapes.BasicShape.RAW_INDEX_SUPER_ELLIPSE_RADIUS_X_UNIT RAW_INDEX_SUPER_ELLIPSE_RADIUS_X_UNIT;
  public final int com.lynx.tasm.behavior.ui.shapes.BasicShape.RAW_INDEX_SUPER_ELLIPSE_RADIUS_Y RAW_INDEX_SUPER_ELLIPSE_RADIUS_Y;
  public final int com.lynx.tasm.behavior.ui.shapes.BasicShape.RAW_INDEX_SUPER_ELLIPSE_RADIUS_Y_UNIT RAW_INDEX_SUPER_ELLIPSE_RADIUS_Y_UNIT;
  public final int com.lynx.tasm.behavior.ui.shapes.BasicShape.RAW_INDEX_SUPER_ELLIPSE_EXPONENT_X RAW_INDEX_SUPER_ELLIPSE_EXPONENT_X;
  public final int com.lynx.tasm.behavior.ui.shapes.BasicShape.RAW_INDEX_SUPER_ELLIPSE_EXPONENT_Y RAW_INDEX_SUPER_ELLIPSE_EXPONENT_Y;
  public final int com.lynx.tasm.behavior.ui.shapes.BasicShape.RAW_INDEX_SUPER_ELLIPSE_CENTER_X RAW_INDEX_SUPER_ELLIPSE_CENTER_X;
  public final int com.lynx.tasm.behavior.ui.shapes.BasicShape.RAW_INDEX_SUPER_ELLIPSE_CENTER_X_UNIT RAW_INDEX_SUPER_ELLIPSE_CENTER_X_UNIT;
  public final int com.lynx.tasm.behavior.ui.shapes.BasicShape.RAW_INDEX_SUPER_ELLIPSE_CENTER_Y RAW_INDEX_SUPER_ELLIPSE_CENTER_Y;
  public final int com.lynx.tasm.behavior.ui.shapes.BasicShape.RAW_INDEX_SUPER_ELLIPSE_CENTER_Y_UNIT RAW_INDEX_SUPER_ELLIPSE_CENTER_Y_UNIT;
  public final int com.lynx.tasm.behavior.ui.shapes.BasicShape.PARAMS_LEN_CIRCLE PARAMS_LEN_CIRCLE;
  public final int com.lynx.tasm.behavior.ui.shapes.BasicShape.INDEX_CIRCLE_RADIUS INDEX_CIRCLE_RADIUS;
  public final int com.lynx.tasm.behavior.ui.shapes.BasicShape.INDEX_CIRCLE_CENTER_X INDEX_CIRCLE_CENTER_X;
  public final int com.lynx.tasm.behavior.ui.shapes.BasicShape.INDEX_CIRCLE_CENTER_Y INDEX_CIRCLE_CENTER_Y;
  public final int com.lynx.tasm.behavior.ui.shapes.BasicShape.PARAMS_LEN_ELLIPSE PARAMS_LEN_ELLIPSE;
  public final int com.lynx.tasm.behavior.ui.shapes.BasicShape.INDEX_ELLIPSE_RADIUS_X INDEX_ELLIPSE_RADIUS_X;
  public final int com.lynx.tasm.behavior.ui.shapes.BasicShape.INDEX_ELLIPSE_RADIUS_Y INDEX_ELLIPSE_RADIUS_Y;
  public final int com.lynx.tasm.behavior.ui.shapes.BasicShape.INDEX_ELLIPSE_CENTER_X INDEX_ELLIPSE_CENTER_X;
  public final int com.lynx.tasm.behavior.ui.shapes.BasicShape.INDEX_ELLIPSE_CENTER_Y INDEX_ELLIPSE_CENTER_Y;
  public final int com.lynx.tasm.behavior.ui.shapes.BasicShape.PARAMS_LEN_SUPER_ELLIPSE PARAMS_LEN_SUPER_ELLIPSE;
  public final int com.lynx.tasm.behavior.ui.shapes.BasicShape.INDEX_SUPER_ELLIPSE_RADIUS_X INDEX_SUPER_ELLIPSE_RADIUS_X;
  public final int com.lynx.tasm.behavior.ui.shapes.BasicShape.INDEX_SUPER_ELLIPSE_RADIUS_Y INDEX_SUPER_ELLIPSE_RADIUS_Y;
  public final int com.lynx.tasm.behavior.ui.shapes.BasicShape.INDEX_SUPER_ELLIPSE_CENTER_X INDEX_SUPER_ELLIPSE_CENTER_X;
  public final int com.lynx.tasm.behavior.ui.shapes.BasicShape.INDEX_SUPER_ELLIPSE_CENTER_Y INDEX_SUPER_ELLIPSE_CENTER_Y;
  public final int com.lynx.tasm.behavior.ui.shapes.BasicShape.PARAMS_LEN_SUPER_ELLIPSE_EXPONENTS PARAMS_LEN_SUPER_ELLIPSE_EXPONENTS;
  public final int com.lynx.tasm.behavior.ui.shapes.BasicShape.INDEX_SUPER_ELLIPSE_EXPONENT_X INDEX_SUPER_ELLIPSE_EXPONENT_X;
  public final int com.lynx.tasm.behavior.ui.shapes.BasicShape.INDEX_SUPER_ELLIPSE_EXPONENT_Y INDEX_SUPER_ELLIPSE_EXPONENT_Y;
  public Length [] com.lynx.tasm.behavior.ui.shapes.BasicShape.params params;
  public double [] com.lynx.tasm.behavior.ui.shapes.BasicShape.exponents exponents;
  public static BasicShape com.lynx.tasm.behavior.ui.shapes.BasicShape.CreateFromReadableArray( @Nullable ReadableArray paramsArray, float scaledDensity);
  public com.lynx.tasm.behavior.ui.shapes.BasicShape.BasicShape(String data, float scaledDensity);
  public com.lynx.tasm.behavior.ui.shapes.BasicShape.BasicShape(int type);
  public Path com.lynx.tasm.behavior.ui.shapes.BasicShape.getPath(int width, int height);
}

public class com::lynx::tasm::behavior::Behavior :  {
  public com.lynx.tasm.behavior.Behavior.Behavior(String name);
  public com.lynx.tasm.behavior.Behavior.Behavior(String name, boolean flatten);
  public com.lynx.tasm.behavior.Behavior.Behavior(String name, boolean flatten, boolean createAsync);
  public boolean com.lynx.tasm.behavior.Behavior.supportCreateAsync();
  public LynxUI com.lynx.tasm.behavior.Behavior.createUI(LynxContext context);
  public LynxUI com.lynx.tasm.behavior.Behavior.createUIFiber(LynxContext context);
  public LynxFlattenUI com.lynx.tasm.behavior.Behavior.createFlattenUI(LynxContext context);
  public LynxFlattenUI com.lynx.tasm.behavior.Behavior.createFlattenUIFiber(LynxContext context);
  public ShadowNode com.lynx.tasm.behavior.Behavior.createShadowNode();
  public BehaviorClassWarmer com.lynx.tasm.behavior.Behavior.createClassWarmer();
  public final boolean com.lynx.tasm.behavior.Behavior.supportUIFlatten();
  public String com.lynx.tasm.behavior.Behavior.getName();
  public String com.lynx.tasm.behavior.Behavior.toString();
}

public interface com::lynx::tasm::behavior::BehaviorBundle {
  public List< Behavior > com.lynx.tasm.behavior.BehaviorBundle.create();
}

public interface com::lynx::tasm::BehaviorClassWarmer {
  public void com.lynx.tasm.BehaviorClassWarmer.warmClass();
}

public class com::lynx::tasm::behavior::BehaviorRegistry :  {
  public com.lynx.tasm.behavior.BehaviorRegistry.BehaviorRegistry();
  public com.lynx.tasm.behavior.BehaviorRegistry.BehaviorRegistry(Map< String, Behavior > behaviorMap);
  public com.lynx.tasm.behavior.BehaviorRegistry.BehaviorRegistry(List< Behavior > behaviorList);
  public void com.lynx.tasm.behavior.BehaviorRegistry.add(List< Behavior > behaviorList);
  public void com.lynx.tasm.behavior.BehaviorRegistry.addBehaviors(List< Behavior > behaviorList);
  public void com.lynx.tasm.behavior.BehaviorRegistry.addBehavior(Behavior behavior);
  public void com.lynx.tasm.behavior.BehaviorRegistry.setBuiltInBehaviors(Map< String, Behavior > behaviors);
  public Behavior com.lynx.tasm.behavior.BehaviorRegistry.get(String className);
  public Set< String > com.lynx.tasm.behavior.BehaviorRegistry.getAllBehaviorRegistryName();
}

public interface com::lynx::tasm::image::model::BitmapPostProcessor {
  public void com.lynx.tasm.image.model.BitmapPostProcessor.process(Bitmap sourceBitmap, Bitmap dstBitmap);
  public String com.lynx.tasm.image.model.BitmapPostProcessor.getName();
  public String com.lynx.tasm.image.model.BitmapPostProcessor.getPostprocessorCacheKey();
}

public class com::lynx::tasm::utils::BitmapUtils :  {
  public static String com.lynx.tasm.utils.BitmapUtils.bitmapToBase64WithQuality(Bitmap bitmap, int quality);
  public static String com.lynx.tasm.utils.BitmapUtils.bitmapToBase64(Bitmap bitmap, Bitmap.CompressFormat format, int quality, int flags);
}

public class com::lynx::tasm::utils::BlurUtils :  {
  public static boolean com.lynx.tasm.utils.BlurUtils.createEffect(View v, float radius);
  public static boolean com.lynx.tasm.utils.BlurUtils.createEffect(RenderNode node, float radius);
  public static boolean com.lynx.tasm.utils.BlurUtils.removeEffect(View v);
  public static Bitmap com.lynx.tasm.utils.BlurUtils.blur(Context context, Bitmap bitmap, int width, int height, float radius, int sampling);
  public static void com.lynx.tasm.utils.BlurUtils.iterativeBoxBlur(Bitmap bitmap, int blurRadius);
}

public class com::lynx::tasm::behavior::ui::utils::BorderRadius :  {
  public void com.lynx.tasm.behavior.ui.utils.BorderRadius.clearCache();
  public boolean com.lynx.tasm.behavior.ui.utils.BorderRadius.updateSize(final float width, final float height);
  public boolean com.lynx.tasm.behavior.ui.utils.BorderRadius.hasArray();
  public float[] com.lynx.tasm.behavior.ui.utils.BorderRadius.getArray();
  public boolean com.lynx.tasm.behavior.ui.utils.BorderRadius.hasRoundedBorders();
  public boolean com.lynx.tasm.behavior.ui.utils.BorderRadius.setCorner(int index, Corner corner);
}

public enum com::lynx::tasm::behavior::ui::utils::BackgroundDrawable::BorderRadiusLocation {
  public com.lynx.tasm.behavior.ui.utils.BackgroundDrawable.BorderRadiusLocation.TOP_LEFT TOP_LEFT;
  public com.lynx.tasm.behavior.ui.utils.BackgroundDrawable.BorderRadiusLocation.TOP_RIGHT TOP_RIGHT;
  public com.lynx.tasm.behavior.ui.utils.BackgroundDrawable.BorderRadiusLocation.BOTTOM_RIGHT BOTTOM_RIGHT;
  public com.lynx.tasm.behavior.ui.utils.BackgroundDrawable.BorderRadiusLocation.BOTTOM_LEFT BOTTOM_LEFT;
  public com.lynx.tasm.behavior.ui.utils.BackgroundDrawable.BorderRadiusLocation.TOP_START TOP_START;
  public com.lynx.tasm.behavior.ui.utils.BackgroundDrawable.BorderRadiusLocation.TOP_END TOP_END;
  public com.lynx.tasm.behavior.ui.utils.BackgroundDrawable.BorderRadiusLocation.BOTTOM_START BOTTOM_START;
  public com.lynx.tasm.behavior.ui.utils.BackgroundDrawable.BorderRadiusLocation.BOTTOM_END BOTTOM_END;
}

public enum com::lynx::tasm::behavior::ui::utils::BorderStyle {
  public com.lynx.tasm.behavior.ui.utils.BorderStyle.SOLID SOLID;
  public com.lynx.tasm.behavior.ui.utils.BorderStyle.DASHED DASHED;
  public com.lynx.tasm.behavior.ui.utils.BorderStyle.DOTTED DOTTED;
  public com.lynx.tasm.behavior.ui.utils.BorderStyle.DOUBLE DOUBLE;
  public com.lynx.tasm.behavior.ui.utils.BorderStyle.GROOVE GROOVE;
  public com.lynx.tasm.behavior.ui.utils.BorderStyle.RIDGE RIDGE;
  public com.lynx.tasm.behavior.ui.utils.BorderStyle.INSET INSET;
  public com.lynx.tasm.behavior.ui.utils.BorderStyle.OUTSET OUTSET;
  public com.lynx.tasm.behavior.ui.utils.BorderStyle.HIDDEN HIDDEN;
  public com.lynx.tasm.behavior.ui.utils.BorderStyle.NONE NONE;
  public PathEffect com.lynx.tasm.behavior.ui.utils.BorderStyle.getPathEffect(float borderWidth);
  public PathEffect com.lynx.tasm.behavior.ui.utils.BorderStyle.getPathEffectAutoAdjust(float borderWidth, float borderLength);
  public boolean com.lynx.tasm.behavior.ui.utils.BorderStyle.isSolidDashedOrDotted();
  public void com.lynx.tasm.behavior.ui.utils.BorderStyle.strokeBorderLine(Canvas canvas, Paint paint, int borderPosition, float borderWidth, int color, float startX, float startY, float stopX, float stopY, float borderLength, float borderMeasureWidth);
  public static BorderStyle com.lynx.tasm.behavior.ui.utils.BorderStyle.parse(int style);
}

public interface com::lynx::tasm::behavior::ui::utils::BorderWidth {
  public int com.lynx.tasm.behavior.ui.utils.BorderWidth.THIN THIN;
  public int com.lynx.tasm.behavior.ui.utils.BorderWidth.MEDIUM MEDIUM;
  public int com.lynx.tasm.behavior.ui.utils.BorderWidth.THICK THICK;
}

public class com::lynx::tasm::behavior::ui::scroll::BounceGestureHelper :  {
  public com.lynx.tasm.behavior.ui.scroll.BounceGestureHelper.BounceGestureHelper(View view, boolean isVertical, NestedScrollingParentHelper parentHelper);
  public void com.lynx.tasm.behavior.ui.scroll.BounceGestureHelper.setBounceScrollRange(int bounceScrollRange);
  public void com.lynx.tasm.behavior.ui.scroll.BounceGestureHelper.setScrollRange(int scrollRange);
  public boolean com.lynx.tasm.behavior.ui.scroll.BounceGestureHelper.onInterceptTouchEvent(MotionEvent ev);
  public boolean com.lynx.tasm.behavior.ui.scroll.BounceGestureHelper.onTouchEvent(MotionEvent ev);
  public boolean com.lynx.tasm.behavior.ui.scroll.BounceGestureHelper.onStartNestedScroll(View child, View target, int nestedScrollAxes, int type);
  public void com.lynx.tasm.behavior.ui.scroll.BounceGestureHelper.onNestedScrollAccepted(View child, View target, int nestedScrollAxes, int type);
  public void com.lynx.tasm.behavior.ui.scroll.BounceGestureHelper.onStopNestedScroll(View target, int type);
  public void com.lynx.tasm.behavior.ui.scroll.BounceGestureHelper.onNestedPreScroll(View target, int dx, int dy, int[] consumed, int type);
  public void com.lynx.tasm.behavior.ui.scroll.BounceGestureHelper.onNestedScroll(View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int type);
  public boolean com.lynx.tasm.behavior.ui.scroll.BounceGestureHelper.onNestedFling(View target, float velocityX, float velocityY, boolean consumed);
  public boolean com.lynx.tasm.behavior.ui.scroll.BounceGestureHelper.onNestedPreFling(View target, float velocityX, float velocityY);
  public void com.lynx.tasm.behavior.ui.scroll.BounceGestureHelper.checkNestedStateByDeadLine();
  public int com.lynx.tasm.behavior.ui.scroll.BounceGestureHelper.getScrollRange();
  public int com.lynx.tasm.behavior.ui.scroll.BounceGestureHelper.getBounceScrollRange();
}

public enum com::lynx::tasm::behavior::BoxModelOffset {
  public com.lynx.tasm.behavior.BoxModelOffset.PAD_LEFT PAD_LEFT;
  public com.lynx.tasm.behavior.BoxModelOffset.PAD_TOP PAD_TOP;
  public com.lynx.tasm.behavior.BoxModelOffset.PAD_RIGHT PAD_RIGHT;
  public com.lynx.tasm.behavior.BoxModelOffset.PAD_BOTTOM PAD_BOTTOM;
  public com.lynx.tasm.behavior.BoxModelOffset.BORDER_LEFT BORDER_LEFT;
  public com.lynx.tasm.behavior.BoxModelOffset.BORDER_TOP BORDER_TOP;
  public com.lynx.tasm.behavior.BoxModelOffset.BORDER_RIGHT BORDER_RIGHT;
  public com.lynx.tasm.behavior.BoxModelOffset.BORDER_BOTTOM BORDER_BOTTOM;
  public com.lynx.tasm.behavior.BoxModelOffset.MARGIN_LEFT MARGIN_LEFT;
  public com.lynx.tasm.behavior.BoxModelOffset.MARGIN_TOP MARGIN_TOP;
  public com.lynx.tasm.behavior.BoxModelOffset.MARGIN_RIGHT MARGIN_RIGHT;
  public com.lynx.tasm.behavior.BoxModelOffset.MARGIN_BOTTOM MARGIN_BOTTOM;
  public com.lynx.tasm.behavior.BoxModelOffset.LAYOUT_LEFT LAYOUT_LEFT;
  public com.lynx.tasm.behavior.BoxModelOffset.LAYOUT_TOP LAYOUT_TOP;
  public com.lynx.tasm.behavior.BoxModelOffset.LAYOUT_RIGHT LAYOUT_RIGHT;
  public com.lynx.tasm.behavior.BoxModelOffset.LAYOUT_BOTTOM LAYOUT_BOTTOM;
}

public class com::lynx::tasm::LynxConfigInfo::Builder :  {
  public com.lynx.tasm.LynxConfigInfo.Builder.Builder();
  public LynxConfigInfo com.lynx.tasm.LynxConfigInfo.Builder.buildLynxConfigInfo();
  public Builder com.lynx.tasm.LynxConfigInfo.Builder.setPageVersion(String pageVersion);
  public Builder com.lynx.tasm.LynxConfigInfo.Builder.setPageType(String pageType);
  public Builder com.lynx.tasm.LynxConfigInfo.Builder.setCliVersion(String cliVersion);
  public Builder com.lynx.tasm.LynxConfigInfo.Builder.setCustomData(String customData);
  public Builder com.lynx.tasm.LynxConfigInfo.Builder.setTemplateUrl(String templateUrl);
  public Builder com.lynx.tasm.LynxConfigInfo.Builder.setTargetSdkVersion(String targetSdkVersion);
  public Builder com.lynx.tasm.LynxConfigInfo.Builder.setLepusVersion(String lepusVersion);
  public Builder com.lynx.tasm.LynxConfigInfo.Builder.setThreadStrategyForRendering(ThreadStrategyForRendering threadStrategyForRendering);
  public Builder com.lynx.tasm.LynxConfigInfo.Builder.setEnableLepusNG(boolean enableLepusNG);
  public Builder com.lynx.tasm.LynxConfigInfo.Builder.setRadonMode(String radonMode);
  public Builder com.lynx.tasm.LynxConfigInfo.Builder.setReactVersion(String reactVersion);
  public Builder com.lynx.tasm.LynxConfigInfo.Builder.setRegisteredComponent(Set< String > registeredComponent);
  public Builder com.lynx.tasm.LynxConfigInfo.Builder.setCssAlignWithLegacyW3c(boolean cssAlignWithLegacyW3c);
  public Builder com.lynx.tasm.LynxConfigInfo.Builder.setEnableCSSParser(boolean enable);
}

public class com::lynx::tasm::LynxLoadMeta::Builder :  {
  public void com.lynx.tasm.LynxLoadMeta.Builder.setUrl(String url);
  public void com.lynx.tasm.LynxLoadMeta.Builder.setBinaryData(byte[] binaryData);
  public void com.lynx.tasm.LynxLoadMeta.Builder.setTemplateBundle(TemplateBundle bundle);
  public void com.lynx.tasm.LynxLoadMeta.Builder.setInitialData(TemplateData initialData);
  public void com.lynx.tasm.LynxLoadMeta.Builder.setGlobalProps(TemplateData globalProps);
  public void com.lynx.tasm.LynxLoadMeta.Builder.setLoadMode(LynxLoadMode loadMode);
  public void com.lynx.tasm.LynxLoadMeta.Builder.addLoadOption(LynxLoadOption loadOption);
  public void com.lynx.tasm.LynxLoadMeta.Builder.setLynxViewConfig(Map< String, String > lynxViewConfig);
  public LynxLoadMeta com.lynx.tasm.LynxLoadMeta.Builder.build();
}

public class com::lynx::tasm::LynxUpdateMeta::Builder :  {
  public Builder com.lynx.tasm.LynxUpdateMeta.Builder.setUpdatedData(TemplateData updatedData);
  public Builder com.lynx.tasm.LynxUpdateMeta.Builder.setUpdatedGlobalProps(TemplateData updatedGlobalProps);
  public LynxUpdateMeta com.lynx.tasm.LynxUpdateMeta.Builder.build();
}

public class com::lynx::tasm::service::LynxImageInfo::Builder :  {
  public Builder com.lynx.tasm.service.LynxImageInfo.Builder.startTimeStamp(long startTimeStamp);
  public Builder com.lynx.tasm.service.LynxImageInfo.Builder.finishTimeStamp(long finishTimeStamp);
  public Builder com.lynx.tasm.service.LynxImageInfo.Builder.isSuccess(boolean isSuccess);
  public Builder com.lynx.tasm.service.LynxImageInfo.Builder.url(String url);
  public Builder com.lynx.tasm.service.LynxImageInfo.Builder.memoryCost(int memoryCost);
  public Builder com.lynx.tasm.service.LynxImageInfo.Builder.errorCode(int errorCode);
  public Builder com.lynx.tasm.service.LynxImageInfo.Builder.lynxView(LynxView lynxView);
  public Builder com.lynx.tasm.service.LynxImageInfo.Builder.hitMemoryCache(boolean hitMemoryCache);
  public LynxImageInfo com.lynx.tasm.service.LynxImageInfo.Builder.build();
}

public class com::lynx::tasm::service::LynxMemoryInfo::Builder :  {
  public Builder com.lynx.tasm.service.LynxMemoryInfo.Builder.fetchDuration(long fetchDuration);
  public Builder com.lynx.tasm.service.LynxMemoryInfo.Builder.finishTimeStamp(long finishTimeStamp);
  public Builder com.lynx.tasm.service.LynxMemoryInfo.Builder.completeDuration(long completeDuration);
  public Builder com.lynx.tasm.service.LynxMemoryInfo.Builder.startTimeStamp(long startTimeStamp);
  public Builder com.lynx.tasm.service.LynxMemoryInfo.Builder.sessionId(String sessionId);
  public Builder com.lynx.tasm.service.LynxMemoryInfo.Builder.phase(String phase);
  public Builder com.lynx.tasm.service.LynxMemoryInfo.Builder.templateURL(String templateURL);
  public Builder com.lynx.tasm.service.LynxMemoryInfo.Builder.type(@LynxMemoryType String type);
  public Builder com.lynx.tasm.service.LynxMemoryInfo.Builder.memoryCost(float memoryCost);
  public Builder com.lynx.tasm.service.LynxMemoryInfo.Builder.viewWidth(long viewWidth);
  public Builder com.lynx.tasm.service.LynxMemoryInfo.Builder.viewHeight(long viewHeight);
  public Builder com.lynx.tasm.service.LynxMemoryInfo.Builder.address(String address);
  public Builder com.lynx.tasm.service.LynxMemoryInfo.Builder.parentAddress(String parentAddress);
  public Builder com.lynx.tasm.service.LynxMemoryInfo.Builder.width(long width);
  public Builder com.lynx.tasm.service.LynxMemoryInfo.Builder.height(long height);
  public Builder com.lynx.tasm.service.LynxMemoryInfo.Builder.config(String config);
  public Builder com.lynx.tasm.service.LynxMemoryInfo.Builder.resourceURL(String resourceURL);
  public Builder com.lynx.tasm.service.LynxMemoryInfo.Builder.isSuccess(int isSuccess);
  public Builder com.lynx.tasm.service.LynxMemoryInfo.Builder.isFlattenAnim(int isFlattenAnim);
  public LynxMemoryInfo com.lynx.tasm.service.LynxMemoryInfo.Builder.build();
}

public class com::lynx::tasm::TemplateBundleOption::Builder :  {
  public Builder com.lynx.tasm.TemplateBundleOption.Builder.setContextPoolSize(int size);
  public Builder com.lynx.tasm.TemplateBundleOption.Builder.setEnableContextAutoRefill(boolean enable);
  public Builder com.lynx.tasm.TemplateBundleOption.Builder.setUrl(String url);
  public TemplateBundleOption com.lynx.tasm.TemplateBundleOption.Builder.build();
}

public class com::lynx::tasm::behavior::BuiltInBehavior : com.lynx.tasm.behavior.BehaviorBundle {
  public List< Behavior > com.lynx.tasm.behavior.BuiltInBehavior.create();
}

public class com::lynx::tasm::behavior::BuiltInUIRegistry :  {
  public static BuiltInUIRegistry com.lynx.tasm.behavior.BuiltInUIRegistry.getInstance();
  public Map< String, Behavior > com.lynx.tasm.behavior.BuiltInUIRegistry.getBuiltInUIBehaviors();
}

public interface com::lynx::tasm::image::model::CacheChoice {
  public int com.lynx.tasm.image.model.CacheChoice.DISK DISK;
  public int com.lynx.tasm.image.model.CacheChoice.BITMAP BITMAP;
}

public interface com::lynx::react::bridge::Callback {
  public void com.lynx.react.bridge.Callback.invoke(Object... args);
}

public interface com::lynx::tasm::NativeFacade::Callback {
  public void com.lynx.tasm.NativeFacade.Callback.onLoaded(int templateSize);
  public void com.lynx.tasm.NativeFacade.Callback.onSSRHydrateFinished();
  public void com.lynx.tasm.NativeFacade.Callback.onRuntimeReady();
  public void com.lynx.tasm.NativeFacade.Callback.onDataUpdated();
  public void com.lynx.tasm.NativeFacade.Callback.onPageChanged(boolean isFirstScreen);
  public void com.lynx.tasm.NativeFacade.Callback.onDynamicComponentPerfReady(HashMap< String, Object > perf);
  public void com.lynx.tasm.NativeFacade.Callback.onErrorOccurred(LynxError error);
  public String com.lynx.tasm.NativeFacade.Callback.translateResourceForTheme(String resId, String themedKey);
  public void com.lynx.tasm.NativeFacade.Callback.onThemeUpdatedByJs(LynxTheme theme);
  public void com.lynx.tasm.NativeFacade.Callback.onModuleFunctionInvoked(String module, String method, int error_code);
  public void com.lynx.tasm.NativeFacade.Callback.onPageConfigDecoded(PageConfig config);
  public void com.lynx.tasm.NativeFacade.Callback.onJSBInvoked(Map< String, Object > jsbInfo);
  public void com.lynx.tasm.NativeFacade.Callback.onCallJSBFinished(Map< String, Object > timing);
  public void com.lynx.tasm.NativeFacade.Callback.onUpdateDataWithoutChange();
  public void com.lynx.tasm.NativeFacade.Callback.onTemplateBundleReady(TemplateBundle bundle);
  public void com.lynx.tasm.NativeFacade.Callback.onReceiveMessageEvent(ReadableMap event);
  public void com.lynx.tasm.NativeFacade.Callback.onTASMFinishedByNative();
  public void com.lynx.tasm.NativeFacade.Callback.onUpdateI18nResource(String key, String bytes, int status);
  public void com.lynx.tasm.NativeFacade.Callback.onUIMethodInvoked(final int cb, JavaOnlyMap res);
  public void com.lynx.tasm.NativeFacade.Callback.onClearNativePipelineTimingInfo();
  public void com.lynx.tasm.NativeFacade.Callback.onEventCapture(long targetID, boolean isCatch, long eventID);
  public void com.lynx.tasm.NativeFacade.Callback.onEventBubble(long targetID, boolean isCatch, long eventID);
  public void com.lynx.tasm.NativeFacade.Callback.onEventFire(long targetID, boolean isStop, long eventID);
}

public interface com::lynx::tasm::provider::AbsTemplateProvider::Callback {
  public void com.lynx.tasm.provider.AbsTemplateProvider.Callback.onSuccess(byte[] template);
  public void com.lynx.tasm.provider.AbsTemplateProvider.Callback.onFailed(String msg);
}

public class com::lynx::jsbridge::CallbackImpl : com.lynx.react.bridge.Callback {
  public com.lynx.jsbridge.CallbackImpl.CallbackImpl(long ptr);
  public void com.lynx.jsbridge.CallbackImpl.invoke(Object... args);
  public void com.lynx.jsbridge.CallbackImpl.invokeCallback(Object... args);
  public void com.lynx.jsbridge.CallbackImpl.resetNativePtr();
}

public interface com::lynx::tasm::base::CalledByNative {
}

public class com::lynx::tasm::utils::CallStackUtil :  {
  public static String com.lynx.tasm.utils.CallStackUtil.getMessageOfCauseChain(Throwable t);
  public static String com.lynx.tasm.utils.CallStackUtil.getStackTraceStringTrimmed(Throwable t);
  public static String com.lynx.tasm.utils.CallStackUtil.getStackTraceStringWithLineTrimmed(Throwable t);
}

public interface com::lynx::devtoolwrapper::CDPResultCallback {
  public void com.lynx.devtoolwrapper.CDPResultCallback.onResult(String result);
}

public class com::lynx::tasm::behavior::shadow::ChoreographerLayoutTick : com.lynx.tasm.behavior.shadow.LayoutTick {
  public void com.lynx.tasm.behavior.shadow.ChoreographerLayoutTick.request(final Runnable runnable);
}

public class com::lynx::tasm::base::CleanupReference : PhantomReference< Object > {
  public com.lynx.tasm.base.CleanupReference.CleanupReference(Object obj, Runnable cleanupTask, boolean cleanupOnUiThread);
  public void com.lynx.tasm.base.CleanupReference.cleanupNow();
  public boolean com.lynx.tasm.base.CleanupReference.hasCleanedUp();
}

public class com::lynx::tasm::behavior::ui::utils::ColorUtil :  {
  public static int com.lynx.tasm.behavior.ui.utils.ColorUtil.multiplyColorAlpha(int color, int alpha);
  public static int com.lynx.tasm.behavior.ui.utils.ColorUtil.getOpacityFromColor(int color);
}

public class com::lynx::tasm::utils::ColorUtils :  {
  public static int com.lynx.tasm.utils.ColorUtils.parse(String color);
  public static boolean com.lynx.tasm.utils.ColorUtils.isValid(String color);
}

public interface com::lynx::react::bridge::mapbuffer::CompactArrayBuffer {
  public int com.lynx.react.bridge.mapbuffer.CompactArrayBuffer.count();
  public int com.lynx.react.bridge.mapbuffer.CompactArrayBuffer.getInt(int index);
  public long com.lynx.react.bridge.mapbuffer.CompactArrayBuffer.getLong(int index);
  public double com.lynx.react.bridge.mapbuffer.CompactArrayBuffer.getDouble(int index);
  public String com.lynx.react.bridge.mapbuffer.CompactArrayBuffer.getString(int index);
}

public interface com::lynx::tasm::behavior::ImageInterceptor::CompletionHandler {
  public void com.lynx.tasm.behavior.ImageInterceptor.CompletionHandler.imageLoadCompletion(@Nullable Object image, @Nullable Throwable throwable);
}

public class com::lynx::tasm::behavior::ui::view::ComponentView : com.lynx.tasm.behavior.ui.view.AndroidView {
  public com.lynx.tasm.behavior.ui.view.ComponentView.ComponentView(Context context);
  public int com.lynx.tasm.behavior.ui.view.ComponentView.getPosition();
  public void com.lynx.tasm.behavior.ui.view.ComponentView.setPosition(int position);
}

public enum com::lynx::tasm::core::LynxThreadPool::ConcurrentTaskType {
  public com.lynx.tasm.core.LynxThreadPool.ConcurrentTaskType.HIGH_PRIORITY HIGH_PRIORITY;
}

public enum com::lynx::tasm::LynxSubErrorCode::Consumer {
  public com.lynx.tasm.LynxSubErrorCode.Consumer.FRONT_END FRONT_END;
  public com.lynx.tasm.LynxSubErrorCode.Consumer.CLIENT CLIENT;
  public com.lynx.tasm.LynxSubErrorCode.Consumer.LYNX LYNX;
  public final String com.lynx.tasm.LynxSubErrorCode.Consumer.value value;
  public com.lynx.tasm.LynxSubErrorCode.Consumer.Consumer(String value);
}

public class com::lynx::tasm::utils::ContextUtils :  {
  public static LynxContext com.lynx.tasm.utils.ContextUtils.toLynxContext(Context context);
  public static Activity com.lynx.tasm.utils.ContextUtils.getActivity(Context context);
  public static Window com.lynx.tasm.utils.ContextUtils.getWindow(Context context);
}

public class com::lynx::tasm::behavior::ui::utils::BorderRadius::Corner :  {
  public PlatformLength com.lynx.tasm.behavior.ui.utils.BorderRadius.Corner.x x;
  public PlatformLength com.lynx.tasm.behavior.ui.utils.BorderRadius.Corner.y y;
  public boolean com.lynx.tasm.behavior.ui.utils.BorderRadius.Corner.equals(@Nullable Object obj);
  public static Corner com.lynx.tasm.behavior.ui.utils.BorderRadius.Corner.toCorner(ReadableArray ra, int startIndex);
}

public class com::lynx::tasm::behavior::CSSPropertySetter :  {
  public static void com.lynx.tasm.behavior.CSSPropertySetter.updateStyles(LynxBaseUI lynxUI, MapBuffer initialStyles);
  public static void com.lynx.tasm.behavior.CSSPropertySetter.updateUIPaintStyle(LynxBaseUI lynxUI, UIPaintStyles uiPaintStyles);
  public static< T extends ShadowNode > void com.lynx.tasm.behavior.CSSPropertySetter.updateStyles(T node, MapBuffer initialStyles);
}

public class com::lynx::tasm::behavior::ui::accessibility::CustomAccessibilityDelegateCompat : AccessibilityDelegateCompat {
  public com.lynx.tasm.behavior.ui.accessibility.CustomAccessibilityDelegateCompat.CustomAccessibilityDelegateCompat(LynxUI ui);
  public void com.lynx.tasm.behavior.ui.accessibility.CustomAccessibilityDelegateCompat.onInitializeAccessibilityNodeInfo(View host, AccessibilityNodeInfoCompat info);
  public boolean com.lynx.tasm.behavior.ui.accessibility.CustomAccessibilityDelegateCompat.performAccessibilityAction(View host, int action, Bundle args);
}

public class com::lynx::tasm::behavior::shadow::text::CustomBaselineShiftSpan : ReplacementSpan {
  public com.lynx.tasm.behavior.shadow.text.CustomBaselineShiftSpan.CustomBaselineShiftSpan(int start, int end, int textVerticalAlign, float shift);
  public int com.lynx.tasm.behavior.shadow.text.CustomBaselineShiftSpan.getSize(@NonNull Paint paint, CharSequence text, int start, int end, @Nullable Paint.FontMetricsInt fm);
  public void com.lynx.tasm.behavior.shadow.text.CustomBaselineShiftSpan.draw(@NonNull Canvas canvas, CharSequence text, int start, int end, float x, int top, int y, int bottom, @NonNull Paint paint);
}

public class com::lynx::devtoolwrapper::CustomizedMessage :  {
  public com.lynx.devtoolwrapper.CustomizedMessage.CustomizedMessage(String type, String data);
  public com.lynx.devtoolwrapper.CustomizedMessage.CustomizedMessage(String type, String data, int mark);
  public String com.lynx.devtoolwrapper.CustomizedMessage.getType();
  public void com.lynx.devtoolwrapper.CustomizedMessage.setType(String type);
  public String com.lynx.devtoolwrapper.CustomizedMessage.getData();
  public void com.lynx.devtoolwrapper.CustomizedMessage.setData(String data);
  public int com.lynx.devtoolwrapper.CustomizedMessage.getMark();
  public void com.lynx.devtoolwrapper.CustomizedMessage.setMark(int mark);
}

public class com::lynx::tasm::behavior::shadow::CustomLayoutShadowNode : com.lynx.tasm.behavior.shadow.ShadowNode {
  public boolean com.lynx.tasm.behavior.shadow.CustomLayoutShadowNode.mCustomLayout mCustomLayout;
  public boolean com.lynx.tasm.behavior.shadow.CustomLayoutShadowNode.supportInlineView();
  public void com.lynx.tasm.behavior.shadow.CustomLayoutShadowNode.setCustomLayout(boolean customLayout);
  public MeasureResult com.lynx.tasm.behavior.shadow.CustomLayoutShadowNode.measureNativeNode(MeasureContext context, MeasureParam param);
  public void com.lynx.tasm.behavior.shadow.CustomLayoutShadowNode.alignNativeNode(AlignContext context, AlignParam param);
}

public class com::lynx::tasm::behavior::shadow::text::CustomLetterSpacingSpan : MetricAffectingSpan {
  public com.lynx.tasm.behavior.shadow.text.CustomLetterSpacingSpan.CustomLetterSpacingSpan(float letterSpacing);
  public void com.lynx.tasm.behavior.shadow.text.CustomLetterSpacingSpan.updateDrawState(TextPaint paint);
  public void com.lynx.tasm.behavior.shadow.text.CustomLetterSpacingSpan.updateMeasureState(TextPaint paint);
}

public class com::lynx::tasm::behavior::shadow::text::CustomLineHeightSpan : LineHeightSpan.WithDensity {
  public com.lynx.tasm.behavior.shadow.text.CustomLineHeightSpan.CustomLineHeightSpan(float height, boolean enableTextRefactor, int textSingleLineVerticalAlign, boolean isSingLineAndOverflowClip);
  public boolean com.lynx.tasm.behavior.shadow.text.CustomLineHeightSpan.equals(Object o);
  public int com.lynx.tasm.behavior.shadow.text.CustomLineHeightSpan.hashCode();
  public void com.lynx.tasm.behavior.shadow.text.CustomLineHeightSpan.chooseHeight(CharSequence text, int start, int end, int spanstartv, int lineHeight, Paint.FontMetricsInt fm, TextPaint paint);
  public void com.lynx.tasm.behavior.shadow.text.CustomLineHeightSpan.chooseHeight(CharSequence text, int start, int end, int spanstartv, int lineHeight, Paint.FontMetricsInt fm);
}

public interface com::lynx::tasm::behavior::shadow::CustomMeasureFunc {
  public MeasureResult com.lynx.tasm.behavior.shadow.CustomMeasureFunc.measure(MeasureParam param, MeasureContext context);
  public void com.lynx.tasm.behavior.shadow.CustomMeasureFunc.align(AlignParam param, AlignContext context);
}

public class abstract com::lynx::tasm::behavior::ui::list::container::NestedScrollContainerView::CustomScrollHook :  {
  public void com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.CustomScrollHook.onSmoothScrollStart(int lastScrollX, int lastScrollY, int scrollX, int scrollY);
  public void com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.CustomScrollHook.onSmoothScrollEnd();
  public void com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.CustomScrollHook.onSmoothScroll(int scrollX, int scrollY, @NonNull final int[] targetScrollOffset);
}

public class com::lynx::tasm::behavior::shadow::text::CustomStyleSpan : MetricAffectingSpan {
  public com.lynx.tasm.behavior.shadow.text.CustomStyleSpan.CustomStyleSpan(int style, int weight, String fontFamily);
  public void com.lynx.tasm.behavior.shadow.text.CustomStyleSpan.updateMeasureState(@NonNull TextPaint textPaint);
  public void com.lynx.tasm.behavior.shadow.text.CustomStyleSpan.updateDrawState(TextPaint tp);
  public boolean com.lynx.tasm.behavior.shadow.text.CustomStyleSpan.equals(Object o);
  public int com.lynx.tasm.behavior.shadow.text.CustomStyleSpan.hashCode();
  public int com.lynx.tasm.behavior.shadow.text.CustomStyleSpan.getStyle();
}

public enum com::lynx::react::bridge::mapbuffer::MapBuffer::DataType {
  public com.lynx.react.bridge.mapbuffer.MapBuffer.DataType.NULL NULL;
  public com.lynx.react.bridge.mapbuffer.MapBuffer.DataType.BOOL BOOL;
  public com.lynx.react.bridge.mapbuffer.MapBuffer.DataType.INT INT;
  public com.lynx.react.bridge.mapbuffer.MapBuffer.DataType.LONG LONG;
  public com.lynx.react.bridge.mapbuffer.MapBuffer.DataType.DOUBLE DOUBLE;
  public com.lynx.react.bridge.mapbuffer.MapBuffer.DataType.STRING STRING;
  public com.lynx.react.bridge.mapbuffer.MapBuffer.DataType.ARRAY ARRAY;
}

public enum com::lynx::react::bridge::PiperData::DataType {
  public com.lynx.react.bridge.PiperData.DataType.Empty Empty;
  public com.lynx.react.bridge.PiperData.DataType.String String;
  public com.lynx.react.bridge.PiperData.DataType.Map Map;
}

public class com::lynx::tasm::gesture::handler::DefaultGestureHandler : com.lynx.tasm.gesture.handler.BaseGestureHandler {
  public com.lynx.tasm.gesture.handler.DefaultGestureHandler.DefaultGestureHandler(int sign, LynxContext lynxContext, @NonNull GestureDetector gestureDetector, GestureArenaMember gestureArenaMember);
  public void com.lynx.tasm.gesture.handler.DefaultGestureHandler.fail();
  public void com.lynx.tasm.gesture.handler.DefaultGestureHandler.activate();
  public void com.lynx.tasm.gesture.handler.DefaultGestureHandler.end();
  public void com.lynx.tasm.gesture.handler.DefaultGestureHandler.reset();
}

public class com::lynx::tasm::utils::DeviceUtils :  {
  public final int com.lynx.tasm.utils.DeviceUtils.DEFAULT_DEVICE_REFRESH_RATE DEFAULT_DEVICE_REFRESH_RATE;
  public static synchronized boolean com.lynx.tasm.utils.DeviceUtils.isMiui();
  public static synchronized Typeface com.lynx.tasm.utils.DeviceUtils.getDefaultTypeface();
  public static boolean com.lynx.tasm.utils.DeviceUtils.isHuaWei();
  public static boolean com.lynx.tasm.utils.DeviceUtils.isMeizu();
  public static boolean com.lynx.tasm.utils.DeviceUtils.isMeizu15();
  public static boolean com.lynx.tasm.utils.DeviceUtils.is64BitDevice();
  public static float com.lynx.tasm.utils.DeviceUtils.getRefreshRate(LynxContext context);
  public static float com.lynx.tasm.utils.DeviceUtils.getRefreshRate(Context context);
}

public class com::lynx::devtoolwrapper::DevToolOverlayDelegate :  {
  public static DevToolOverlayDelegate com.lynx.devtoolwrapper.DevToolOverlayDelegate.getInstance();
  public ArrayList< Dialog > com.lynx.devtoolwrapper.DevToolOverlayDelegate.getGlobalOverlayNGView();
  public ArrayList< Integer > com.lynx.devtoolwrapper.DevToolOverlayDelegate.getAllVisibleOverlaySign();
  public void com.lynx.devtoolwrapper.DevToolOverlayDelegate.init(OverlayService service);
}

public interface com::lynx::tasm::image::model::DiskCacheChoice {
  public int com.lynx.tasm.image.model.DiskCacheChoice.DEFAULT_DISK DEFAULT_DISK;
  public int com.lynx.tasm.image.model.DiskCacheChoice.SMALL_DISK SMALL_DISK;
  public int com.lynx.tasm.image.model.DiskCacheChoice.CUSTOM_DISK CUSTOM_DISK;
}

public class com::lynx::tasm::utils::DisplayMetricsHolder :  {
  public final int com.lynx.tasm.utils.DisplayMetricsHolder.UNDEFINE_SCREEN_SIZE_VALUE UNDEFINE_SCREEN_SIZE_VALUE;
  public final float com.lynx.tasm.utils.DisplayMetricsHolder.DEFAULT_SCREEN_SCALE DEFAULT_SCREEN_SCALE;
  public static boolean com.lynx.tasm.utils.DisplayMetricsHolder.updateOrInitDisplayMetrics(Context context);
  public static void com.lynx.tasm.utils.DisplayMetricsHolder.updateDisplayMetrics(int width, int height);
  public static boolean com.lynx.tasm.utils.DisplayMetricsHolder.updateOrInitDisplayMetrics(Context context, Float densityOverride);
  public static DisplayMetrics com.lynx.tasm.utils.DisplayMetricsHolder.getRealScreenDisplayMetrics(Context context);
  public static DisplayMetrics com.lynx.tasm.utils.DisplayMetricsHolder.getWindowDisplayMetrics();
  public static DisplayMetrics com.lynx.tasm.utils.DisplayMetricsHolder.getScreenDisplayMetrics();
}

public interface com::lynx::react::bridge::Dynamic {
  public boolean com.lynx.react.bridge.Dynamic.isNull();
  public boolean com.lynx.react.bridge.Dynamic.asBoolean();
  public double com.lynx.react.bridge.Dynamic.asDouble();
  public int com.lynx.react.bridge.Dynamic.asInt();
  public long com.lynx.react.bridge.Dynamic.asLong();
  public String com.lynx.react.bridge.Dynamic.asString();
  public ReadableArray com.lynx.react.bridge.Dynamic.asArray();
  public ReadableMap com.lynx.react.bridge.Dynamic.asMap();
  public byte[] com.lynx.react.bridge.Dynamic.asByteArray();
  public ReadableType com.lynx.react.bridge.Dynamic.getType();
  public void com.lynx.react.bridge.Dynamic.recycle();
}

public interface com::lynx::tasm::component::DynamicComponentFetcher {
  public void com.lynx.tasm.component.DynamicComponentFetcher.loadDynamicComponent(String url, LoadedHandler handler);
}

public class com::lynx::react::bridge::DynamicFromArray : com.lynx.react.bridge.Dynamic {
  public com.lynx.react.bridge.DynamicFromArray.DynamicFromArray(ReadableArray array, int index);
  public void com.lynx.react.bridge.DynamicFromArray.recycle();
  public boolean com.lynx.react.bridge.DynamicFromArray.isNull();
  public boolean com.lynx.react.bridge.DynamicFromArray.asBoolean();
  public double com.lynx.react.bridge.DynamicFromArray.asDouble();
  public int com.lynx.react.bridge.DynamicFromArray.asInt();
  public long com.lynx.react.bridge.DynamicFromArray.asLong();
  public String com.lynx.react.bridge.DynamicFromArray.asString();
  public ReadableArray com.lynx.react.bridge.DynamicFromArray.asArray();
  public ReadableMap com.lynx.react.bridge.DynamicFromArray.asMap();
  public byte[] com.lynx.react.bridge.DynamicFromArray.asByteArray();
  public ReadableType com.lynx.react.bridge.DynamicFromArray.getType();
  public static DynamicFromArray com.lynx.react.bridge.DynamicFromArray.create(ReadableArray array, int index);
}

public class com::lynx::react::bridge::DynamicFromMap : com.lynx.react.bridge.Dynamic {
  public com.lynx.react.bridge.DynamicFromMap.DynamicFromMap(ReadableMap map, String name);
  public void com.lynx.react.bridge.DynamicFromMap.recycle();
  public boolean com.lynx.react.bridge.DynamicFromMap.isNull();
  public boolean com.lynx.react.bridge.DynamicFromMap.asBoolean();
  public double com.lynx.react.bridge.DynamicFromMap.asDouble();
  public int com.lynx.react.bridge.DynamicFromMap.asInt();
  public long com.lynx.react.bridge.DynamicFromMap.asLong();
  public String com.lynx.react.bridge.DynamicFromMap.asString();
  public ReadableArray com.lynx.react.bridge.DynamicFromMap.asArray();
  public ReadableMap com.lynx.react.bridge.DynamicFromMap.asMap();
  public byte[] com.lynx.react.bridge.DynamicFromMap.asByteArray();
  public ReadableType com.lynx.react.bridge.DynamicFromMap.getType();
  public static DynamicFromMap com.lynx.react.bridge.DynamicFromMap.create(ReadableMap map, String name);
}

public class com::lynx::react::bridge::mapbuffer::DynamicFromMapBuffer : com.lynx.react.bridge.Dynamic {
  public com.lynx.react.bridge.mapbuffer.DynamicFromMapBuffer.DynamicFromMapBuffer(ReadableMapBufferWrapper map, int key);
  public boolean com.lynx.react.bridge.mapbuffer.DynamicFromMapBuffer.isNull();
  public boolean com.lynx.react.bridge.mapbuffer.DynamicFromMapBuffer.asBoolean();
  public double com.lynx.react.bridge.mapbuffer.DynamicFromMapBuffer.asDouble();
  public int com.lynx.react.bridge.mapbuffer.DynamicFromMapBuffer.asInt();
  public long com.lynx.react.bridge.mapbuffer.DynamicFromMapBuffer.asLong();
  public String com.lynx.react.bridge.mapbuffer.DynamicFromMapBuffer.asString();
  public ReadableArray com.lynx.react.bridge.mapbuffer.DynamicFromMapBuffer.asArray();
  public ReadableMap com.lynx.react.bridge.mapbuffer.DynamicFromMapBuffer.asMap();
  public byte[] com.lynx.react.bridge.mapbuffer.DynamicFromMapBuffer.asByteArray();
  public ReadableType com.lynx.react.bridge.mapbuffer.DynamicFromMapBuffer.getType();
  public void com.lynx.react.bridge.mapbuffer.DynamicFromMapBuffer.recycle();
}

public class com::lynx::tasm::EmbeddedMode :  {
  public final int com.lynx.tasm.EmbeddedMode.UNSET UNSET;
  public final int com.lynx.tasm.EmbeddedMode.EMBEDDED_MODE_BASE EMBEDDED_MODE_BASE;
  public final int com.lynx.tasm.EmbeddedMode.ENGINE_POOL ENGINE_POOL;
  public final int com.lynx.tasm.EmbeddedMode.LAYOUT_IN_ELEMENT LAYOUT_IN_ELEMENT;
  public final int com.lynx.tasm.EmbeddedMode.EMBEDDED_MODE_ALL EMBEDDED_MODE_ALL;
  public static boolean com.lynx.tasm.EmbeddedMode.isEnginePoolEnable(@EmbeddedMode.Mode int mode);
  public static boolean com.lynx.tasm.EmbeddedMode.isBaseModeEnable(@EmbeddedMode.Mode int mode);
}

public enum com::lynx::tasm::behavior::event::EventTarget::EnableStatus {
  public com.lynx.tasm.behavior.event.EventTarget.EnableStatus.Enable Enable;
  public com.lynx.tasm.behavior.event.EventTarget.EnableStatus.Disable Disable;
  public com.lynx.tasm.behavior.event.EventTarget.EnableStatus.Undefined Undefined;
}

public interface com::lynx::react::bridge::mapbuffer::CompactArrayBuffer::Entry {
  public int com.lynx.react.bridge.mapbuffer.CompactArrayBuffer.Entry.getInt();
  public double com.lynx.react.bridge.mapbuffer.CompactArrayBuffer.Entry.getDouble();
  public long com.lynx.react.bridge.mapbuffer.CompactArrayBuffer.Entry.getLong();
  public String com.lynx.react.bridge.mapbuffer.CompactArrayBuffer.Entry.getString();
}

public interface com::lynx::react::bridge::mapbuffer::MapBuffer::Entry {
  public int com.lynx.react.bridge.mapbuffer.MapBuffer.Entry.getKey();
  public DataType com.lynx.react.bridge.mapbuffer.MapBuffer.Entry.getType();
  public boolean com.lynx.react.bridge.mapbuffer.MapBuffer.Entry.getBoolean();
  public long com.lynx.react.bridge.mapbuffer.MapBuffer.Entry.getLong();
  public double com.lynx.react.bridge.mapbuffer.MapBuffer.Entry.getDouble();
  public MapBuffer com.lynx.react.bridge.mapbuffer.MapBuffer.Entry.getMapBuffer();
}

public class com::lynx::tasm::utils::EnvUtils :  {
  public static String com.lynx.tasm.utils.EnvUtils.getCacheDir();
}

public enum com::lynx::tasm::event::LynxEventDetail::EVENT_TYPE {
  public com.lynx.tasm.event.LynxEventDetail.EVENT_TYPE.TOUCH_EVENT TOUCH_EVENT;
  public com.lynx.tasm.event.LynxEventDetail.EVENT_TYPE.CUSTOM_EVENT CUSTOM_EVENT;
}

public class abstract com::lynx::tasm::EventEmitter :  {
  public com.lynx.tasm.EventEmitter.EventEmitter();
  public abstract void com.lynx.tasm.EventEmitter.sendTouchEvent(LynxTouchEvent event);
  public abstract boolean com.lynx.tasm.EventEmitter.onLynxEvent(LynxEvent event);
  public abstract void com.lynx.tasm.EventEmitter.sendMultiTouchEvent(LynxTouchEvent event);
  public abstract void com.lynx.tasm.EventEmitter.sendCustomEvent(LynxCustomEvent event);
  public abstract void com.lynx.tasm.EventEmitter.sendGestureEvent(int gestureId, LynxCustomEvent event);
  public abstract void com.lynx.tasm.EventEmitter.onPseudoStatusChanged(int sign, int preStatus, int currentStatus);
  public abstract void com.lynx.tasm.EventEmitter.setTestTapTracker(ITestTapTrack track);
  public abstract void com.lynx.tasm.EventEmitter.sendLayoutEvent();
  public abstract void com.lynx.tasm.EventEmitter.setInPreLoad(boolean preload);
  public abstract void com.lynx.tasm.EventEmitter.addObserver(LynxEventObserver observer);
  public abstract void com.lynx.tasm.EventEmitter.removeObserver(LynxEventObserver observer);
  public abstract void com.lynx.tasm.EventEmitter.registerEventReporter(LynxEventReporter reporter);
  public void com.lynx.tasm.EventEmitter.onInternalEvent(LynxInternalEvent event);
  public void com.lynx.tasm.EventEmitter.sendInternalEvent(LynxInternalEvent event);
  public void com.lynx.tasm.EventEmitter.startEventGenerate(LynxEvent event);
  public void com.lynx.tasm.EventEmitter.setEventID(long eventID);
  public void com.lynx.tasm.EventEmitter.startEventCapture(long eventID);
  public void com.lynx.tasm.EventEmitter.startEventBubble(long eventID);
  public void com.lynx.tasm.EventEmitter.startEventFire(boolean isStop, long eventID);
}

public class com::lynx::tasm::event::EventsListener :  {
  public String com.lynx.tasm.event.EventsListener.name name;
  public String com.lynx.tasm.event.EventsListener.type type;
  public String com.lynx.tasm.event.EventsListener.functionName functionName;
  public String com.lynx.tasm.event.EventsListener.lepusType lepusType;
  public String com.lynx.tasm.event.EventsListener.lepusFunctionName lepusFunctionName;
  public com.lynx.tasm.event.EventsListener.EventsListener(String name, String type, String functionName, String lepusType, String lepusFunctionName);
  public static Map< String, EventsListener > com.lynx.tasm.event.EventsListener.convertEventListeners(ReadableArray events);
}

public interface com::lynx::tasm::behavior::event::EventTarget {
  public int com.lynx.tasm.behavior.event.EventTarget.getSign();
  public int com.lynx.tasm.behavior.event.EventTarget.getPseudoStatus();
  public int com.lynx.tasm.behavior.event.EventTarget.getGestureArenaMemberId();
  public EventTarget com.lynx.tasm.behavior.event.EventTarget.parent();
  public EventTarget com.lynx.tasm.behavior.event.EventTarget.hitTest(float x, float y);
  public EventTarget com.lynx.tasm.behavior.event.EventTarget.hitTest(float x, float y, boolean ignoreUserInteraction);
  public boolean com.lynx.tasm.behavior.event.EventTarget.containsPoint(float x, float y);
  public boolean com.lynx.tasm.behavior.event.EventTarget.containsPoint(float x, float y, boolean ignoreUserInteraction);
  public Map< String, EventsListener > com.lynx.tasm.behavior.event.EventTarget.getEvents();
  public Map< Integer, GestureDetector > com.lynx.tasm.behavior.event.EventTarget.getGestureDetectorMap();
  public Matrix com.lynx.tasm.behavior.event.EventTarget.getTransformMatrix();
  public boolean com.lynx.tasm.behavior.event.EventTarget.isUserInteractionEnabled();
  public boolean com.lynx.tasm.behavior.event.EventTarget.ignoreFocus();
  public boolean com.lynx.tasm.behavior.event.EventTarget.isFocusable();
  public boolean com.lynx.tasm.behavior.event.EventTarget.isScrollable();
  public boolean com.lynx.tasm.behavior.event.EventTarget.isClickable();
  public boolean com.lynx.tasm.behavior.event.EventTarget.isLongClickable();
  public boolean com.lynx.tasm.behavior.event.EventTarget.enableTouchPseudoPropagation();
  public void com.lynx.tasm.behavior.event.EventTarget.onPseudoStatusChanged(int preStatus, int currentStatus);
  public void com.lynx.tasm.behavior.event.EventTarget.onFocusChanged(boolean hasFocus, boolean isFocusTransition);
  public void com.lynx.tasm.behavior.event.EventTarget.onResponseChain();
  public void com.lynx.tasm.behavior.event.EventTarget.offResponseChain();
  public boolean com.lynx.tasm.behavior.event.EventTarget.isOnResponseChain();
  public boolean com.lynx.tasm.behavior.event.EventTarget.consumeSlideEvent(float angle);
  public boolean com.lynx.tasm.behavior.event.EventTarget.hasConsumeSlideEventAngles();
  public boolean com.lynx.tasm.behavior.event.EventTarget.blockNativeEvent(MotionEvent ev);
  public boolean com.lynx.tasm.behavior.event.EventTarget.dispatchTouch(MotionEvent ev);
  public boolean com.lynx.tasm.behavior.event.EventTarget.dispatchEvent(LynxEventDetail event);
  public boolean com.lynx.tasm.behavior.event.EventTarget.eventThrough();
  public EventTarget com.lynx.tasm.behavior.event.EventTarget.getParentLynxPageUI();
  public void com.lynx.tasm.behavior.event.EventTarget.setParentLynxPageUI(EventTarget parentLynxPageUI);
  public HashMap< String, EventTarget > com.lynx.tasm.behavior.event.EventTarget.getChildrenLynxPageUI();
  public void com.lynx.tasm.behavior.event.EventTarget.setChildrenLynxPageUI(HashMap< String, EventTarget > childrenLynxPageUI);
  public EventTarget com.lynx.tasm.behavior.event.EventTarget.getRootLynxPageUI();
  public void com.lynx.tasm.behavior.event.EventTarget.setEventID(long eventID);
  public void com.lynx.tasm.behavior.event.EventTarget.startEventCapture(long eventID);
  public void com.lynx.tasm.behavior.event.EventTarget.onEventCapture(boolean isCapture, long eventID);
  public void com.lynx.tasm.behavior.event.EventTarget.startEventBubble(long eventID);
  public void com.lynx.tasm.behavior.event.EventTarget.onEventBubble(boolean isCapture, long eventID);
  public void com.lynx.tasm.behavior.event.EventTarget.startEventFire(boolean isStop, long eventID);
  public void com.lynx.tasm.behavior.event.EventTarget.onEventFire(boolean isStop, long eventID);
}

public interface com::lynx::tasm::behavior::event::EventTargetBase {
  public EventTargetBase com.lynx.tasm.behavior.event.EventTargetBase.parentResponder();
  public ReadableMap com.lynx.tasm.behavior.event.EventTargetBase.getDataset();
}

public class com::lynx::tasm::behavior::shadow::text::EventTargetSpan : ClickableSpan, com.lynx.tasm.behavior.event.EventTarget {
  public com.lynx.tasm.behavior.shadow.text.EventTargetSpan.EventTargetSpan(int sign, Map< String, EventsListener > events, EventTarget.EnableStatus ignoreFocus, boolean enableTouchPseudoPropagation, EventTarget.EnableStatus eventThrough, ReadableMap dataset);
  public void com.lynx.tasm.behavior.shadow.text.EventTargetSpan.onClick(View widget);
  public void com.lynx.tasm.behavior.shadow.text.EventTargetSpan.updateDrawState(TextPaint ds);
  public int com.lynx.tasm.behavior.shadow.text.EventTargetSpan.getSign();
  public int com.lynx.tasm.behavior.shadow.text.EventTargetSpan.getGestureArenaMemberId();
  public int com.lynx.tasm.behavior.shadow.text.EventTargetSpan.getPseudoStatus();
  public EventTarget com.lynx.tasm.behavior.shadow.text.EventTargetSpan.hitTest(float x, float y);
  public EventTarget com.lynx.tasm.behavior.shadow.text.EventTargetSpan.hitTest(float x, float y, boolean ignoreUserInteraction);
  public boolean com.lynx.tasm.behavior.shadow.text.EventTargetSpan.isUserInteractionEnabled();
  public boolean com.lynx.tasm.behavior.shadow.text.EventTargetSpan.containsPoint(float x, float y);
  public boolean com.lynx.tasm.behavior.shadow.text.EventTargetSpan.containsPoint(float x, float y, boolean ignoreUserInteraction);
  public void com.lynx.tasm.behavior.shadow.text.EventTargetSpan.setParent(EventTarget target);
  public EventTarget com.lynx.tasm.behavior.shadow.text.EventTargetSpan.parent();
  public EventTargetBase com.lynx.tasm.behavior.shadow.text.EventTargetSpan.parentResponder();
  public ReadableMap com.lynx.tasm.behavior.shadow.text.EventTargetSpan.getDataset();
  public Map< String, EventsListener > com.lynx.tasm.behavior.shadow.text.EventTargetSpan.getEvents();
  public Map< Integer, GestureDetector > com.lynx.tasm.behavior.shadow.text.EventTargetSpan.getGestureDetectorMap();
  public Matrix com.lynx.tasm.behavior.shadow.text.EventTargetSpan.getTransformMatrix();
  public boolean com.lynx.tasm.behavior.shadow.text.EventTargetSpan.ignoreFocus();
  public boolean com.lynx.tasm.behavior.shadow.text.EventTargetSpan.isFocusable();
  public boolean com.lynx.tasm.behavior.shadow.text.EventTargetSpan.isScrollable();
  public boolean com.lynx.tasm.behavior.shadow.text.EventTargetSpan.isClickable();
  public boolean com.lynx.tasm.behavior.shadow.text.EventTargetSpan.isLongClickable();
  public boolean com.lynx.tasm.behavior.shadow.text.EventTargetSpan.enableTouchPseudoPropagation();
  public void com.lynx.tasm.behavior.shadow.text.EventTargetSpan.onPseudoStatusChanged(int preStatus, int currentStatus);
  public void com.lynx.tasm.behavior.shadow.text.EventTargetSpan.onFocusChanged(boolean hasFocus, boolean isFocusTransition);
  public void com.lynx.tasm.behavior.shadow.text.EventTargetSpan.onResponseChain();
  public void com.lynx.tasm.behavior.shadow.text.EventTargetSpan.offResponseChain();
  public boolean com.lynx.tasm.behavior.shadow.text.EventTargetSpan.isOnResponseChain();
  public boolean com.lynx.tasm.behavior.shadow.text.EventTargetSpan.consumeSlideEvent(float angle);
  public boolean com.lynx.tasm.behavior.shadow.text.EventTargetSpan.hasConsumeSlideEventAngles();
  public boolean com.lynx.tasm.behavior.shadow.text.EventTargetSpan.blockNativeEvent(MotionEvent ev);
  public boolean com.lynx.tasm.behavior.shadow.text.EventTargetSpan.dispatchTouch(MotionEvent ev);
  public boolean com.lynx.tasm.behavior.shadow.text.EventTargetSpan.dispatchEvent(LynxEventDetail event);
  public boolean com.lynx.tasm.behavior.shadow.text.EventTargetSpan.eventThrough();
  public EventTarget com.lynx.tasm.behavior.shadow.text.EventTargetSpan.getParentLynxPageUI();
  public void com.lynx.tasm.behavior.shadow.text.EventTargetSpan.setParentLynxPageUI(EventTarget parentLynxPageUI);
  public HashMap< String, EventTarget > com.lynx.tasm.behavior.shadow.text.EventTargetSpan.getChildrenLynxPageUI();
  public void com.lynx.tasm.behavior.shadow.text.EventTargetSpan.setChildrenLynxPageUI(HashMap< String, EventTarget > childrenLynxPageUI);
  public EventTarget com.lynx.tasm.behavior.shadow.text.EventTargetSpan.getRootLynxPageUI();
  public void com.lynx.tasm.behavior.shadow.text.EventTargetSpan.setEventID(long eventID);
  public void com.lynx.tasm.behavior.shadow.text.EventTargetSpan.startEventCapture(long eventID);
  public void com.lynx.tasm.behavior.shadow.text.EventTargetSpan.onEventCapture(boolean isCapture, long eventID);
  public void com.lynx.tasm.behavior.shadow.text.EventTargetSpan.startEventBubble(long eventID);
  public void com.lynx.tasm.behavior.shadow.text.EventTargetSpan.onEventBubble(boolean isCapture, long eventID);
  public void com.lynx.tasm.behavior.shadow.text.EventTargetSpan.startEventFire(boolean isStop, long eventID);
  public void com.lynx.tasm.behavior.shadow.text.EventTargetSpan.onEventFire(boolean isStop, long eventID);
}

public interface com::lynx::tasm::behavior::ExceptionHandler {
  public void com.lynx.tasm.behavior.ExceptionHandler.handleException(Exception e);
  public void com.lynx.tasm.behavior.ExceptionHandler.handleException(Exception e, JSONObject userDefinedInfo);
  public void com.lynx.tasm.behavior.ExceptionHandler.handleException(Exception e, int errCode);
  public void com.lynx.tasm.behavior.ExceptionHandler.handleException(Exception e, int errCode, JSONObject userDefinedInfo);
}

public class com::lynx::tasm::behavior::ui::UIExposure::ExposureCallback : com.lynx.tasm.behavior.ui.UIExposure.ICallBack {
  public com.lynx.tasm.behavior.ui.UIExposure.ExposureCallback.ExposureCallback(WeakReference< LynxContext > weakContext);
  public boolean com.lynx.tasm.behavior.ui.UIExposure.ExposureCallback.canSendGlobalEvent();
  public void com.lynx.tasm.behavior.ui.UIExposure.ExposureCallback.sendGlobalEvent(String name, JavaOnlyArray params);
  public LynxBaseUI com.lynx.tasm.behavior.ui.UIExposure.ExposureCallback.findNode(int sign);
}

public class com::lynx::tasm::TimingHandler::ExtraTimingInfo :  {
  public long com.lynx.tasm.TimingHandler.ExtraTimingInfo.mOpenTime mOpenTime;
  public long com.lynx.tasm.TimingHandler.ExtraTimingInfo.mContainerInitStart mContainerInitStart;
  public long com.lynx.tasm.TimingHandler.ExtraTimingInfo.mContainerInitEnd mContainerInitEnd;
  public long com.lynx.tasm.TimingHandler.ExtraTimingInfo.mPrepareTemplateStart mPrepareTemplateStart;
  public long com.lynx.tasm.TimingHandler.ExtraTimingInfo.mPrepareTemplateEnd mPrepareTemplateEnd;
  public Map< String, Long > com.lynx.tasm.TimingHandler.ExtraTimingInfo.toMap();
}

public interface com::lynx::tasm::behavior::ui::list::FactoredPagerSnapHelper::FactoredPagerHooks {
  public void com.lynx.tasm.behavior.ui.list.FactoredPagerSnapHelper.FactoredPagerHooks.willSnapTo(int position, int currentOffsetX, int currentOffsetY, int distanceX, int distanceY);
}

public class com::lynx::tasm::behavior::ui::list::FactoredPagerSnapHelper : PagerSnapHelper {
  public FactoredPagerHooks com.lynx.tasm.behavior.ui.list.FactoredPagerSnapHelper.mPagerHooks mPagerHooks;
  public RecyclerView com.lynx.tasm.behavior.ui.list.FactoredPagerSnapHelper.mRecyclerView mRecyclerView;
  public void com.lynx.tasm.behavior.ui.list.FactoredPagerSnapHelper.setPagerAlignFactor(double factor);
  public void com.lynx.tasm.behavior.ui.list.FactoredPagerSnapHelper.setPagerAlignOffset(int offset);
  public int[] com.lynx.tasm.behavior.ui.list.FactoredPagerSnapHelper.calculateDistanceToFinalSnap( @NonNull RecyclerView.LayoutManager layoutManager, @NonNull View targetView);
  public View com.lynx.tasm.behavior.ui.list.FactoredPagerSnapHelper.findSnapView(RecyclerView.LayoutManager layoutManager);
  public int com.lynx.tasm.behavior.ui.list.FactoredPagerSnapHelper.findTargetSnapPosition(RecyclerView.LayoutManager layoutManager, int velocityX, int velocityY);
  public void com.lynx.tasm.behavior.ui.list.FactoredPagerSnapHelper.attachToRecyclerView(@Nullable RecyclerView recyclerView);
}

public class com::lynx::tasm::behavior::ui::image::FlattenUIImage : com.lynx.tasm.behavior.ui.LynxFlattenUI {
  public com.lynx.tasm.behavior.ui.image.FlattenUIImage.FlattenUIImage(LynxContext context);
  public void com.lynx.tasm.behavior.ui.image.FlattenUIImage.pauseAnimation(ReadableMap params, com.lynx.react.bridge.Callback callback);
  public void com.lynx.tasm.behavior.ui.image.FlattenUIImage.resumeAnimation(ReadableMap params, com.lynx.react.bridge.Callback callback);
  public void com.lynx.tasm.behavior.ui.image.FlattenUIImage.stopAnimation(ReadableMap params, com.lynx.react.bridge.Callback callback);
  public void com.lynx.tasm.behavior.ui.image.FlattenUIImage.startAnimate(ReadableMap params, com.lynx.react.bridge.Callback callback);
  public void com.lynx.tasm.behavior.ui.image.FlattenUIImage.updatePropertiesInterval(StylesDiffMap props);
  public void com.lynx.tasm.behavior.ui.image.FlattenUIImage.onPropsUpdated();
  public void com.lynx.tasm.behavior.ui.image.FlattenUIImage.setImageRendering(int imageRendering);
  public void com.lynx.tasm.behavior.ui.image.FlattenUIImage.onNodeReady();
  public void com.lynx.tasm.behavior.ui.image.FlattenUIImage.destroy();
  public void com.lynx.tasm.behavior.ui.image.FlattenUIImage.onDraw(Canvas canvas);
  public LynxImageManager com.lynx.tasm.behavior.ui.image.FlattenUIImage.getLynxImageManagerForViewInfo();
  public void com.lynx.tasm.behavior.ui.image.FlattenUIImage.detachWithViewInfo(ViewInfo parentViewInfo);
  public void com.lynx.tasm.behavior.ui.image.FlattenUIImage.setEvents(Map< String, EventsListener > events);
  public void com.lynx.tasm.behavior.ui.image.FlattenUIImage.onLayoutUpdated();
}

public class com::lynx::tasm::behavior::ui::text::FlattenUIText : com.lynx.tasm.behavior.ui.LynxFlattenUI, com.lynx.tasm.behavior.ui.text.IUIText {
  public com.lynx.tasm.behavior.ui.text.FlattenUIText.FlattenUIText(Context context);
  public com.lynx.tasm.behavior.ui.text.FlattenUIText.FlattenUIText(LynxContext context);
  public void com.lynx.tasm.behavior.ui.text.FlattenUIText.updateExtraData(Object data);
  public void com.lynx.tasm.behavior.ui.text.FlattenUIText.onNodeReady();
  public void com.lynx.tasm.behavior.ui.text.FlattenUIText.setTextBundle(final TextUpdateBundle bundle);
  public CharSequence com.lynx.tasm.behavior.ui.text.FlattenUIText.getOriginText();
  public void com.lynx.tasm.behavior.ui.text.FlattenUIText.onLayoutUpdated();
  public CharSequence com.lynx.tasm.behavior.ui.text.FlattenUIText.getText();
  public void com.lynx.tasm.behavior.ui.text.FlattenUIText.setTextGradient(String gradient);
  public void com.lynx.tasm.behavior.ui.text.FlattenUIText.setTextGradient(ReadableArray gradient);
  public void com.lynx.tasm.behavior.ui.text.FlattenUIText.setColor(int color);
  public void com.lynx.tasm.behavior.ui.text.FlattenUIText.setColor(Dynamic color);
  public void com.lynx.tasm.behavior.ui.text.FlattenUIText.onDraw(final Canvas canvas);
  public int com.lynx.tasm.behavior.ui.text.FlattenUIText.getDrawPositionLeft();
  public int com.lynx.tasm.behavior.ui.text.FlattenUIText.getDrawPositionTop();
  public CharSequence com.lynx.tasm.behavior.ui.text.FlattenUIText.getAccessibilityLabel();
  public Layout com.lynx.tasm.behavior.ui.text.FlattenUIText.getTextLayout();
  public EventTarget com.lynx.tasm.behavior.ui.text.FlattenUIText.hitTest(float x, float y);
  public EventTarget com.lynx.tasm.behavior.ui.text.FlattenUIText.hitTest(float x, float y, boolean ignoreUserInteraction);
  public void com.lynx.tasm.behavior.ui.text.FlattenUIText.destroy();
}

public class com::lynx::tasm::gesture::handler::FlingGestureHandler : com.lynx.tasm.gesture.handler.BaseGestureHandler {
  public com.lynx.tasm.gesture.handler.FlingGestureHandler.FlingGestureHandler(int sign, LynxContext lynxContext, @NonNull GestureDetector gestureDetector, GestureArenaMember gestureArenaMember);
  public void com.lynx.tasm.gesture.handler.FlingGestureHandler.fail();
  public void com.lynx.tasm.gesture.handler.FlingGestureHandler.end();
  public void com.lynx.tasm.gesture.handler.FlingGestureHandler.reset();
}

public class com::lynx::tasm::utils::FloatUtils :  {
  public static boolean com.lynx.tasm.utils.FloatUtils.floatsEqual(float f1, float f2);
  public static boolean com.lynx.tasm.utils.FloatUtils.isContainOnlyZero(@Nullable float[] array);
  public static float com.lynx.tasm.utils.FloatUtils.sanitizeFloatPropertyValue(float value);
  public static float com.lynx.tasm.utils.FloatUtils.getValue(String value);
}

public class com::lynx::tasm::fluency::FluencySample :  {
  public static boolean com.lynx.tasm.fluency.FluencySample.isEnable();
  public static void com.lynx.tasm.fluency.FluencySample.setEnable(boolean enable);
  public static void com.lynx.tasm.fluency.FluencySample.needCheckUpdate();
}

public class com::lynx::tasm::fluency::FluencyTraceHelper :  {
  public final double com.lynx.tasm.fluency.FluencyTraceHelper.UNKNOWN_FLUENCY_PAGECONFIG_PROBABILITY UNKNOWN_FLUENCY_PAGECONFIG_PROBABILITY;
  public com.lynx.tasm.fluency.FluencyTraceHelper.FluencyTraceHelper(LynxContext context);
  public com.lynx.tasm.fluency.FluencyTraceHelper.FluencyTraceHelper(LynxContext context, String scene, String tag);
  public void com.lynx.tasm.fluency.FluencyTraceHelper.setPageConfigProbability(double probability);
  public void com.lynx.tasm.fluency.FluencyTraceHelper.setEnabledBySampling(LynxBooleanOption enabledBySampling);
  public boolean com.lynx.tasm.fluency.FluencyTraceHelper.shouldSendAllScrollEvent();
  public void com.lynx.tasm.fluency.FluencyTraceHelper.start();
  public void com.lynx.tasm.fluency.FluencyTraceHelper.stop();
  public void com.lynx.tasm.fluency.FluencyTraceHelper.start(int sign, String scene, String tag);
  public void com.lynx.tasm.fluency.FluencyTraceHelper.stop(int sign);
}

public class com::lynx::tasm::fluency::FluencyTracerImpl::FluencyTracerConfig :  {
  public String com.lynx.tasm.fluency.FluencyTracerImpl.FluencyTracerConfig.getScene();
  public void com.lynx.tasm.fluency.FluencyTracerImpl.FluencyTracerConfig.setScene(String scene);
  public String com.lynx.tasm.fluency.FluencyTracerImpl.FluencyTracerConfig.getTag();
  public void com.lynx.tasm.fluency.FluencyTracerImpl.FluencyTracerConfig.setTag(String tag);
  public double com.lynx.tasm.fluency.FluencyTracerImpl.FluencyTracerConfig.getPageConfigProbability();
  public void com.lynx.tasm.fluency.FluencyTracerImpl.FluencyTracerConfig.setPageConfigProbability(double pageConfigProbability);
  public LynxBooleanOption com.lynx.tasm.fluency.FluencyTracerImpl.FluencyTracerConfig.getEnabledBySampling();
  public void com.lynx.tasm.fluency.FluencyTracerImpl.FluencyTracerConfig.setEnabledBySampling(LynxBooleanOption enabledBySampling);
}

public class com::lynx::tasm::LynxViewClient::FlushInfo :  {
  public final boolean com.lynx.tasm.LynxViewClient.FlushInfo.syncFlush syncFlush;
  public final long com.lynx.tasm.LynxViewClient.FlushInfo.beginTiming beginTiming;
  public final long com.lynx.tasm.LynxViewClient.FlushInfo.endTiming endTiming;
  public com.lynx.tasm.LynxViewClient.FlushInfo.FlushInfo(final boolean syncFlush, long beginTiming, long endTiming);
  public String com.lynx.tasm.LynxViewClient.FlushInfo.toString();
}

public class com::lynx::tasm::fontface::FontFace :  {
  public List< Pair< TYPE, String > > com.lynx.tasm.fontface.FontFace.getSrc();
  public void com.lynx.tasm.fontface.FontFace.setFontFamily(String fontFamily);
  public void com.lynx.tasm.fontface.FontFace.addUrl(String url);
  public void com.lynx.tasm.fontface.FontFace.addLocal(String local);
}

public class com::lynx::tasm::fontface::FontFaceManager :  {
  public static FontFaceManager com.lynx.tasm.fontface.FontFaceManager.getInstance();
  public Typeface com.lynx.tasm.fontface.FontFaceManager.getTypeface(final LynxContext context, final String fontFamily, final int style, final TypefaceCache.TypefaceListener listener);
}

public class com::lynx::tasm::utils::FontFaceParser :  {
  public static String com.lynx.tasm.utils.FontFaceParser.trim(String s);
  public static FontFace com.lynx.tasm.utils.FontFaceParser.parse(LynxContext context, String fontFamily);
}

public class com::lynx::tasm::behavior::shadow::text::FontFamilySpan : MetricAffectingSpan {
  public com.lynx.tasm.behavior.shadow.text.FontFamilySpan.FontFamilySpan(@Nullable Typeface typeface);
  public void com.lynx.tasm.behavior.shadow.text.FontFamilySpan.updateMeasureState(@NonNull TextPaint tp);
  public void com.lynx.tasm.behavior.shadow.text.FontFamilySpan.updateDrawState(TextPaint tp);
  public boolean com.lynx.tasm.behavior.shadow.text.FontFamilySpan.equals(Object o);
  public int com.lynx.tasm.behavior.shadow.text.FontFamilySpan.hashCode();
}

public enum com::lynx::tasm::fluency::FluencyTraceHelper::ForceStatus {
  public com.lynx.tasm.fluency.FluencyTraceHelper.ForceStatus.FORCED_ON FORCED_ON;
  public com.lynx.tasm.fluency.FluencyTraceHelper.ForceStatus.FORCED_OFF FORCED_OFF;
  public com.lynx.tasm.fluency.FluencyTraceHelper.ForceStatus.NON_FORCED NON_FORCED;
}

public class com::lynx::tasm::behavior::shadow::text::ForegroundColorSpan : MetricAffectingSpan {
  public com.lynx.tasm.behavior.shadow.text.ForegroundColorSpan.ForegroundColorSpan(int color);
  public boolean com.lynx.tasm.behavior.shadow.text.ForegroundColorSpan.equals(Object o);
  public int com.lynx.tasm.behavior.shadow.text.ForegroundColorSpan.getForegroundColor();
  public void com.lynx.tasm.behavior.shadow.text.ForegroundColorSpan.setStrokeColor(int color);
  public void com.lynx.tasm.behavior.shadow.text.ForegroundColorSpan.setStrokeWidth(float width);
  public void com.lynx.tasm.behavior.shadow.text.ForegroundColorSpan.setDrawStroke(boolean enable);
  public int com.lynx.tasm.behavior.shadow.text.ForegroundColorSpan.hashCode();
  public void com.lynx.tasm.behavior.shadow.text.ForegroundColorSpan.updateMeasureState(@NonNull TextPaint textPaint);
  public void com.lynx.tasm.behavior.shadow.text.ForegroundColorSpan.updateDrawState(TextPaint tp);
}

public interface com::lynx::tasm::behavior::ForegroundListener {
  public void com.lynx.tasm.behavior.ForegroundListener.onLynxViewEnterForeground();
  public void com.lynx.tasm.behavior.ForegroundListener.onLynxViewEnterBackground();
}

public class com::lynx::tasm::behavior::ui::list::GapItemDecoration : RecyclerView.ItemDecoration {
  public void com.lynx.tasm.behavior.ui.list.GapItemDecoration.getItemOffsets(@NonNull Rect outRect, @NonNull View view, @NonNull RecyclerView parent, @NonNull RecyclerView.State state);
  public void com.lynx.tasm.behavior.ui.list.GapItemDecoration.setIsRTL(boolean isRTL);
  public void com.lynx.tasm.behavior.ui.list.GapItemDecoration.setIsVertical(boolean isVertical);
  public void com.lynx.tasm.behavior.ui.list.GapItemDecoration.setColumnCount(int columnCount);
  public void com.lynx.tasm.behavior.ui.list.GapItemDecoration.setMainAxisGap(int mainAxisGap);
  public void com.lynx.tasm.behavior.ui.list.GapItemDecoration.setCrossAxisGap(int crossAxisGap);
}

public class com::lynx::tasm::gesture::arena::GestureArenaManager :  {
  public void com.lynx.tasm.gesture.arena.GestureArenaManager.init(boolean enable, LynxContext context);
  public void com.lynx.tasm.gesture.arena.GestureArenaManager.dispatchTouchEventToArena(MotionEvent event, LynxTouchEvent lynxTouchEvent);
  public void com.lynx.tasm.gesture.arena.GestureArenaManager.dispatchBubbleTouchEvent(String type, LynxTouchEvent touchEvent);
  public void com.lynx.tasm.gesture.arena.GestureArenaManager.setActiveUIToArenaAtDownEvent(EventTarget target);
  public void com.lynx.tasm.gesture.arena.GestureArenaManager.computeScroll();
  public int com.lynx.tasm.gesture.arena.GestureArenaManager.addMember(@Nullable GestureArenaMember member);
  public boolean com.lynx.tasm.gesture.arena.GestureArenaManager.isMemberExist(int memberId);
  public void com.lynx.tasm.gesture.arena.GestureArenaManager.setGestureDetectorState(int memberId, int gestureId, int state);
  public void com.lynx.tasm.gesture.arena.GestureArenaManager.removeMember(@Nullable GestureArenaMember member);
  public GestureArenaMember com.lynx.tasm.gesture.arena.GestureArenaManager.getMemberById(int id);
  public void com.lynx.tasm.gesture.arena.GestureArenaManager.onDestroy();
  public void com.lynx.tasm.gesture.arena.GestureArenaManager.registerGestureDetectors(int memberId, Map< Integer, GestureDetector > gestureDetectors);
  public void com.lynx.tasm.gesture.arena.GestureArenaManager.unRegisterGestureDetectors(int memberId, Map< Integer, GestureDetector > gestureDetectors);
}

public interface com::lynx::tasm::gesture::GestureArenaMember {
  public void com.lynx.tasm.gesture.GestureArenaMember.onGestureScrollBy(float deltaX, float deltaY);
  public boolean com.lynx.tasm.gesture.GestureArenaMember.canConsumeGesture(float deltaX, float deltaY);
  public int com.lynx.tasm.gesture.GestureArenaMember.getSign();
  public int com.lynx.tasm.gesture.GestureArenaMember.getGestureArenaMemberId();
  public int com.lynx.tasm.gesture.GestureArenaMember.getMemberScrollX();
  public boolean com.lynx.tasm.gesture.GestureArenaMember.isAtBorder(boolean isStart);
  public int com.lynx.tasm.gesture.GestureArenaMember.getMemberScrollY();
  public void com.lynx.tasm.gesture.GestureArenaMember.onInvalidate();
  public Map< Integer, GestureDetector > com.lynx.tasm.gesture.GestureArenaMember.getGestureDetectorMap();
  public Map< Integer, BaseGestureHandler > com.lynx.tasm.gesture.GestureArenaMember.getGestureHandlers();
}

public class com::lynx::tasm::gesture::handler::GestureConstants :  {
  public final String com.lynx.tasm.gesture.handler.GestureConstants.ON_TOUCHES_DOWN ON_TOUCHES_DOWN;
  public final String com.lynx.tasm.gesture.handler.GestureConstants.ON_TOUCHES_MOVE ON_TOUCHES_MOVE;
  public final String com.lynx.tasm.gesture.handler.GestureConstants.ON_TOUCHES_UP ON_TOUCHES_UP;
  public final String com.lynx.tasm.gesture.handler.GestureConstants.ON_TOUCHES_CANCEL ON_TOUCHES_CANCEL;
  public final String com.lynx.tasm.gesture.handler.GestureConstants.ON_BEGIN ON_BEGIN;
  public final String com.lynx.tasm.gesture.handler.GestureConstants.ON_UPDATE ON_UPDATE;
  public final String com.lynx.tasm.gesture.handler.GestureConstants.ON_END ON_END;
  public final String com.lynx.tasm.gesture.handler.GestureConstants.ON_START ON_START;
  public final String com.lynx.tasm.gesture.handler.GestureConstants.MIN_DURATION MIN_DURATION;
  public final String com.lynx.tasm.gesture.handler.GestureConstants.MAX_DURATION MAX_DURATION;
  public final String com.lynx.tasm.gesture.handler.GestureConstants.MIN_DISTANCE MIN_DISTANCE;
  public final String com.lynx.tasm.gesture.handler.GestureConstants.MAX_DISTANCE MAX_DISTANCE;
  public final String com.lynx.tasm.gesture.handler.GestureConstants.TAP_SLOP TAP_SLOP;
  public final int com.lynx.tasm.gesture.handler.GestureConstants.LYNX_STATE_INIT LYNX_STATE_INIT;
  public final int com.lynx.tasm.gesture.handler.GestureConstants.LYNX_STATE_BEGIN LYNX_STATE_BEGIN;
  public final int com.lynx.tasm.gesture.handler.GestureConstants.LYNX_STATE_ACTIVE LYNX_STATE_ACTIVE;
  public final int com.lynx.tasm.gesture.handler.GestureConstants.LYNX_STATE_FAIL LYNX_STATE_FAIL;
  public final int com.lynx.tasm.gesture.handler.GestureConstants.LYNX_STATE_END LYNX_STATE_END;
  public final int com.lynx.tasm.gesture.handler.GestureConstants.LYNX_STATE_UNDETERMINED LYNX_STATE_UNDETERMINED;
}

public class com::lynx::tasm::gesture::detector::GestureDetector :  {
  public final int com.lynx.tasm.gesture.detector.GestureDetector.GESTURE_TYPE_PAN GESTURE_TYPE_PAN;
  public final int com.lynx.tasm.gesture.detector.GestureDetector.GESTURE_TYPE_FLING GESTURE_TYPE_FLING;
  public final int com.lynx.tasm.gesture.detector.GestureDetector.GESTURE_TYPE_DEFAULT GESTURE_TYPE_DEFAULT;
  public final int com.lynx.tasm.gesture.detector.GestureDetector.GESTURE_TYPE_TAP GESTURE_TYPE_TAP;
  public final int com.lynx.tasm.gesture.detector.GestureDetector.GESTURE_TYPE_LONG_PRESS GESTURE_TYPE_LONG_PRESS;
  public final int com.lynx.tasm.gesture.detector.GestureDetector.GESTURE_TYPE_ROTATION GESTURE_TYPE_ROTATION;
  public final int com.lynx.tasm.gesture.detector.GestureDetector.GESTURE_TYPE_PINCH GESTURE_TYPE_PINCH;
  public final int com.lynx.tasm.gesture.detector.GestureDetector.GESTURE_TYPE_NATIVE GESTURE_TYPE_NATIVE;
  public final String com.lynx.tasm.gesture.detector.GestureDetector.WAIT_FOR WAIT_FOR;
  public final String com.lynx.tasm.gesture.detector.GestureDetector.SIMULTANEOUS SIMULTANEOUS;
  public final String com.lynx.tasm.gesture.detector.GestureDetector.CONTINUE_WITH CONTINUE_WITH;
  public com.lynx.tasm.gesture.detector.GestureDetector.GestureDetector(int gestureID, int gestureType, @Nullable List< String > gestureCallbackNames, @Nullable Map< String, List< Integer > > relationMap);
  public com.lynx.tasm.gesture.detector.GestureDetector.GestureDetector(int gestureID, int gestureType, @Nullable List< String > gestureCallbackNames, @Nullable Map< String, List< Integer > > relationMap, @Nullable ReadableMap configMap);
  public int com.lynx.tasm.gesture.detector.GestureDetector.getGestureID();
  public int com.lynx.tasm.gesture.detector.GestureDetector.getGestureType();
  public ReadableMap com.lynx.tasm.gesture.detector.GestureDetector.getConfigMap();
  public List< String > com.lynx.tasm.gesture.detector.GestureDetector.getGestureCallbackNames();
  public Map< String, List< Integer > > com.lynx.tasm.gesture.detector.GestureDetector.getRelationMap();
  public static Map< Integer, GestureDetector > com.lynx.tasm.gesture.detector.GestureDetector.convertGestureDetectors(ReadableArray gestureDetectors);
}

public class com::lynx::tasm::gesture::detector::GestureDetectorManager :  {
  public com.lynx.tasm.gesture.detector.GestureDetectorManager.GestureDetectorManager(GestureArenaManager arenaManager);
  public void com.lynx.tasm.gesture.detector.GestureDetectorManager.registerGestureDetector(int memberId, GestureDetector gestureDetector);
  public void com.lynx.tasm.gesture.detector.GestureDetectorManager.unregisterGestureDetector(int memberId, GestureDetector gestureDetector);
  public LinkedList< GestureArenaMember > com.lynx.tasm.gesture.detector.GestureDetectorManager.convertResponseChainToCompeteChain(LinkedList< GestureArenaMember > responseList);
  public Pair< HashSet< GestureArenaMember >, HashSet< Integer > > com.lynx.tasm.gesture.detector.GestureDetectorManager.handleSimultaneousWinner(GestureArenaMember current);
  public void com.lynx.tasm.gesture.detector.GestureDetectorManager.onDestroy();
}

public class com::lynx::tasm::gesture::handler::GestureHandlerTrigger :  {
  public com.lynx.tasm.gesture.handler.GestureHandlerTrigger.GestureHandlerTrigger(LynxContext context, GestureDetectorManager manager);
  public void com.lynx.tasm.gesture.handler.GestureHandlerTrigger.initCurrentWinnerWhenDown(GestureArenaMember member);
  public void com.lynx.tasm.gesture.handler.GestureHandlerTrigger.resolveTouchEvent(MotionEvent event, LinkedList< GestureArenaMember > competeChainCandidates, LynxTouchEvent lynxTouchEvent, LinkedList< GestureArenaMember > bubbleChainCandidates);
  public void com.lynx.tasm.gesture.handler.GestureHandlerTrigger.computeScroll(LinkedList< GestureArenaMember > competeChainCandidates);
  public void com.lynx.tasm.gesture.handler.GestureHandlerTrigger.handleGestureDetectorState( @Nullable GestureArenaMember member, int gestureId, int state);
  public BaseGestureHandler com.lynx.tasm.gesture.handler.GestureHandlerTrigger.getGestureHandlerById(GestureArenaMember member, int gestureId);
  public void com.lynx.tasm.gesture.handler.GestureHandlerTrigger.dispatchBubbleTouchEvent(String type, LynxTouchEvent touchEvent, LinkedList< GestureArenaMember > bubbleCandidate, GestureArenaMember winner);
  public void com.lynx.tasm.gesture.handler.GestureHandlerTrigger.onDestroy();
}

public class com::lynx::tasm::behavior::GestureRecognizer :  {
  public com.lynx.tasm.behavior.GestureRecognizer.GestureRecognizer(OnGestureListener listener, Handler handler);
  public com.lynx.tasm.behavior.GestureRecognizer.GestureRecognizer(OnGestureListener listener);
  public com.lynx.tasm.behavior.GestureRecognizer.GestureRecognizer(Context context, OnGestureListener listener);
  public com.lynx.tasm.behavior.GestureRecognizer.GestureRecognizer(Context context, OnGestureListener listener, Handler handler);
  public com.lynx.tasm.behavior.GestureRecognizer.GestureRecognizer(Context context, OnGestureListener listener, Handler handler, boolean ignoreMultitouch);
  public void com.lynx.tasm.behavior.GestureRecognizer.updateTouchSlop(Context context);
  public void com.lynx.tasm.behavior.GestureRecognizer.setOnDoubleTapListener(OnDoubleTapListener onDoubleTapListener);
  public void com.lynx.tasm.behavior.GestureRecognizer.setLongPressTimeout(int longPressTimeout);
  public void com.lynx.tasm.behavior.GestureRecognizer.setIsLongpressEnabled(boolean isLongpressEnabled);
  public boolean com.lynx.tasm.behavior.GestureRecognizer.isLongpressEnabled();
  public boolean com.lynx.tasm.behavior.GestureRecognizer.onTouchEvent(MotionEvent ev);
}

public class com::lynx::tasm::base::GlobalRefQueue :  {
  public com.lynx.tasm.base.GlobalRefQueue.GlobalRefQueue();
  public long com.lynx.tasm.base.GlobalRefQueue.push(Object ref);
  public Object com.lynx.tasm.base.GlobalRefQueue.pop(long index);
}

public class com::lynx::tasm::utils::GradientUtils :  {
  public static PointF com.lynx.tasm.utils.GradientUtils.getRadius(int shape, int shapeSize, float cx, float cy, float sx, float sy);
  public static ReadableArray com.lynx.tasm.utils.GradientUtils.getGradientArray(String gradientDef, float screen_width, float layouts_unit_per_px, float physical_pixels_per_layout_unit, float root_node_font_size, float cur_node_font_size, float font_scale, float viewport_width, float viewport_height);
}

public class com::lynx::tasm::behavior::herotransition::HeroAnimOwner :  {
  public com.lynx.tasm.behavior.herotransition.HeroAnimOwner.HeroAnimOwner(LynxUI lynxUI);
  public void com.lynx.tasm.behavior.herotransition.HeroAnimOwner.onAnimationEnd(String name);
  public void com.lynx.tasm.behavior.herotransition.HeroAnimOwner.setEnterAnim(AnimationInfo enterName);
  public void com.lynx.tasm.behavior.herotransition.HeroAnimOwner.setExitAnim(AnimationInfo exitName);
  public void com.lynx.tasm.behavior.herotransition.HeroAnimOwner.setPauseAnim(AnimationInfo pauseAnim);
  public void com.lynx.tasm.behavior.herotransition.HeroAnimOwner.setResumeAnim(AnimationInfo resumeName);
  public void com.lynx.tasm.behavior.herotransition.HeroAnimOwner.executePauseAnim();
  public void com.lynx.tasm.behavior.herotransition.HeroAnimOwner.executeResumeAnim();
  public void com.lynx.tasm.behavior.herotransition.HeroAnimOwner.executeExitAnim(final HeroTransitionManager.LynxViewExitFinishListener listener);
  public void com.lynx.tasm.behavior.herotransition.HeroAnimOwner.executeEnterAnim(final HeroTransitionManager.LynxViewEnterFinishListener listener);
  public void com.lynx.tasm.behavior.herotransition.HeroAnimOwner.setSharedElementName(String name);
}

public class com::lynx::tasm::behavior::herotransition::HeroTransitionManager :  {
  public boolean com.lynx.tasm.behavior.herotransition.HeroTransitionManager.isSharedTransitionEnable();
  public void com.lynx.tasm.behavior.herotransition.HeroTransitionManager.setSharedTransitionEnable(boolean mEnableSharedTransition);
  public synchronized void com.lynx.tasm.behavior.herotransition.HeroTransitionManager.registerSharedElement(View v, String tag);
  public synchronized void com.lynx.tasm.behavior.herotransition.HeroTransitionManager.unRegisterSharedElement(String tag);
  public synchronized void com.lynx.tasm.behavior.herotransition.HeroTransitionManager.unRegisterSharedElement(View v);
  public synchronized View com.lynx.tasm.behavior.herotransition.HeroTransitionManager.getSharedElementByTag(String tag, LynxUI lynxUI);
  public synchronized void com.lynx.tasm.behavior.herotransition.HeroTransitionManager.registerEnterAnim(LynxUI lynxUI, AnimationInfo transitionName);
  public synchronized void com.lynx.tasm.behavior.herotransition.HeroTransitionManager.registerExitAnim(LynxUI lynxUI, AnimationInfo transitionName);
  public synchronized void com.lynx.tasm.behavior.herotransition.HeroTransitionManager.registerResumeAnim(LynxUI lynxUI, AnimationInfo transitionName);
  public synchronized void com.lynx.tasm.behavior.herotransition.HeroTransitionManager.registerPauseAnim(LynxUI lynxUI, AnimationInfo transitionName);
  public void com.lynx.tasm.behavior.herotransition.HeroTransitionManager.executeEnterAnim(UIBody.UIBodyView bodyView, final LynxViewEnterFinishListener listener);
  public void com.lynx.tasm.behavior.herotransition.HeroTransitionManager.executeExitAnim(LynxView lynxView, final LynxViewExitFinishListener listener);
  public void com.lynx.tasm.behavior.herotransition.HeroTransitionManager.executeResumeAnim(LynxView lynxView);
  public void com.lynx.tasm.behavior.herotransition.HeroTransitionManager.executePauseAnim(LynxView lynxView);
  public void com.lynx.tasm.behavior.herotransition.HeroTransitionManager.onLynxViewDestroy(LynxView lynxView);
  public static HeroTransitionManager com.lynx.tasm.behavior.herotransition.HeroTransitionManager.inst();
}

public class com::lynx::jsbridge::network::HttpRequest :  {
  public com.lynx.jsbridge.network.HttpRequest.HttpRequest();
  public String com.lynx.jsbridge.network.HttpRequest.getHttpMethod();
  public void com.lynx.jsbridge.network.HttpRequest.setHttpMethod(String httpMethod);
  public String com.lynx.jsbridge.network.HttpRequest.getUrl();
  public void com.lynx.jsbridge.network.HttpRequest.setUrl(String url);
  public String com.lynx.jsbridge.network.HttpRequest.getOriginUrl();
  public void com.lynx.jsbridge.network.HttpRequest.setOriginUrl(String originUrl);
  public byte[] com.lynx.jsbridge.network.HttpRequest.getHttpBody();
  public void com.lynx.jsbridge.network.HttpRequest.setHttpBody(byte[] httpBody);
  public JavaOnlyMap com.lynx.jsbridge.network.HttpRequest.getHttpHeaders();
  public void com.lynx.jsbridge.network.HttpRequest.setHttpHeaders(JavaOnlyMap httpHeaders);
  public JavaOnlyMap com.lynx.jsbridge.network.HttpRequest.getCustomConfig();
  public void com.lynx.jsbridge.network.HttpRequest.setCustomConfig(JavaOnlyMap customConfig);
  public static HttpRequest com.lynx.jsbridge.network.HttpRequest.CreateHttpRequest(String httpMethod, String url, String originUrl, byte[] httpBody, JavaOnlyMap httpHeaderFields, JavaOnlyMap customConfig);
}

public class com::lynx::jsbridge::network::HttpResponse :  {
  public com.lynx.jsbridge.network.HttpResponse.HttpResponse();
  public int com.lynx.jsbridge.network.HttpResponse.getStatusCode();
  public String com.lynx.jsbridge.network.HttpResponse.getStatusText();
  public JavaOnlyMap com.lynx.jsbridge.network.HttpResponse.getHttpHeaders();
  public byte[] com.lynx.jsbridge.network.HttpResponse.getHttpBody();
  public String com.lynx.jsbridge.network.HttpResponse.getUrl();
  public JavaOnlyMap com.lynx.jsbridge.network.HttpResponse.getCustomInfo();
  public void com.lynx.jsbridge.network.HttpResponse.setCustomInfo(JavaOnlyMap customInfo);
  public void com.lynx.jsbridge.network.HttpResponse.setHttpBody(byte[] httpBody);
  public void com.lynx.jsbridge.network.HttpResponse.setHttpHeaders(JavaOnlyMap httpHeaders);
  public void com.lynx.jsbridge.network.HttpResponse.setUrl(String url);
  public void com.lynx.jsbridge.network.HttpResponse.setStatusText(String statusText);
  public void com.lynx.jsbridge.network.HttpResponse.setStatusCode(int statusCode);
}

public class com::lynx::tasm::utils::I18nUtil :  {
  public static I18nUtil com.lynx.tasm.utils.I18nUtil.getInstance();
  public boolean com.lynx.tasm.utils.I18nUtil.isRTL(Context context);
  public void com.lynx.tasm.utils.I18nUtil.allowRTL(Context context, boolean allowRTL);
  public boolean com.lynx.tasm.utils.I18nUtil.doLeftAndRightSwapInRTL(Context context);
  public void com.lynx.tasm.utils.I18nUtil.swapLeftAndRightInRTL(Context context, boolean flip);
  public void com.lynx.tasm.utils.I18nUtil.forceRTL(Context context, boolean forceRTL);
}

public interface com::lynx::tasm::behavior::ui::UIExposure::ICallBack {
  public boolean com.lynx.tasm.behavior.ui.UIExposure.ICallBack.canSendGlobalEvent();
  public void com.lynx.tasm.behavior.ui.UIExposure.ICallBack.sendGlobalEvent(String name, JavaOnlyArray params);
  public LynxBaseUI com.lynx.tasm.behavior.ui.UIExposure.ICallBack.findNode(int sign);
}

public interface com::lynx::tasm::base::IComplicatedLogDelegate {
  public boolean com.lynx.tasm.base.IComplicatedLogDelegate.getShouldFormatMessage();
  public boolean com.lynx.tasm.base.IComplicatedLogDelegate.isComplicatedLogLoggable(int level, LogSource source, Long runtimeId);
}

public class com::lynx::tasm::icu::ICURegister :  {
  public static synchronized void com.lynx.tasm.icu.ICURegister.loadLibrary(@NonNull INativeLibraryLoader loader);
}

public interface com::lynx::devtoolwrapper::IDevToolDelegate {
  public void com.lynx.devtoolwrapper.IDevToolDelegate.onDispatchMessageEvent(ReadableMap map);
  public void com.lynx.devtoolwrapper.IDevToolDelegate.takeScreenshot(ScreenshotBitmapHandler handler, String screenShotMode);
  public void com.lynx.devtoolwrapper.IDevToolDelegate.scrollIntoViewFromUI(int nodeId);
  public String com.lynx.devtoolwrapper.IDevToolDelegate.getActualScreenshotMode();
  public int com.lynx.devtoolwrapper.IDevToolDelegate.getNodeForLocation(float x, float y, String mode);
  public float[] com.lynx.devtoolwrapper.IDevToolDelegate.getTransformValue(int id, float[] padBorderMarginLayout);
  public Bitmap com.lynx.devtoolwrapper.IDevToolDelegate.getBitmapOfView();
}

public interface com::lynx::tasm::behavior::ui::IDrawChildHook {
  public void com.lynx.tasm.behavior.ui.IDrawChildHook.beforeDraw(Canvas canvas);
  public void com.lynx.tasm.behavior.ui.IDrawChildHook.beforeDispatchDraw(Canvas canvas);
  public void com.lynx.tasm.behavior.ui.IDrawChildHook.afterDispatchDraw(Canvas canvas);
  public Rect com.lynx.tasm.behavior.ui.IDrawChildHook.beforeDrawChild(Canvas canvas, View child, long drawingTime);
  public void com.lynx.tasm.behavior.ui.IDrawChildHook.afterDrawChild(Canvas canvas, View child, long drawingTime);
  public int com.lynx.tasm.behavior.ui.IDrawChildHook.getChildDrawingOrder(int childCount, int index);
  public boolean com.lynx.tasm.behavior.ui.IDrawChildHook.hasOverlappingRendering();
  public void com.lynx.tasm.behavior.ui.IDrawChildHook.performLayoutChildrenUI();
  public void com.lynx.tasm.behavior.ui.IDrawChildHook.performMeasureChildrenUI();
  public void com.lynx.tasm.behavior.ui.IDrawChildHook.afterDraw(Canvas canvas);
}

public interface com::lynx::tasm::behavior::ui::IDrawChildHook::IDrawChildHookBinding {
  public void com.lynx.tasm.behavior.ui.IDrawChildHook.IDrawChildHookBinding.bindDrawChildHook(IDrawChildHook hook);
}

public interface com::lynx::tasm::IDynamicHandler {
}

public interface com::lynx::tasm::fluency::LynxFpsTracer::IFluencyCallback {
  public void com.lynx.tasm.fluency.LynxFpsTracer.IFluencyCallback.report(LynxFpsRawMetrics rawMetrics);
}

public interface com::lynx::tasm::IListNodeInfoFetcher {
  public JavaOnlyMap com.lynx.tasm.IListNodeInfoFetcher.getPlatformInfo(int listSign);
  public void com.lynx.tasm.IListNodeInfoFetcher.renderChild(int listSign, int index, long operationId);
  public void com.lynx.tasm.IListNodeInfoFetcher.updateChild(int listSign, int oldSign, int newIndex, long operationId);
  public void com.lynx.tasm.IListNodeInfoFetcher.removeChild(int listSign, int childSign);
  public int com.lynx.tasm.IListNodeInfoFetcher.obtainChild(int listSign, int index, long operationId, boolean enableReuseNotification);
  public void com.lynx.tasm.IListNodeInfoFetcher.recycleChild(int listSign, int childSign);
  public void com.lynx.tasm.IListNodeInfoFetcher.obtainChildAsync(int listSign, int index, long operationId);
  public void com.lynx.tasm.IListNodeInfoFetcher.recycleChildAsync(int listSign, int childSign);
  public void com.lynx.tasm.IListNodeInfoFetcher.scrollByListContainer(int containerSign, float x, float y, float originalX, float originalY);
  public void com.lynx.tasm.IListNodeInfoFetcher.scrollToPosition(int containerSign, int position, float offset, int align, boolean smooth);
  public void com.lynx.tasm.IListNodeInfoFetcher.scrollStopped(int containerSign);
}

public interface com::lynx::tasm::base::ILogDelegate {
  public int com.lynx.tasm.base.ILogDelegate.type();
  public void com.lynx.tasm.base.ILogDelegate.setMinimumLoggingLevel(int level);
  public int com.lynx.tasm.base.ILogDelegate.getMinimumLoggingLevel();
  public boolean com.lynx.tasm.base.ILogDelegate.isLoggable(int level);
  public boolean com.lynx.tasm.base.ILogDelegate.isLoggable(LogSource source, int level);
  public void com.lynx.tasm.base.ILogDelegate.v(String tag, String msg);
  public void com.lynx.tasm.base.ILogDelegate.d(String tag, String msg);
  public void com.lynx.tasm.base.ILogDelegate.i(String tag, String msg);
  public void com.lynx.tasm.base.ILogDelegate.w(String tag, String msg);
  public void com.lynx.tasm.base.ILogDelegate.e(String tag, String msg);
  public void com.lynx.tasm.base.ILogDelegate.k(String tag, String msg);
  public void com.lynx.tasm.base.ILogDelegate.log(int priority, String tag, String msg);
}

public interface com::lynx::tasm::service::ILynxDevToolService {
  public default Class<? extends IServiceProvider > com.lynx.tasm.service.ILynxDevToolService.getServiceClass();
  public LynxBaseInspectorOwnerNG com.lynx.tasm.service.ILynxDevToolService.createInspectorOwner(@Nullable LynxView view);
  public ILynxLogBox com.lynx.tasm.service.ILynxDevToolService.createLogBox(@NonNull LynxDevtool devtool);
  public Class<? extends com.lynx.jsbridge.LynxModule > com.lynx.tasm.service.ILynxDevToolService.getDevToolSetModuleClass();
  public Class<? extends com.lynx.jsbridge.LynxModule > com.lynx.tasm.service.ILynxDevToolService.getDevToolWebSocketModuleClass();
  public Class<? extends com.lynx.jsbridge.LynxModule > com.lynx.tasm.service.ILynxDevToolService.getLynxTrailModule();
  public Boolean com.lynx.tasm.service.ILynxDevToolService.globalDebugBridgeShouldPrepareRemoteDebug(String url);
  public Boolean com.lynx.tasm.service.ILynxDevToolService.globalDebugBridgePrepareRemoteDebug(String scheme);
  public void com.lynx.tasm.service.ILynxDevToolService.globalDebugBridgeSetContext(Context ctx);
  public void com.lynx.tasm.service.ILynxDevToolService.globalDebugBridgeRegisterCardListener(LynxDevtoolCardListener listener);
  public void com.lynx.tasm.service.ILynxDevToolService.globalDebugBridgeSetAppInfo(Context ctx, Map< String, String > appInfo);
  public void com.lynx.tasm.service.ILynxDevToolService.globalDebugBridgeOnPerfMetricsEvent(String eventName, @NonNull JSONObject data, int instanceId);
  public void com.lynx.tasm.service.ILynxDevToolService.globalDebugBridgeStartRecord();
  public void com.lynx.tasm.service.ILynxDevToolService.devtoolEnvSetDevToolLibraryLoader(INativeLibraryLoader loader);
  public void com.lynx.tasm.service.ILynxDevToolService.setDevtoolEnv(String key, Object value);
  public void com.lynx.tasm.service.ILynxDevToolService.setDevtoolGroupEnv(String groupKey, Set< String > newGroupValues);
  public boolean com.lynx.tasm.service.ILynxDevToolService.getDevtoolBooleanEnv(String key, Boolean defaultValue);
  public Integer com.lynx.tasm.service.ILynxDevToolService.getDevtoolIntEnv(String key, Integer defaultValue);
  public Set< String > com.lynx.tasm.service.ILynxDevToolService.getDevtoolGroupEnv(String key);
  public void com.lynx.tasm.service.ILynxDevToolService.devtoolEnvInit(Context ctx);
  public boolean com.lynx.tasm.service.ILynxDevToolService.isDevtoolAttached();
}

public interface com::lynx::tasm::ILynxEngine {
  public void com.lynx.tasm.ILynxEngine.loadTemplate(final LynxLoadMeta metaData);
  public void com.lynx.tasm.ILynxEngine.updateMetaData(LynxUpdateMeta meta);
  public void com.lynx.tasm.ILynxEngine.updateViewport(int widthMeasureSpec, int heightMeasureSpec);
  public void com.lynx.tasm.ILynxEngine.destroy();
}

public interface com::lynx::tasm::ILynxErrorReceiver {
  public void com.lynx.tasm.ILynxErrorReceiver.onErrorOccurred(LynxError error);
}

public interface com::lynx::tasm::service::ILynxEventReporterService {
  public default Class<? extends IServiceProvider > com.lynx.tasm.service.ILynxEventReporterService.getServiceClass();
}

public interface com::lynx::tasm::eventreport::ILynxEventReportObserver {
  public void com.lynx.tasm.eventreport.ILynxEventReportObserver.onReportEvent(@NonNull String eventName, int instanceId, @NonNull Map< String, ? extends Object > props, @Nullable Map< String, ? extends Object > extraData);
}

public interface com::lynx::tasm::service::ILynxExtensionService {
  public default Class<? extends IServiceProvider > com.lynx.tasm.service.ILynxExtensionService.getServiceClass();
  public void com.lynx.tasm.service.ILynxExtensionService.onLynxEnvSetup();
  public void com.lynx.tasm.service.ILynxExtensionService.onLynxViewSetup(LynxContext context, LynxGroup group, BehaviorRegistry behaviorRegistry);
  public void com.lynx.tasm.service.ILynxExtensionService.onLynxViewDestroy(LynxContext context);
}

public interface com::lynx::tasm::service::ILynxHttpService {
  public default Class<? extends IServiceProvider > com.lynx.tasm.service.ILynxHttpService.getServiceClass();
  public void com.lynx.tasm.service.ILynxHttpService.request(@NonNull HttpRequest request, @NonNull final LynxHttpRequestCallback callback);
}

public interface com::lynx::tasm::service::ILynxI18nService {
  public default Class<? extends IServiceProvider > com.lynx.tasm.service.ILynxI18nService.getServiceClass();
  public boolean com.lynx.tasm.service.ILynxI18nService.loadLibrary(INativeLibraryLoader loader);
  public boolean com.lynx.tasm.service.ILynxI18nService.registerNapiEnv(long napiEnvPtr);
}

public interface com::lynx::tasm::service::ILynxImageService {
  public default Class<? extends IServiceProvider > com.lynx.tasm.service.ILynxImageService.getServiceClass();
  public void com.lynx.tasm.service.ILynxImageService.fetchImage(@NonNull ImageRequestInfo imageRequestInfo, @NonNull ImageLoadListener loadListener, @Nullable AnimationListener animationListener, @NonNull Context context);
  public boolean com.lynx.tasm.service.ILynxImageService.startAnimation(@NonNull Drawable animatable);
  public boolean com.lynx.tasm.service.ILynxImageService.resumeAnimation(@NonNull Drawable animatable);
  public boolean com.lynx.tasm.service.ILynxImageService.pauseAnimation(@NonNull Drawable animatable);
  public boolean com.lynx.tasm.service.ILynxImageService.stopAnimation(@NonNull Drawable animatable);
  public void com.lynx.tasm.service.ILynxImageService.prefetchImage( @NonNull String uri, @Nullable Object callerContext, @Nullable ReadableMap params);
  public void com.lynx.tasm.service.ILynxImageService.decodeImage(@NonNull ImageRequestInfo imageRequestInfo, @NonNull ImageLoadListener listener);
  public void com.lynx.tasm.service.ILynxImageService.releaseImage(@NonNull ImageRequestInfo imageRequestInfo);
  public void com.lynx.tasm.service.ILynxImageService.releaseAnimDrawable(@NonNull Drawable drawable);
  public boolean com.lynx.tasm.service.ILynxImageService.canParseUrl(@NonNull String url);
  public BackgroundLayerDrawable com.lynx.tasm.service.ILynxImageService.createBackgroundImageDrawable( @NonNull Context context, @NonNull String url);
  public void com.lynx.tasm.service.ILynxImageService.onLynxEnvSetup();
  public void com.lynx.tasm.service.ILynxImageService.setCustomImageDecoder(@NonNull Object builder);
  public Object com.lynx.tasm.service.ILynxImageService.getImageSRPostProcessor();
  public void com.lynx.tasm.service.ILynxImageService.setImageSRSize(@NonNull Object request, @NonNull View view);
  public void com.lynx.tasm.service.ILynxImageService.setImageCacheChoice(@NonNull String cacheChoice, @NonNull Object builder);
  public void com.lynx.tasm.service.ILynxImageService.setImagePlaceHolderHash(@NonNull Object hierarchy, @NonNull Object request, @NonNull Object scaleType, @NonNull String hash, @Nullable String metaData, int width, int height, int radius, int iterations, boolean isPreView);
}

public interface com::lynx::jsbridge::jsi::ILynxJSIObject {
}

public interface com::lynx::jsbridge::jsi::ILynxJSIObjectDescriptor {
  public String com.lynx.jsbridge.jsi.ILynxJSIObjectDescriptor.getClassName();
  public String[] com.lynx.jsbridge.jsi.ILynxJSIObjectDescriptor.getFields();
  public String[] com.lynx.jsbridge.jsi.ILynxJSIObjectDescriptor.getLynxObjectDescriptorInfo(String fieldName);
  public void com.lynx.jsbridge.jsi.ILynxJSIObjectDescriptor.warmUp();
}

public interface com::lynx::devtoolwrapper::ILynxLogBox {
  public void com.lynx.devtoolwrapper.ILynxLogBox.showLogMessage(final LynxError error);
  public void com.lynx.devtoolwrapper.ILynxLogBox.onLoadTemplate();
  public void com.lynx.devtoolwrapper.ILynxLogBox.attachContext(Context context);
}

public interface com::lynx::tasm::service::ILynxLogService {
  public default Class<? extends IServiceProvider > com.lynx.tasm.service.ILynxLogService.getServiceClass();
  public void com.lynx.tasm.service.ILynxLogService.logByPlatform(int level, String tag, String msg);
  public boolean com.lynx.tasm.service.ILynxLogService.isLogOutputByPlatform();
  public long com.lynx.tasm.service.ILynxLogService.getDefaultWriteFunction();
  public void com.lynx.tasm.service.ILynxLogService.switchLogToSystem(boolean enableSystemLog);
  public boolean com.lynx.tasm.service.ILynxLogService.getLogToSystemStatus();
}

public interface com::lynx::tasm::service::ILynxMemoryMonitorService {
  public default Class<? extends IServiceProvider > com.lynx.tasm.service.ILynxMemoryMonitorService.getServiceClass();
  public void com.lynx.tasm.service.ILynxMemoryMonitorService.reportMemoryUsage(@NonNull LynxMemoryInfo data);
  public void com.lynx.tasm.service.ILynxMemoryMonitorService.startTrackMemoryAllocation(@NonNull Context applicationContext);
  public void com.lynx.tasm.service.ILynxMemoryMonitorService.dumpMemoryAllocationReport(boolean isBaselineDump, JSONObject payload);
}

public interface com::lynx::tasm::service::ILynxMonitorService {
  public default Class<? extends IServiceProvider > com.lynx.tasm.service.ILynxMonitorService.getServiceClass();
  public void com.lynx.tasm.service.ILynxMonitorService.reportTrailEvent(@NonNull String eventName, @NonNull JSONObject data);
  public void com.lynx.tasm.service.ILynxMonitorService.reportImageStatus(@NonNull String eventName, @NonNull JSONObject data);
  public void com.lynx.tasm.service.ILynxMonitorService.formatEventReporter(@Nullable LynxView view, @NonNull String eventName, @NonNull JSONObject data, @Nullable JSONObject metrics, @Nullable JSONObject category);
  public void com.lynx.tasm.service.ILynxMonitorService.reportResourceStatus(@NonNull LynxView view, @NonNull String eventName, @NonNull JSONObject data, @Nullable JSONObject extra);
  public void com.lynx.tasm.service.ILynxMonitorService.reportCrashGlobalContextTag(@NonNull String tagName, @NonNull String tagValue);
  public void com.lynx.tasm.service.ILynxMonitorService.reportImageInfo(@NonNull LynxImageInfo imageInfo);
}

public interface com::lynx::tasm::provider::ILynxResourceRequestOperation {
  public void com.lynx.tasm.provider.ILynxResourceRequestOperation.cancel();
}

public interface com::lynx::tasm::provider::ILynxResourceResponseDataInfo {
  public Boolean com.lynx.tasm.provider.ILynxResourceResponseDataInfo.isSucceed();
  public byte[] com.lynx.tasm.provider.ILynxResourceResponseDataInfo.provideBytes();
  public InputStream com.lynx.tasm.provider.ILynxResourceResponseDataInfo.provideInputStream();
  public Object com.lynx.tasm.provider.ILynxResourceResponseDataInfo.getImage();
  public String com.lynx.tasm.provider.ILynxResourceResponseDataInfo.getFilePath();
  public String com.lynx.tasm.provider.ILynxResourceResponseDataInfo.getDataType();
  public String com.lynx.tasm.provider.ILynxResourceResponseDataInfo.getFrom();
}

public interface com::lynx::tasm::service::ILynxResourceService {
  public int com.lynx.tasm.service.ILynxResourceService.RESULT_EXCEPTION RESULT_EXCEPTION;
  public int com.lynx.tasm.service.ILynxResourceService.RESULT_IS_NOT_LOCAL_RESOURCE RESULT_IS_NOT_LOCAL_RESOURCE;
  public int com.lynx.tasm.service.ILynxResourceService.RESULT_IS_LOCAL_RESOURCE RESULT_IS_LOCAL_RESOURCE;
  public int com.lynx.tasm.service.ILynxResourceService.RESULT_EMPTY_URL RESULT_EMPTY_URL;
  public int com.lynx.tasm.service.ILynxResourceService.RESULT_INVALID_URL RESULT_INVALID_URL;
  public default Class<? extends IServiceProvider > com.lynx.tasm.service.ILynxResourceService.getServiceClass();
  public boolean com.lynx.tasm.service.ILynxResourceService.isReady();
  public int com.lynx.tasm.service.ILynxResourceService.isLocalResource(@Nullable String url);
  public void com.lynx.tasm.service.ILynxResourceService.preloadMedia(String url, String preloadKey, @Nullable String videoID, long size);
  public void com.lynx.tasm.service.ILynxResourceService.cancelPreloadMedia(String preloadKey, @Nullable String videoID);
  public void com.lynx.tasm.service.ILynxResourceService.addResourceLoader(@NonNull Object loader, @NonNull String templateUrl);
  public ILynxResourceServiceRequestOperation com.lynx.tasm.service.ILynxResourceService.fetchResourceAsync(@Nullable String url, @NonNull LynxResourceServiceRequestParams lynxResourceServiceRequestParams, @NonNull final LynxResourceServiceCallback callback);
  public ILynxResourceServiceResponse com.lynx.tasm.service.ILynxResourceService.fetchResourceSync(@Nullable String url, @NonNull LynxResourceServiceRequestParams lynxResourceServiceRequestParams);
}

public interface com::lynx::tasm::service::ILynxResourceServiceRequestOperation {
  public ILynxResourceServiceResponse com.lynx.tasm.service.ILynxResourceServiceRequestOperation.execute();
  public void com.lynx.tasm.service.ILynxResourceServiceRequestOperation.cancel();
}

public interface com::lynx::tasm::service::ILynxResourceServiceResponse {
  public Boolean com.lynx.tasm.service.ILynxResourceServiceResponse.isSucceed();
  public String com.lynx.tasm.service.ILynxResourceServiceResponse.getFilePath();
  public String com.lynx.tasm.service.ILynxResourceServiceResponse.getFrom();
  public String com.lynx.tasm.service.ILynxResourceServiceResponse.getOriginFrom();
  public Boolean com.lynx.tasm.service.ILynxResourceServiceResponse.isCache();
  public Long com.lynx.tasm.service.ILynxResourceServiceResponse.getVersion();
  public String com.lynx.tasm.service.ILynxResourceServiceResponse.getSuccessFetcher();
  public Boolean com.lynx.tasm.service.ILynxResourceServiceResponse.isCanceled();
  public Boolean com.lynx.tasm.service.ILynxResourceServiceResponse.isPreloaded();
  public Boolean com.lynx.tasm.service.ILynxResourceServiceResponse.isRequestReused();
  public Map< String, Long > com.lynx.tasm.service.ILynxResourceServiceResponse.getPerformanceInfo();
  public InputStream com.lynx.tasm.service.ILynxResourceServiceResponse.provideInputStream();
  public byte[] com.lynx.tasm.service.ILynxResourceServiceResponse.provideBytes();
  public File com.lynx.tasm.service.ILynxResourceServiceResponse.provideFile();
  public String com.lynx.tasm.service.ILynxResourceServiceResponse.getDataType();
  public String com.lynx.tasm.service.ILynxResourceServiceResponse.getSourceType();
  public String com.lynx.tasm.service.ILynxResourceServiceResponse.getErrorInfoString();
  public Integer com.lynx.tasm.service.ILynxResourceServiceResponse.getErrorCode();
  public String com.lynx.tasm.service.ILynxResourceServiceResponse.getCharset();
  public Object com.lynx.tasm.service.ILynxResourceServiceResponse.getImage();
  public Boolean com.lynx.tasm.service.ILynxResourceServiceResponse.getHasBeenPaused();
  public Boolean com.lynx.tasm.service.ILynxResourceServiceResponse.getIsDataTypeEmpty();
}

public interface com::lynx::tasm::service::security::ILynxSecurityService {
  public default Class<? extends IServiceProvider > com.lynx.tasm.service.security.ILynxSecurityService.getServiceClass();
  public SecurityResult com.lynx.tasm.service.security.ILynxSecurityService.verifyTASM(LynxView lynxView, byte[] template, String url, LynxTasmType type);
}

public interface com::lynx::tasm::service::ILynxSystemInvokeService {
  public default Class<? extends IServiceProvider > com.lynx.tasm.service.ILynxSystemInvokeService.getServiceClass();
  public void com.lynx.tasm.service.ILynxSystemInvokeService.setPrimaryClip(@NonNull ClipData clip);
  public Camera com.lynx.tasm.service.ILynxSystemInvokeService.openCamera(int cameraId);
  public void com.lynx.tasm.service.ILynxSystemInvokeService.releaseCamera(Camera camera);
  public String com.lynx.tasm.service.ILynxSystemInvokeService.extractMetadata(MediaMetadataRetriever retriever, int keyCode);
  public boolean com.lynx.tasm.service.ILynxSystemInvokeService.registerSensorListener(SensorManager manager, SensorEventListener listener, Sensor sensor, int samplingPeriodUs);
  public void com.lynx.tasm.service.ILynxSystemInvokeService.unregisterSensorListener(SensorManager manager, SensorEventListener listener);
  public Bitmap com.lynx.tasm.service.ILynxSystemInvokeService.takeScreenshot(View view, Bitmap.Config config);
  public String com.lynx.tasm.service.ILynxSystemInvokeService.getLocale();
}

public interface com::lynx::tasm::service::ILynxTrailService {
  public default Class<? extends IServiceProvider > com.lynx.tasm.service.ILynxTrailService.getServiceClass();
  public void com.lynx.tasm.service.ILynxTrailService.initialize(Context context);
  public String com.lynx.tasm.service.ILynxTrailService.stringValueForTrailKey(@NonNull String key);
  public Object com.lynx.tasm.service.ILynxTrailService.objectValueForTrailKey(@NonNull String key);
  public Map< String, Object > com.lynx.tasm.service.ILynxTrailService.getAllValues();
  public void com.lynx.tasm.service.ILynxTrailService.parseLynxViewBuilder(@NonNull LynxViewBuilder builder);
}

public interface com::lynx::tasm::behavior::ILynxUIRenderer {
  public void com.lynx.tasm.behavior.ILynxUIRenderer.onInitBodyView(UIBodyView bodyView, Context context, LynxGroup group);
  public void com.lynx.tasm.behavior.ILynxUIRenderer.onInitLynxTemplateRender(LynxContext context, BehaviorRegistry behaviorRegistry, @Nullable UIBodyView body, @Nullable LynxBooleanOption longTaskMonitorEnabled);
  public void com.lynx.tasm.behavior.ILynxUIRenderer.onCreateTemplateRenderer(LynxContext context, LynxPageLoadListener pageLoadListener, ThreadStrategyForRendering threadStrategy, BehaviorRegistry behaviorRegistry, LayoutTick layoutTick);
  public void com.lynx.tasm.behavior.ILynxUIRenderer.attachBodyView(UIBodyView bodyView, LynxContext lynxContext, Context context);
  public void com.lynx.tasm.behavior.ILynxUIRenderer.attachNativeFacade(NativeFacade nativeFacade);
  public void com.lynx.tasm.behavior.ILynxUIRenderer.onReloadAndInitUIThreadPart();
  public void com.lynx.tasm.behavior.ILynxUIRenderer.onReloadAndInitAnyThreadPart();
  public long com.lynx.tasm.behavior.ILynxUIRenderer.getUIDelegatePtr();
  public DisplayMetrics com.lynx.tasm.behavior.ILynxUIRenderer.getScreenMetrics();
  public void com.lynx.tasm.behavior.ILynxUIRenderer.onPageConfigDecoded(PageConfig config);
  public void com.lynx.tasm.behavior.ILynxUIRenderer.onEnterForeground();
  public void com.lynx.tasm.behavior.ILynxUIRenderer.onEnterBackground();
  public void com.lynx.tasm.behavior.ILynxUIRenderer.onDestroyTemplateRenderer();
  public void com.lynx.tasm.behavior.ILynxUIRenderer.onDestroy();
  public LynxUIOwner com.lynx.tasm.behavior.ILynxUIRenderer.lynxUIOwner();
  public UIGroup< UIBody.UIBodyView > com.lynx.tasm.behavior.ILynxUIRenderer.getLynxRootUI();
  public void com.lynx.tasm.behavior.ILynxUIRenderer.pauseRootLayoutAnimation();
  public void com.lynx.tasm.behavior.ILynxUIRenderer.resumeRootLayoutAnimation();
  public void com.lynx.tasm.behavior.ILynxUIRenderer.onAttach();
  public void com.lynx.tasm.behavior.ILynxUIRenderer.onDetach();
  public void com.lynx.tasm.behavior.ILynxUIRenderer.onEnterForegroundInternal();
  public void com.lynx.tasm.behavior.ILynxUIRenderer.onEnterBackgroundInternal();
  public void com.lynx.tasm.behavior.ILynxUIRenderer.setContextFree(boolean isContextFree);
  public void com.lynx.tasm.behavior.ILynxUIRenderer.setFirstLayout();
  public LynxBaseUI com.lynx.tasm.behavior.ILynxUIRenderer.findLynxUIByName(@NonNull String name);
  public LynxBaseUI com.lynx.tasm.behavior.ILynxUIRenderer.findLynxUIByIdSelector(@NonNull String id);
  public LynxBaseUI com.lynx.tasm.behavior.ILynxUIRenderer.findLynxUIByIndex(@NonNull int index);
  public boolean com.lynx.tasm.behavior.ILynxUIRenderer.onTouchEvent(MotionEvent ev, UIGroup rootUi);
  public boolean com.lynx.tasm.behavior.ILynxUIRenderer.consumeSlideEvent(MotionEvent ev);
  public boolean com.lynx.tasm.behavior.ILynxUIRenderer.blockNativeEvent(MotionEvent ev);
  public ThreadStrategyForRendering com.lynx.tasm.behavior.ILynxUIRenderer.getSupportedThreadStrategy(ThreadStrategyForRendering threadStrategy);
  public void com.lynx.tasm.behavior.ILynxUIRenderer.performInnerMeasure(int widthMeasureSpec, int heightMeasureSpec);
  public void com.lynx.tasm.behavior.ILynxUIRenderer.onLayout(boolean changed, int left, int top, int right, int bottom);
  public boolean com.lynx.tasm.behavior.ILynxUIRenderer.useInvokeUIMethod();
  public boolean com.lynx.tasm.behavior.ILynxUIRenderer.isAccessibilityDisabled();
  public boolean com.lynx.tasm.behavior.ILynxUIRenderer.enableTimingCollector();
  public boolean com.lynx.tasm.behavior.ILynxUIRenderer.shouldInvokeNativeViewMethod();
  public boolean com.lynx.tasm.behavior.ILynxUIRenderer.disableBindDrawChildHook();
  public boolean com.lynx.tasm.behavior.ILynxUIRenderer.needHandleDispatchKeyEvent();
  public boolean com.lynx.tasm.behavior.ILynxUIRenderer.dispatchKeyEvent(KeyEvent event);
  public void com.lynx.tasm.behavior.ILynxUIRenderer.scrollIntoViewFromUI(int nodeId);
  public String com.lynx.tasm.behavior.ILynxUIRenderer.getActualScreenshotMode();
  public void com.lynx.tasm.behavior.ILynxUIRenderer.takeScreenshot(ScreenshotBitmapHandler handler, String screenShotMode);
  public Bitmap com.lynx.tasm.behavior.ILynxUIRenderer.getBitmapOfView();
  public int com.lynx.tasm.behavior.ILynxUIRenderer.getNodeForLocation(float x, float y, String mode);
  public float[] com.lynx.tasm.behavior.ILynxUIRenderer.getTransformValue(int sign, float[] padBorderMarginLayout);
}

public interface com::lynx::tasm::ILynxViewStateListener {
  public void com.lynx.tasm.ILynxViewStateListener.onLoadFinished();
  public void com.lynx.tasm.ILynxViewStateListener.onEnterForeground();
  public void com.lynx.tasm.ILynxViewStateListener.onEnterBackground();
  public void com.lynx.tasm.ILynxViewStateListener.onDestroy();
}

public class com::lynx::tasm::image::model::ImageBlurPostProcessor : com.lynx.tasm.image.model.BitmapPostProcessor {
  public com.lynx.tasm.image.model.ImageBlurPostProcessor.ImageBlurPostProcessor(int blurRadius);
  public void com.lynx.tasm.image.model.ImageBlurPostProcessor.process(Bitmap sourceBitmap, Bitmap dstBitmap);
  public String com.lynx.tasm.image.model.ImageBlurPostProcessor.getName();
  public String com.lynx.tasm.image.model.ImageBlurPostProcessor.getPostprocessorCacheKey();
}

public class com::lynx::tasm::image::ImageContent :  {
  public com.lynx.tasm.image.ImageContent.ImageContent(@NonNull Bitmap bitmap);
  public com.lynx.tasm.image.ImageContent.ImageContent(@NonNull Drawable drawable);
  public int com.lynx.tasm.image.ImageContent.getIntrinsicWidth();
  public int com.lynx.tasm.image.ImageContent.getIntrinsicHeight();
  public void com.lynx.tasm.image.ImageContent.setBounds(@androidx.annotation.NonNull Rect bounds);
  public void com.lynx.tasm.image.ImageContent.setBounds(int left, int top, int right, int bottom);
  public void com.lynx.tasm.image.ImageContent.draw(Canvas canvas);
  public final Bitmap com.lynx.tasm.image.ImageContent.getBitmap();
  public Drawable com.lynx.tasm.image.ImageContent.getDrawable();
  public void com.lynx.tasm.image.ImageContent.setAlpha(int alpha);
  public int com.lynx.tasm.image.ImageContent.getOpacity();
  public void com.lynx.tasm.image.ImageContent.setColorFilter(ColorFilter colorFilter);
  public final void com.lynx.tasm.image.ImageContent.setCallback(Drawable.Callback cb);
  public void com.lynx.tasm.image.ImageContent.setFilterBitmap(boolean filter);
}

public class com::lynx::tasm::image::ImageErrorCodeUtils :  {
  public final String com.lynx.tasm.image.ImageErrorCodeUtils.LYNX_IMAGE_ERROR_CODE_KEY LYNX_IMAGE_ERROR_CODE_KEY;
  public final String com.lynx.tasm.image.ImageErrorCodeUtils.LYNX_IMAGE_CATEGORIZED_CODE_KEY LYNX_IMAGE_CATEGORIZED_CODE_KEY;
  public final int com.lynx.tasm.image.ImageErrorCodeUtils.LYNX_IMAGE_UNKNOWN_EXCEPTION LYNX_IMAGE_UNKNOWN_EXCEPTION;
  public final int com.lynx.tasm.image.ImageErrorCodeUtils.LYNX_IMAGE_USER_OR_DESIGN_INTERVAL_START LYNX_IMAGE_USER_OR_DESIGN_INTERVAL_START;
  public final int com.lynx.tasm.image.ImageErrorCodeUtils.LYNX_IMAGE_USER_OR_DESIGN_INTERVAL_END LYNX_IMAGE_USER_OR_DESIGN_INTERVAL_END;
  public final int com.lynx.tasm.image.ImageErrorCodeUtils.LYNX_IMAGE_STATUS_CANCEL LYNX_IMAGE_STATUS_CANCEL;
  public final int com.lynx.tasm.image.ImageErrorCodeUtils.LYNX_IMAGE_NETWORK_NOT_AVAILABLE LYNX_IMAGE_NETWORK_NOT_AVAILABLE;
  public final int com.lynx.tasm.image.ImageErrorCodeUtils.LYNX_IMAGE_TTNET_INTERVAL_START LYNX_IMAGE_TTNET_INTERVAL_START;
  public final int com.lynx.tasm.image.ImageErrorCodeUtils.LYNX_IMAGE_TTNET_INTERVAL_END LYNX_IMAGE_TTNET_INTERVAL_END;
  public final int com.lynx.tasm.image.ImageErrorCodeUtils.LYNX_IMAGE_CONNECT_TIMEOUT_EXCEPTION LYNX_IMAGE_CONNECT_TIMEOUT_EXCEPTION;
  public final int com.lynx.tasm.image.ImageErrorCodeUtils.LYNX_IMAGE_SOCKET_TIMEOUT_EXCEPTION LYNX_IMAGE_SOCKET_TIMEOUT_EXCEPTION;
  public final int com.lynx.tasm.image.ImageErrorCodeUtils.LYNX_IMAGE_CONNECT_EXCEPTION LYNX_IMAGE_CONNECT_EXCEPTION;
  public final int com.lynx.tasm.image.ImageErrorCodeUtils.LYNX_IMAGE_BIND_EXCEPTION LYNX_IMAGE_BIND_EXCEPTION;
  public final int com.lynx.tasm.image.ImageErrorCodeUtils.LYNX_IMAGE_NO_ROUTE_TO_HOST_EXCEPTION LYNX_IMAGE_NO_ROUTE_TO_HOST_EXCEPTION;
  public final int com.lynx.tasm.image.ImageErrorCodeUtils.LYNX_IMAGE_PORT_UNREACHABLE_EXCEPTION LYNX_IMAGE_PORT_UNREACHABLE_EXCEPTION;
  public final int com.lynx.tasm.image.ImageErrorCodeUtils.LYNX_IMAGE_UNKNOWN_HOST_EXCEPTION LYNX_IMAGE_UNKNOWN_HOST_EXCEPTION;
  public final int com.lynx.tasm.image.ImageErrorCodeUtils.LYNX_IMAGE_SOCKET_EXCEPTION LYNX_IMAGE_SOCKET_EXCEPTION;
  public final int com.lynx.tasm.image.ImageErrorCodeUtils.LYNX_IMAGE_PIC_SOURCE_INTERVAL_START LYNX_IMAGE_PIC_SOURCE_INTERVAL_START;
  public final int com.lynx.tasm.image.ImageErrorCodeUtils.LYNX_IMAGE_PIC_SOURCE_INTERVAL_END LYNX_IMAGE_PIC_SOURCE_INTERVAL_END;
  public final int com.lynx.tasm.image.ImageErrorCodeUtils.LYNX_IMAGE_DECODE_ARGUMENT_EXCEPTION LYNX_IMAGE_DECODE_ARGUMENT_EXCEPTION;
  public final int com.lynx.tasm.image.ImageErrorCodeUtils.LYNX_IMAGE_DECODE_STATE_EXCEPTION LYNX_IMAGE_DECODE_STATE_EXCEPTION;
  public final int com.lynx.tasm.image.ImageErrorCodeUtils.LYNX_IMAGE_DECODE_RUNTIME_EXCEPTION LYNX_IMAGE_DECODE_RUNTIME_EXCEPTION;
  public final int com.lynx.tasm.image.ImageErrorCodeUtils.LYNX_IMAGE_THREAD_INTERRUPTED_EXCEPTION LYNX_IMAGE_THREAD_INTERRUPTED_EXCEPTION;
  public final int com.lynx.tasm.image.ImageErrorCodeUtils.LYNX_IMAGE_FILE_NOT_FOUND_EXCEPTION LYNX_IMAGE_FILE_NOT_FOUND_EXCEPTION;
  public final int com.lynx.tasm.image.ImageErrorCodeUtils.LYNX_IMAGE_IO_EXCEPTION LYNX_IMAGE_IO_EXCEPTION;
  public static int com.lynx.tasm.image.ImageErrorCodeUtils.checkImageException(Throwable throwable);
  public static int com.lynx.tasm.image.ImageErrorCodeUtils.checkImageExceptionCategory(int errorCode);
}

public class com::lynx::tasm::image::model::ImageInfo :  {
  public com.lynx.tasm.image.model.ImageInfo.ImageInfo(int width, int height, boolean isAnim);
  public int com.lynx.tasm.image.model.ImageInfo.getWidth();
  public int com.lynx.tasm.image.model.ImageInfo.getHeight();
  public boolean com.lynx.tasm.image.model.ImageInfo.isAnim();
}

public interface com::lynx::tasm::behavior::ImageInterceptor {
  public String com.lynx.tasm.behavior.ImageInterceptor.shouldRedirectImageUrl(String url);
  public void com.lynx.tasm.behavior.ImageInterceptor.loadImage(@NonNull Context context, @Nullable String cacheKey, @Nullable String src, float width, float height, final @Nullable Transformer transformer, @NonNull final CompletionHandler handler);
}

public interface com::lynx::tasm::image::model::ImageLoadListener {
  public void com.lynx.tasm.image.model.ImageLoadListener.onRequestSubmit(ImageRequestInfo imageRequestInfo);
  public void com.lynx.tasm.image.model.ImageLoadListener.onSuccess( @Nullable ImageContent imageContent, ImageRequestInfo requestInfo, ImageInfo imageInfo);
  public void com.lynx.tasm.image.model.ImageLoadListener.onFailure(int errorCode, Throwable throwable);
  public void com.lynx.tasm.image.model.ImageLoadListener.onImageMonitorInfo(JSONObject monitorInfo);
}

public class com::lynx::tasm::image::model::ImageRequestInfo :  {
  public String com.lynx.tasm.image.model.ImageRequestInfo.getUrl();
  public int com.lynx.tasm.image.model.ImageRequestInfo.getResizeWidth();
  public int com.lynx.tasm.image.model.ImageRequestInfo.getResizeHeight();
  public int com.lynx.tasm.image.model.ImageRequestInfo.getLoopCount();
  public Bitmap.Config com.lynx.tasm.image.model.ImageRequestInfo.getConfig();
  public boolean com.lynx.tasm.image.model.ImageRequestInfo.isEnableGifLiteDecoder();
  public Map< String, String > com.lynx.tasm.image.model.ImageRequestInfo.getCustomParam();
  public int com.lynx.tasm.image.model.ImageRequestInfo.getCacheChoice();
  public List< BitmapPostProcessor > com.lynx.tasm.image.model.ImageRequestInfo.getProcessors();
  public boolean com.lynx.tasm.image.model.ImageRequestInfo.isEnableResourceHint();
  public boolean com.lynx.tasm.image.model.ImageRequestInfo.isEnableDownSampling();
  public boolean com.lynx.tasm.image.model.ImageRequestInfo.isUseLocalCache();
  public boolean com.lynx.tasm.image.model.ImageRequestInfo.isForceStaticImage();
  public Integer com.lynx.tasm.image.model.ImageRequestInfo.getDiskCacheChoice();
  public boolean com.lynx.tasm.image.model.ImageRequestInfo.isEnableAsyncRequest();
  public Object com.lynx.tasm.image.model.ImageRequestInfo.getCallerContext();
  public boolean com.lynx.tasm.image.model.ImageRequestInfo.isAutoPlay();
  public boolean com.lynx.tasm.image.model.ImageRequestInfo.equals(Object o);
  public int com.lynx.tasm.image.model.ImageRequestInfo.hashCode();
}

public class com::lynx::tasm::image::model::ImageRequestInfoBuilder :  {
  public static ImageRequestInfoBuilder com.lynx.tasm.image.model.ImageRequestInfoBuilder.newBuilderWithSource(String url);
  public boolean com.lynx.tasm.image.model.ImageRequestInfoBuilder.isEnableDownSampling();
  public ImageRequestInfoBuilder com.lynx.tasm.image.model.ImageRequestInfoBuilder.setEnableDownSampling(boolean mEnableDownSampling);
  public boolean com.lynx.tasm.image.model.ImageRequestInfoBuilder.isEnableAnimationAutoPlay();
  public ImageRequestInfoBuilder com.lynx.tasm.image.model.ImageRequestInfoBuilder.setEnableAnimationAutoPlay(boolean mEnableAnimationAutoPlay);
  public ImageRequestInfoBuilder com.lynx.tasm.image.model.ImageRequestInfoBuilder.setUrl(String url);
  public ImageRequestInfoBuilder com.lynx.tasm.image.model.ImageRequestInfoBuilder.setResizeWidth(int width);
  public ImageRequestInfoBuilder com.lynx.tasm.image.model.ImageRequestInfoBuilder.setResizeHeight(int height);
  public void com.lynx.tasm.image.model.ImageRequestInfoBuilder.setCustomParam(Map< String, String > customParam);
  public ImageRequestInfoBuilder com.lynx.tasm.image.model.ImageRequestInfoBuilder.setLoopCount(int loopCount);
  public ImageRequestInfoBuilder com.lynx.tasm.image.model.ImageRequestInfoBuilder.setBitmapConfig(Bitmap.Config config);
  public ImageRequestInfoBuilder com.lynx.tasm.image.model.ImageRequestInfoBuilder.setEnableGifLiteDecoder(boolean enableGifLiteDecoder);
  public ImageRequestInfoBuilder com.lynx.tasm.image.model.ImageRequestInfoBuilder.setCacheChoice(@CacheChoice int cacheChoice);
  public ImageRequestInfoBuilder com.lynx.tasm.image.model.ImageRequestInfoBuilder.setBitmapPostProcessor(List< BitmapPostProcessor > postProcessors);
  public ImageRequestInfoBuilder com.lynx.tasm.image.model.ImageRequestInfoBuilder.setEnableResourceHint(boolean enable);
  public ImageRequestInfoBuilder com.lynx.tasm.image.model.ImageRequestInfoBuilder.setUseLocalCache(boolean enable);
  public Object com.lynx.tasm.image.model.ImageRequestInfoBuilder.getCallerContext();
  public ImageRequestInfoBuilder com.lynx.tasm.image.model.ImageRequestInfoBuilder.setCallerContext(Object callerContext);
  public Integer com.lynx.tasm.image.model.ImageRequestInfoBuilder.getDiskCacheChoice();
  public void com.lynx.tasm.image.model.ImageRequestInfoBuilder.setDiskCacheChoice(@DiskCacheChoice Integer diskCacheChoice);
  public String com.lynx.tasm.image.model.ImageRequestInfoBuilder.getUrl();
  public int com.lynx.tasm.image.model.ImageRequestInfoBuilder.getResizeWidth();
  public int com.lynx.tasm.image.model.ImageRequestInfoBuilder.getResizeHeight();
  public int com.lynx.tasm.image.model.ImageRequestInfoBuilder.getLoopCount();
  public Bitmap.Config com.lynx.tasm.image.model.ImageRequestInfoBuilder.getConfig();
  public boolean com.lynx.tasm.image.model.ImageRequestInfoBuilder.enableGifLiteDecoder();
  public Map< String, String > com.lynx.tasm.image.model.ImageRequestInfoBuilder.getCustomParam();
  public boolean com.lynx.tasm.image.model.ImageRequestInfoBuilder.isEnableAsyncRequest();
  public boolean com.lynx.tasm.image.model.ImageRequestInfoBuilder.isEnableResourceHint();
  public boolean com.lynx.tasm.image.model.ImageRequestInfoBuilder.isUseLocalCache();
  public ImageRequestInfoBuilder com.lynx.tasm.image.model.ImageRequestInfoBuilder.setEnableAsyncRequest(boolean mEnableAsyncRequest);
  public boolean com.lynx.tasm.image.model.ImageRequestInfoBuilder.isForceStaticImage();
  public ImageRequestInfoBuilder com.lynx.tasm.image.model.ImageRequestInfoBuilder.setForceStaticImage(boolean forceStaticImage);
  public int com.lynx.tasm.image.model.ImageRequestInfoBuilder.getCacheChoice();
  public List< BitmapPostProcessor > com.lynx.tasm.image.model.ImageRequestInfoBuilder.getProcessors();
  public ImageRequestInfo com.lynx.tasm.image.model.ImageRequestInfoBuilder.build();
}

public class com::lynx::tasm::behavior::ui::image::ImageUrlRedirectUtils :  {
  public static String com.lynx.tasm.behavior.ui.image.ImageUrlRedirectUtils.redirectUrl(Context context, String originUrl);
  public static String com.lynx.tasm.behavior.ui.image.ImageUrlRedirectUtils.asyncRedirectUrl(LynxContext context, String originUrl);
  public static void com.lynx.tasm.behavior.ui.image.ImageUrlRedirectUtils.loadImage(@NonNull Context context, String cacheKey, @NonNull String src, float width, float height, final Transformer transformer, @NonNull final ImageInterceptor.CompletionHandler handler);
}

public class com::lynx::tasm::image::ImageUtils :  {
  public static LocalCacheState com.lynx.tasm.image.ImageUtils.parseLocalCache(Dynamic localCache);
}

public interface com::lynx::tasm::performance::memory::IMemoryMonitor {
  public void com.lynx.tasm.performance.memory.IMemoryMonitor.allocateMemory(IMemoryRecordBuilder builder);
  public void com.lynx.tasm.performance.memory.IMemoryMonitor.deallocateMemory(IMemoryRecordBuilder builder);
  public void com.lynx.tasm.performance.memory.IMemoryMonitor.updateMemoryUsage(IMemoryRecordBuilder builder);
}

public interface com::lynx::tasm::performance::memory::IMemoryRecordBuilder {
  public MemoryRecord com.lynx.tasm.performance.memory.IMemoryRecordBuilder.build();
}

public interface com::lynx::tasm::INativeLibraryLoader {
  public void com.lynx.tasm.INativeLibraryLoader.loadLibrary(String libName);
}

public class com::lynx::tasm::performance::performanceobserver::InitBackgroundRuntimeEntry : com.lynx.tasm.performance.performanceobserver.PerformanceEntry {
  public double com.lynx.tasm.performance.performanceobserver.InitBackgroundRuntimeEntry.loadCoreStart loadCoreStart;
  public double com.lynx.tasm.performance.performanceobserver.InitBackgroundRuntimeEntry.loadCoreEnd loadCoreEnd;
  public com.lynx.tasm.performance.performanceobserver.InitBackgroundRuntimeEntry.InitBackgroundRuntimeEntry(HashMap< String, Object > props);
}

public class com::lynx::tasm::performance::performanceobserver::InitContainerEntry : com.lynx.tasm.performance.performanceobserver.PerformanceEntry {
  public double com.lynx.tasm.performance.performanceobserver.InitContainerEntry.openTime openTime;
  public double com.lynx.tasm.performance.performanceobserver.InitContainerEntry.containerInitStart containerInitStart;
  public double com.lynx.tasm.performance.performanceobserver.InitContainerEntry.containerInitEnd containerInitEnd;
  public double com.lynx.tasm.performance.performanceobserver.InitContainerEntry.prepareTemplateStart prepareTemplateStart;
  public double com.lynx.tasm.performance.performanceobserver.InitContainerEntry.prepareTemplateEnd prepareTemplateEnd;
  public HashMap<String, Double> com.lynx.tasm.performance.performanceobserver.InitContainerEntry.extraTiming extraTiming;
  public com.lynx.tasm.performance.performanceobserver.InitContainerEntry.InitContainerEntry(HashMap< String, Object > props);
}

public interface com::lynx::tasm::LynxEnv::Initializer {
  public void com.lynx.tasm.LynxEnv.Initializer.init();
}

public interface com::lynx::tasm::LynxEnvLazyInitializer::Initializer {
  public void com.lynx.tasm.LynxEnvLazyInitializer.Initializer.init();
}

public class com::lynx::tasm::performance::performanceobserver::InitLynxviewEntry : com.lynx.tasm.performance.performanceobserver.PerformanceEntry {
  public double com.lynx.tasm.performance.performanceobserver.InitLynxviewEntry.createLynxStart createLynxStart;
  public double com.lynx.tasm.performance.performanceobserver.InitLynxviewEntry.createLynxEnd createLynxEnd;
  public com.lynx.tasm.performance.performanceobserver.InitLynxviewEntry.InitLynxviewEntry(HashMap< String, Object > props);
}

public class com::lynx::tasm::behavior::ui::image::InlineImageShadowNode : com.lynx.tasm.behavior.shadow.text.AbsInlineImageShadowNode {
  public com.lynx.tasm.behavior.ui.image.InlineImageShadowNode.InlineImageShadowNode();
  public void com.lynx.tasm.behavior.ui.image.InlineImageShadowNode.setContext(LynxContext context);
  public void com.lynx.tasm.behavior.ui.image.InlineImageShadowNode.setSource(@Nullable String source);
  public void com.lynx.tasm.behavior.ui.image.InlineImageShadowNode.setMode(String mode);
  public AbsInlineImageSpan com.lynx.tasm.behavior.ui.image.InlineImageShadowNode.generateInlineImageSpan();
  public void com.lynx.tasm.behavior.ui.image.InlineImageShadowNode.onAfterUpdateTransaction();
}

public class com::lynx::tasm::behavior::ui::image::InlineImageSpan : com.lynx.tasm.behavior.ui.text.AbsInlineImageSpan {
  public com.lynx.tasm.behavior.ui.image.InlineImageSpan.InlineImageSpan(int width, int height, int[] margins, LynxImageManager lynxImageManager);
  public com.lynx.tasm.behavior.ui.image.InlineImageSpan.InlineImageSpan(int width, int height, int[] margins);
  public void com.lynx.tasm.behavior.ui.image.InlineImageSpan.setImageManager(LynxImageManager lynxImageManager);
  public void com.lynx.tasm.behavior.ui.image.InlineImageSpan.setCallback(Drawable.Callback callback);
  public Drawable com.lynx.tasm.behavior.ui.image.InlineImageSpan.getDrawable();
  public void com.lynx.tasm.behavior.ui.image.InlineImageSpan.onDetachedFromWindow();
  public void com.lynx.tasm.behavior.ui.image.InlineImageSpan.onStartTemporaryDetach();
  public void com.lynx.tasm.behavior.ui.image.InlineImageSpan.onAttachedToWindow();
  public void com.lynx.tasm.behavior.ui.image.InlineImageSpan.onFinishTemporaryDetach();
  public void com.lynx.tasm.behavior.ui.image.InlineImageSpan.draw(Canvas canvas, CharSequence text, int start, int end, float x, int top, int y, int bottom, Paint paint);
}

public class com::lynx::tasm::behavior::shadow::text::InlineTextBaselineShiftSpan : MetricAffectingSpan {
  public void com.lynx.tasm.behavior.shadow.text.InlineTextBaselineShiftSpan.setVerticalAlign(int valign, float length);
  public int com.lynx.tasm.behavior.shadow.text.InlineTextBaselineShiftSpan.getVerticalAlign();
  public void com.lynx.tasm.behavior.shadow.text.InlineTextBaselineShiftSpan.setBaselineShiftCalculator(BaselineShiftCalculator baselineShiftCalculator);
  public void com.lynx.tasm.behavior.shadow.text.InlineTextBaselineShiftSpan.setLineHeight(float lineHeight);
  public void com.lynx.tasm.behavior.shadow.text.InlineTextBaselineShiftSpan.updateMeasureState(@NonNull TextPaint textPaint);
  public void com.lynx.tasm.behavior.shadow.text.InlineTextBaselineShiftSpan.updateDrawState(TextPaint tp);
}

public class com::lynx::tasm::behavior::shadow::text::InlineTextShadowNode : com.lynx.tasm.behavior.shadow.text.BaseTextShadowNode {
  public void com.lynx.tasm.behavior.shadow.text.InlineTextShadowNode.setContext(LynxContext context);
  public void com.lynx.tasm.behavior.shadow.text.InlineTextShadowNode.setBackgroundColor(int bgColor);
  public void com.lynx.tasm.behavior.shadow.text.InlineTextShadowNode.setVerticalAlign(@Nullable ReadableArray array);
  public void com.lynx.tasm.behavior.shadow.text.InlineTextShadowNode.setBackgroundImage(@Nullable ReadableArray bgImage);
  public void com.lynx.tasm.behavior.shadow.text.InlineTextShadowNode.setBackgroundSize(@Nullable ReadableArray bgSize);
  public void com.lynx.tasm.behavior.shadow.text.InlineTextShadowNode.setBackgroundRepeat(@Nullable ReadableArray bgImgRepeat);
  public void com.lynx.tasm.behavior.shadow.text.InlineTextShadowNode.setBackgroundPosition(@Nullable ReadableArray bgImgPosition);
  public void com.lynx.tasm.behavior.shadow.text.InlineTextShadowNode.setBorderRadius(int index, @Nullable ReadableArray ra);
  public void com.lynx.tasm.behavior.shadow.text.InlineTextShadowNode.setTextAlign(int textAlign);
  public boolean com.lynx.tasm.behavior.shadow.text.InlineTextShadowNode.isVirtual();
}

public class com::lynx::tasm::behavior::shadow::text::InlineTruncationShadowNode : com.lynx.tasm.behavior.shadow.text.BaseTextShadowNode {
  public final String com.lynx.tasm.behavior.shadow.text.InlineTruncationShadowNode.TAG_NAME TAG_NAME;
  public boolean com.lynx.tasm.behavior.shadow.text.InlineTruncationShadowNode.isVirtual();
}

public class com::lynx::tasm::behavior::shadow::NativeLayoutNodeRef::InlineViewEventSpan : com.lynx.tasm.behavior.shadow.text.EventTargetSpan {
  public com.lynx.tasm.behavior.shadow.NativeLayoutNodeRef.InlineViewEventSpan.InlineViewEventSpan(int sign, Map< String, EventsListener > events, EventTarget.EnableStatus ignoreFocus, boolean enableTouchPseudoPropagation, EventTarget.EnableStatus eventThrough, ReadableMap dataset);
}

public class com::lynx::tasm::LynxTemplateRender::InnerPageLoadListener : com.lynx.tasm.base.LynxPageLoadListener {
  public void com.lynx.tasm.LynxTemplateRender.InnerPageLoadListener.onFirstScreen();
  public void com.lynx.tasm.LynxTemplateRender.InnerPageLoadListener.onPageUpdate();
  public void com.lynx.tasm.LynxTemplateRender.InnerPageLoadListener.onUpdateDataWithoutChange();
}

public class com::lynx::tasm::behavior::ui::UIShadowProxy::InsetDrawer :  {
  public void com.lynx.tasm.behavior.ui.UIShadowProxy.InsetDrawer.updateUIPosition(float left, float top);
  public void com.lynx.tasm.behavior.ui.UIShadowProxy.InsetDrawer.draw(Canvas canvas);
}

public class com::lynx::tasm::animation::InterpolatorFactory :  {
  public static Interpolator com.lynx.tasm.animation.InterpolatorFactory.getInterpolator(AnimationInfo ai);
}

public interface com::lynx::tasm::performance::IPerformanceObserver {
  public void com.lynx.tasm.performance.IPerformanceObserver.onPerformanceEvent(@NonNull PerformanceEntry entry);
}

public interface com::lynx::tasm::behavior::ui::IProcessViewInfoHook {
  public void com.lynx.tasm.behavior.ui.IProcessViewInfoHook.processViewInfo();
  public void com.lynx.tasm.behavior.ui.IProcessViewInfoHook.dispatchProcessViewInfo();
  public void com.lynx.tasm.behavior.ui.IProcessViewInfoHook.processChildViewInfo(IProcessViewInfoHook child);
  public void com.lynx.tasm.behavior.ui.IProcessViewInfoHook.beforeProcessViewInfo(ViewInfo info);
  public void com.lynx.tasm.behavior.ui.IProcessViewInfoHook.beforeDispatchProcessViewInfo(ViewInfo info);
  public void com.lynx.tasm.behavior.ui.IProcessViewInfoHook.beforeProcessChildViewInfo(ViewInfo info, View child, long drawingTime);
  public void com.lynx.tasm.behavior.ui.IProcessViewInfoHook.afterProcessChildViewInfo(ViewInfo info, View child, long drawingTime);
  public void com.lynx.tasm.behavior.ui.IProcessViewInfoHook.afterDispatchProcessViewInfo(ViewInfo info);
  public void com.lynx.tasm.behavior.ui.IProcessViewInfoHook.afterProcessViewInfo(ViewInfo info);
  public void com.lynx.tasm.behavior.ui.IProcessViewInfoHook.processLayoutChildren();
  public void com.lynx.tasm.behavior.ui.IProcessViewInfoHook.processMeasureChildren();
}

public interface com::lynx::tasm::behavior::ui::scroll::IScrollSticky {
  public void com.lynx.tasm.behavior.ui.scroll.IScrollSticky.setEnableSticky();
}

public interface com::lynx::tasm::service::IServiceProvider {
  public Class<? extends IServiceProvider > com.lynx.tasm.service.IServiceProvider.getServiceClass();
}

public interface com::lynx::tasm::EventEmitter::ITestTapTrack {
  public void com.lynx.tasm.EventEmitter.ITestTapTrack.onTap();
}

public interface com::lynx::tasm::performance::timing::ITimingCollector {
  public void com.lynx.tasm.performance.timing.ITimingCollector.markTiming(final String key, final String pipelineID);
  public void com.lynx.tasm.performance.timing.ITimingCollector.setMsTiming(final String key, final long msTimestamp, final String pipelineID);
  public void com.lynx.tasm.performance.timing.ITimingCollector.markPaintEndTimingIfNeeded();
}

public interface com::lynx::tasm::IUIRendererCreator {
  public ILynxUIRenderer com.lynx.tasm.IUIRendererCreator.createLynxUIRender();
}

public interface com::lynx::tasm::behavior::ui::text::IUIText {
  public Layout com.lynx.tasm.behavior.ui.text.IUIText.getTextLayout();
}

public class com::lynx::react::bridge::JavaOnlyArray : ArrayList< Object >, com.lynx.react.bridge.ReadableArray, com.lynx.react.bridge.WritableArray, com.lynx.react.bridge.NativeArrayInterface {
  public static JavaOnlyArray com.lynx.react.bridge.JavaOnlyArray.from(List list);
  public static JavaOnlyArray com.lynx.react.bridge.JavaOnlyArray.of(Object... values);
  public static JavaOnlyArray com.lynx.react.bridge.JavaOnlyArray.deepClone(ReadableArray ary);
  public static JavaOnlyArray com.lynx.react.bridge.JavaOnlyArray.shallowCopy(ReadableArray ary);
  public com.lynx.react.bridge.JavaOnlyArray.JavaOnlyArray();
  public int com.lynx.react.bridge.JavaOnlyArray.size();
  public boolean com.lynx.react.bridge.JavaOnlyArray.isNull(int index);
  public double com.lynx.react.bridge.JavaOnlyArray.getDouble(int index);
  public byte com.lynx.react.bridge.JavaOnlyArray.getByte(int index);
  public short com.lynx.react.bridge.JavaOnlyArray.getShort(int index);
  public long com.lynx.react.bridge.JavaOnlyArray.getLong(int index);
  public char com.lynx.react.bridge.JavaOnlyArray.getChar(int index);
  public int com.lynx.react.bridge.JavaOnlyArray.getInt(int index);
  public String com.lynx.react.bridge.JavaOnlyArray.getString(int index);
  public JavaOnlyArray com.lynx.react.bridge.JavaOnlyArray.getArray(int index);
  public boolean com.lynx.react.bridge.JavaOnlyArray.getBoolean(int index);
  public JavaOnlyMap com.lynx.react.bridge.JavaOnlyArray.getMap(int index);
  public byte[] com.lynx.react.bridge.JavaOnlyArray.getByteArray(int index);
  public PiperData com.lynx.react.bridge.JavaOnlyArray.getPiperData(int index);
  public Dynamic com.lynx.react.bridge.JavaOnlyArray.getDynamic(int index);
  public Object com.lynx.react.bridge.JavaOnlyArray.getObject(int index);
  public ReadableType com.lynx.react.bridge.JavaOnlyArray.getType(int index);
  public int com.lynx.react.bridge.JavaOnlyArray.getTypeIndex(int index);
  public void com.lynx.react.bridge.JavaOnlyArray.pushBoolean(boolean value);
  public void com.lynx.react.bridge.JavaOnlyArray.pushDouble(double value);
  public void com.lynx.react.bridge.JavaOnlyArray.pushInt(int value);
  public void com.lynx.react.bridge.JavaOnlyArray.pushLong(long value);
  public void com.lynx.react.bridge.JavaOnlyArray.pushString(String value);
  public void com.lynx.react.bridge.JavaOnlyArray.pushArray(WritableArray array);
  public void com.lynx.react.bridge.JavaOnlyArray.pushMap(WritableMap map);
  public void com.lynx.react.bridge.JavaOnlyArray.pushNull();
  public void com.lynx.react.bridge.JavaOnlyArray.pushByteArray(byte[] array);
  public void com.lynx.react.bridge.JavaOnlyArray.pushByteArrayAsString(byte[] array);
  public void com.lynx.react.bridge.JavaOnlyArray.pushPiperData(PiperData json);
  public void com.lynx.react.bridge.JavaOnlyArray.clear();
  public JSONArray com.lynx.react.bridge.JavaOnlyArray.toJSONArray();
  public ArrayList< Object > com.lynx.react.bridge.JavaOnlyArray.toArrayList();
  public ArrayList< Object > com.lynx.react.bridge.JavaOnlyArray.asArrayList();
  public Object com.lynx.react.bridge.JavaOnlyArray.getAt(int index);
}

public class com::lynx::react::bridge::JavaOnlyMap : HashMap< String, Object >, com.lynx.react.bridge.ReadableMap, com.lynx.react.bridge.WritableMap {
  public static JavaOnlyMap com.lynx.react.bridge.JavaOnlyMap.from(Map map);
  public static JavaOnlyMap com.lynx.react.bridge.JavaOnlyMap.deepClone(ReadableMap map);
  public static JavaOnlyMap com.lynx.react.bridge.JavaOnlyMap.shallowCopy(ReadableMap map);
  public com.lynx.react.bridge.JavaOnlyMap.JavaOnlyMap();
  public boolean com.lynx.react.bridge.JavaOnlyMap.hasKey(String name);
  public boolean com.lynx.react.bridge.JavaOnlyMap.isNull(String name);
  public boolean com.lynx.react.bridge.JavaOnlyMap.getBoolean(String name);
  public double com.lynx.react.bridge.JavaOnlyMap.getDouble(String name);
  public long com.lynx.react.bridge.JavaOnlyMap.getLong(String name);
  public int com.lynx.react.bridge.JavaOnlyMap.getInt(String name);
  public String com.lynx.react.bridge.JavaOnlyMap.getString(String name);
  public ReadableMap com.lynx.react.bridge.JavaOnlyMap.getMap(String name);
  public boolean com.lynx.react.bridge.JavaOnlyMap.getBoolean(String name, boolean defaultValue);
  public double com.lynx.react.bridge.JavaOnlyMap.getDouble(String name, double defaultValue);
  public int com.lynx.react.bridge.JavaOnlyMap.getInt(String name, int defaultValue);
  public long com.lynx.react.bridge.JavaOnlyMap.getLong(String name, long defaultValue);
  public String com.lynx.react.bridge.JavaOnlyMap.getString(String name, String defaultValue);
  public ReadableArray com.lynx.react.bridge.JavaOnlyMap.getArray(String name, ReadableArray defaultValue);
  public ReadableMap com.lynx.react.bridge.JavaOnlyMap.getMap(String name, ReadableMap defaultValue);
  public ReadableArray com.lynx.react.bridge.JavaOnlyMap.getArray(String name);
  public byte[] com.lynx.react.bridge.JavaOnlyMap.getByteArray(String name, byte[] defaultValue);
  public byte[] com.lynx.react.bridge.JavaOnlyMap.getByteArray(String name);
  public PiperData com.lynx.react.bridge.JavaOnlyMap.getPiperData(String name, PiperData defaultValue);
  public PiperData com.lynx.react.bridge.JavaOnlyMap.getPiperData(String name);
  public Dynamic com.lynx.react.bridge.JavaOnlyMap.getDynamic(String name);
  public ReadableType com.lynx.react.bridge.JavaOnlyMap.getType(String name);
  public int com.lynx.react.bridge.JavaOnlyMap.getTypeIndex(String name);
  public ReadableMapKeySetIterator com.lynx.react.bridge.JavaOnlyMap.keySetIterator();
  public void com.lynx.react.bridge.JavaOnlyMap.putBoolean(String key, boolean value);
  public void com.lynx.react.bridge.JavaOnlyMap.putDouble(String key, double value);
  public void com.lynx.react.bridge.JavaOnlyMap.putInt(String key, int value);
  public void com.lynx.react.bridge.JavaOnlyMap.putLong(String key, long value);
  public void com.lynx.react.bridge.JavaOnlyMap.putString(String key, String value);
  public void com.lynx.react.bridge.JavaOnlyMap.putNull(String key);
  public void com.lynx.react.bridge.JavaOnlyMap.putMap(String key, WritableMap value);
  public int com.lynx.react.bridge.JavaOnlyMap.size();
  public void com.lynx.react.bridge.JavaOnlyMap.merge(ReadableMap source);
  public void com.lynx.react.bridge.JavaOnlyMap.putArray(String key, WritableArray value);
  public void com.lynx.react.bridge.JavaOnlyMap.putByteArrayAsString(byte[] key, byte[] value);
  public void com.lynx.react.bridge.JavaOnlyMap.putByteArray(String key, byte[] value);
  public void com.lynx.react.bridge.JavaOnlyMap.putPiperData(String key, PiperData value);
  public ByteBuffer com.lynx.react.bridge.JavaOnlyMap.getByteBuffer(String name);
  public void com.lynx.react.bridge.JavaOnlyMap.putByteBuffer(String key, ByteBuffer value);
  public HashMap< String, Object > com.lynx.react.bridge.JavaOnlyMap.toHashMap();
  public HashMap< String, Object > com.lynx.react.bridge.JavaOnlyMap.asHashMap();
  public JSONObject com.lynx.react.bridge.JavaOnlyMap.toJSONObject();
}

public interface com::lynx::tasm::base::JNINamespace {
  public String com.lynx.tasm.base.JNINamespace.value();
}

public enum com::lynx::jsbridge::jsi::LynxJSIObjectHub::JObjectType {
  public com.lynx.jsbridge.jsi.LynxJSIObjectHub.JObjectType.UNKNOWN_TYPE UNKNOWN_TYPE;
  public com.lynx.jsbridge.jsi.LynxJSIObjectHub.JObjectType.LYNX_JSI_OBJECT_TYPE LYNX_JSI_OBJECT_TYPE;
  public com.lynx.jsbridge.jsi.LynxJSIObjectHub.JObjectType.STRING_TYPE STRING_TYPE;
  public com.lynx.jsbridge.jsi.LynxJSIObjectHub.JObjectType.OBJECT_ARRAY_TYPE OBJECT_ARRAY_TYPE;
  public com.lynx.jsbridge.jsi.LynxJSIObjectHub.JObjectType.BOOLEAN_ARRAY_TYPE BOOLEAN_ARRAY_TYPE;
  public com.lynx.jsbridge.jsi.LynxJSIObjectHub.JObjectType.INT_ARRAY_TYPE INT_ARRAY_TYPE;
  public com.lynx.jsbridge.jsi.LynxJSIObjectHub.JObjectType.LONG_ARRAY_TYPE LONG_ARRAY_TYPE;
  public com.lynx.jsbridge.jsi.LynxJSIObjectHub.JObjectType.FLOAT_ARRAY_TYPE FLOAT_ARRAY_TYPE;
  public com.lynx.jsbridge.jsi.LynxJSIObjectHub.JObjectType.DOUBLE_ARRAY_TYPE DOUBLE_ARRAY_TYPE;
  public com.lynx.jsbridge.jsi.LynxJSIObjectHub.JObjectType.LIST_TYPE LIST_TYPE;
  public com.lynx.jsbridge.jsi.LynxJSIObjectHub.JObjectType.BOOLEAN_WRAPPER_TYPE BOOLEAN_WRAPPER_TYPE;
  public com.lynx.jsbridge.jsi.LynxJSIObjectHub.JObjectType.INT_WRAPPER_TYPE INT_WRAPPER_TYPE;
  public com.lynx.jsbridge.jsi.LynxJSIObjectHub.JObjectType.LONG_WRAPPER_TYPE LONG_WRAPPER_TYPE;
  public com.lynx.jsbridge.jsi.LynxJSIObjectHub.JObjectType.FLOAT_WRAPPER_TYPE FLOAT_WRAPPER_TYPE;
  public com.lynx.jsbridge.jsi.LynxJSIObjectHub.JObjectType.DOUBLE_WRAPPER_TYPE DOUBLE_WRAPPER_TYPE;
}

public class com::lynx::jsbridge::JSModule :  {
  public com.lynx.jsbridge.JSModule.JSModule(String module, JSProxy proxy);
  public void com.lynx.jsbridge.JSModule.fire(String function, JavaOnlyArray args);
}

public class com::lynx::tasm::core::JSProxy :  {
  public com.lynx.tasm.core.JSProxy.JSProxy(long nativeCreator, WeakReference< LynxContext > context, String jsGroupThreadName);
  public com.lynx.tasm.core.JSProxy.JSProxy(LynxBackgroundRuntime runtime, String jsGroupThreadName);
  public JSModule com.lynx.tasm.core.JSProxy.getJSModule(String module);
  public long com.lynx.tasm.core.JSProxy.getRuntimeId();
  public void com.lynx.tasm.core.JSProxy.destroy();
  public void com.lynx.tasm.core.JSProxy.callFunction(String module, String method, JavaOnlyArray arguments);
  public void com.lynx.tasm.core.JSProxy.callIntersectionObserver(int observerId, int callbackId, JavaOnlyMap args);
  public void com.lynx.tasm.core.JSProxy.callJSApiCallbackWithValue(int callbackId, JavaOnlyMap args);
  public void com.lynx.tasm.core.JSProxy.evaluateScript(String url, byte[] data, int callbackId);
  public void com.lynx.tasm.core.JSProxy.rejectDynamicComponentLoad(String url, int callbackId, int errCode, String errMsg);
  public void com.lynx.tasm.core.JSProxy.runOnJSThread(@NonNull Runnable runnable);
  public void com.lynx.tasm.core.JSProxy.addLifecycleListener(@NonNull RuntimeLifecycleListener listener);
}

public class com::lynx::tasm::behavior::KeyboardEvent :  {
  public com.lynx.tasm.behavior.KeyboardEvent.KeyboardEvent(LynxContext lynxContext);
  public synchronized void com.lynx.tasm.behavior.KeyboardEvent.start();
  public boolean com.lynx.tasm.behavior.KeyboardEvent.isStart();
  public KeyboardMonitor com.lynx.tasm.behavior.KeyboardEvent.getKeyboardMonitor();
  public void com.lynx.tasm.behavior.KeyboardEvent.addOnGlobalLayoutListener(Object key, ViewTreeObserver.OnGlobalLayoutListener listener);
  public void com.lynx.tasm.behavior.KeyboardEvent.removeOnGlobalLayoutListener(Object key, ViewTreeObserver.OnGlobalLayoutListener listener);
  public ViewTreeObserver.OnGlobalLayoutListener com.lynx.tasm.behavior.KeyboardEvent.getListener(Object key);
  public void com.lynx.tasm.behavior.KeyboardEvent.detectKeyboardChangeAndSendEvent();
  public synchronized void com.lynx.tasm.behavior.KeyboardEvent.stop();
  public Rect com.lynx.tasm.behavior.KeyboardEvent.getDisplayFrame();
  public int com.lynx.tasm.behavior.KeyboardEvent.getEventViewHeight();
}

public class com::lynx::tasm::behavior::KeyboardMonitor : Dialog {
  public com.lynx.tasm.behavior.KeyboardMonitor.KeyboardMonitor(@NonNull Context context);
  public int com.lynx.tasm.behavior.KeyboardMonitor.getDefaultMonitorBottom();
  public View com.lynx.tasm.behavior.KeyboardMonitor.getDecorView();
  public void com.lynx.tasm.behavior.KeyboardMonitor.start();
  public void com.lynx.tasm.behavior.KeyboardMonitor.stop();
  public void com.lynx.tasm.behavior.KeyboardMonitor.addOnGlobalLayoutListener(ViewTreeObserver.OnGlobalLayoutListener listener);
  public void com.lynx.tasm.behavior.KeyboardMonitor.removeOnGlobalLayoutListener(ViewTreeObserver.OnGlobalLayoutListener listener);
}

public class com::lynx::tasm::animation::keyframe::KeyframeManager :  {
  public static boolean com.lynx.tasm.animation.keyframe.KeyframeManager.hasKeyframeAnimation(StylesDiffMap map);
  public com.lynx.tasm.animation.keyframe.KeyframeManager.KeyframeManager(LynxUI ui);
  public void com.lynx.tasm.animation.keyframe.KeyframeManager.setAnimations(AnimationInfo[] infos);
  public void com.lynx.tasm.animation.keyframe.KeyframeManager.setAnimation(AnimationInfo info);
  public void com.lynx.tasm.animation.keyframe.KeyframeManager.notifyAnimationUpdated();
  public void com.lynx.tasm.animation.keyframe.KeyframeManager.endAllAnimation();
  public void com.lynx.tasm.animation.keyframe.KeyframeManager.notifyPropertyUpdated(String name, Object value);
  public boolean com.lynx.tasm.animation.keyframe.KeyframeManager.hasAnimationRunning();
  public void com.lynx.tasm.animation.keyframe.KeyframeManager.onAttach();
  public void com.lynx.tasm.animation.keyframe.KeyframeManager.detachFromUI();
  public void com.lynx.tasm.animation.keyframe.KeyframeManager.attachToUI(LynxUI ui);
  public void com.lynx.tasm.animation.keyframe.KeyframeManager.onDetach();
  public void com.lynx.tasm.animation.keyframe.KeyframeManager.onDestroy();
}

public class abstract com::lynx::tasm::behavior::ui::utils::LayerDrawable : Drawable {
  public com.lynx.tasm.behavior.ui.utils.LayerDrawable< T extends LayerManager >.LayerDrawable(LynxContext lynxContext, float curFontSize);
  public void com.lynx.tasm.behavior.ui.utils.LayerDrawable< T extends LayerManager >.setLayerImage(ReadableArray backgroundImage, LynxBaseUI ui);
  public void com.lynx.tasm.behavior.ui.utils.LayerDrawable< T extends LayerManager >.setLayerPosition(ReadableArray backgroundPos);
  public void com.lynx.tasm.behavior.ui.utils.LayerDrawable< T extends LayerManager >.setLayerSize(ReadableArray bgSize);
  public void com.lynx.tasm.behavior.ui.utils.LayerDrawable< T extends LayerManager >.setLayerOrigin(ReadableArray bgOrigin);
  public void com.lynx.tasm.behavior.ui.utils.LayerDrawable< T extends LayerManager >.setLayerRepeat(ReadableArray bgRepeat);
  public void com.lynx.tasm.behavior.ui.utils.LayerDrawable< T extends LayerManager >.setLayerClip(ReadableArray bgClip);
  public boolean com.lynx.tasm.behavior.ui.utils.LayerDrawable< T extends LayerManager >.setBorderWidth(int position, float width);
  public boolean com.lynx.tasm.behavior.ui.utils.LayerDrawable< T extends LayerManager >.setPaddingWidth(float top, float right, float bottom, float left);
  public int com.lynx.tasm.behavior.ui.utils.LayerDrawable< T extends LayerManager >.getResolvedLayoutDirection();
  public boolean com.lynx.tasm.behavior.ui.utils.LayerDrawable< T extends LayerManager >.setResolvedLayoutDirection(int layoutDirection);
  public boolean com.lynx.tasm.behavior.ui.utils.LayerDrawable< T extends LayerManager >.onResolvedLayoutDirectionChanged(int layoutDirection);
  public float com.lynx.tasm.behavior.ui.utils.LayerDrawable< T extends LayerManager >.getBorderWidthOrDefaultTo(final float defaultValue, final int spacingType);
  public RectF com.lynx.tasm.behavior.ui.utils.LayerDrawable< T extends LayerManager >.getDirectionAwareBorderInsets();
  public void com.lynx.tasm.behavior.ui.utils.LayerDrawable< T extends LayerManager >.onAttach();
  public void com.lynx.tasm.behavior.ui.utils.LayerDrawable< T extends LayerManager >.onDetach();
  public void com.lynx.tasm.behavior.ui.utils.LayerDrawable< T extends LayerManager >.setEnableBitmapGradient(boolean enable);
}

public class abstract com::lynx::tasm::behavior::ui::background::LayerManager : Drawable.Callback {
  public com.lynx.tasm.behavior.ui.background.LayerManager.LayerManager(LynxContext context, Drawable drawable, float curFontSize);
  public void com.lynx.tasm.behavior.ui.background.LayerManager.draw(Canvas canvas, RectF borderRect, RectF paddingRect, RectF contentRect, RectF clipBox, Path outerDrawPath, Path innerDrawPath, boolean hasBorder);
  public void com.lynx.tasm.behavior.ui.background.LayerManager.reset();
  public void com.lynx.tasm.behavior.ui.background.LayerManager.resetLayers();
  public boolean com.lynx.tasm.behavior.ui.background.LayerManager.hasImageLayers();
  public void com.lynx.tasm.behavior.ui.background.LayerManager.setBitmapConfig(@Nullable Bitmap.Config config);
  public void com.lynx.tasm.behavior.ui.background.LayerManager.setLayerImage(ReadableArray bgImage, LynxBaseUI ui);
  public void com.lynx.tasm.behavior.ui.background.LayerManager.setLayerPosition(ReadableArray bgImgPosition);
  public void com.lynx.tasm.behavior.ui.background.LayerManager.setLayerOrigin(ReadableArray bgImgOrigin);
  public void com.lynx.tasm.behavior.ui.background.LayerManager.setLayerRepeat(ReadableArray bgImgRepeat);
  public void com.lynx.tasm.behavior.ui.background.LayerManager.setLayerClip(ReadableArray bgClip);
  public int com.lynx.tasm.behavior.ui.background.LayerManager.getLayerClip();
  public void com.lynx.tasm.behavior.ui.background.LayerManager.setLayerSize(ReadableArray bgSize);
  public void com.lynx.tasm.behavior.ui.background.LayerManager.onAttach();
  public void com.lynx.tasm.behavior.ui.background.LayerManager.onDetach();
  public void com.lynx.tasm.behavior.ui.background.LayerManager.configureBounds(Rect bounds);
  public void com.lynx.tasm.behavior.ui.background.LayerManager.invalidateDrawable(@NonNull Drawable who);
  public void com.lynx.tasm.behavior.ui.background.LayerManager.scheduleDrawable(@NonNull Drawable who, @NonNull Runnable what, long when);
  public void com.lynx.tasm.behavior.ui.background.LayerManager.unscheduleDrawable(@NonNull Drawable who, @NonNull Runnable what);
  public void com.lynx.tasm.behavior.ui.background.LayerManager.setEnableBitmapGradient(boolean enable);
}

public class com::lynx::tasm::animation::layout::LayoutAnimationManager :  {
  public void com.lynx.tasm.animation.layout.LayoutAnimationManager.updateAlpha(float alpha);
  public void com.lynx.tasm.animation.layout.LayoutAnimationManager.applyLayoutUpdate(LynxUI ui, int x, int y, int width, int height, int paddingLeft, int paddingTop, int paddingRight, int paddingBottom, int marginLeft, int marginTop, int marginRight, int marginBottom, int borderLeftWidth, int borderTopWidth, int borderRightWidth, int borderBottomWidth, final Rect bound);
  public void com.lynx.tasm.animation.layout.LayoutAnimationManager.applyLatestLayoutInfoToUI();
  public void com.lynx.tasm.animation.layout.LayoutAnimationManager.deleteView(final LynxUI ui);
  public AbstractLayoutAnimation com.lynx.tasm.animation.layout.LayoutAnimationManager.getLayoutCreateAnimation();
  public AbstractLayoutAnimation com.lynx.tasm.animation.layout.LayoutAnimationManager.getLayoutUpdateAnimation();
  public AbstractLayoutAnimation com.lynx.tasm.animation.layout.LayoutAnimationManager.getLayoutDeleteAnimation();
  public boolean com.lynx.tasm.animation.layout.LayoutAnimationManager.isValid();
  public void com.lynx.tasm.animation.layout.LayoutAnimationManager.updateLatestLayoutInfo(int x, int y, int width, int height, int paddingLeft, int paddingTop, int paddingRight, int paddingBottom, int marginLeft, int marginTop, int marginRight, int marginBottom, int borderLeftWidth, int borderTopWidth, int borderRightWidth, int borderBottomWidth, final Rect bound);
  public void com.lynx.tasm.animation.layout.LayoutAnimationManager.setLayoutAnimationCreateDuration(double duration);
  public void com.lynx.tasm.animation.layout.LayoutAnimationManager.setLayoutAnimationUpdateDuration(double duration);
  public void com.lynx.tasm.animation.layout.LayoutAnimationManager.setLayoutAnimationDeleteDuration(double duration);
}

public interface com::lynx::tasm::animation::AnimationConstant::LayoutAnimationType {
}

public class abstract com::lynx::tasm::behavior::LayoutContext :  {
  public abstract int com.lynx.tasm.behavior.LayoutContext.createNode(int signature, String tagName, ReadableMap props, ReadableMapBuffer initialStyles, ReadableArray eventListeners, boolean allowInline);
  public abstract void com.lynx.tasm.behavior.LayoutContext.removeNode(int parentSignature, int childSignature, int index);
  public abstract void com.lynx.tasm.behavior.LayoutContext.insertNode(int parentSignature, int childSignature, int index);
  public abstract void com.lynx.tasm.behavior.LayoutContext.moveNode(int parentSignature, int childSignature, int fromIndex, int toIndex);
  public abstract void com.lynx.tasm.behavior.LayoutContext.destroyNodes(int[] signatures);
  public abstract void com.lynx.tasm.behavior.LayoutContext.dispatchOnLayoutBefore(int rootSignature);
  public abstract void com.lynx.tasm.behavior.LayoutContext.dispatchOnLayout(int sign, int left, int top, int width, int height);
  public abstract void com.lynx.tasm.behavior.LayoutContext.updateProps(int signature, ReadableMap props, ReadableMapBuffer styles, ReadableArray eventListeners);
  public abstract void com.lynx.tasm.behavior.LayoutContext.setFontFaces(ReadableMap props);
  public abstract Object com.lynx.tasm.behavior.LayoutContext.getExtraBundle(int signature);
  public abstract void com.lynx.tasm.behavior.LayoutContext.attachLayoutNodeManager(long nativeLayoutNodeManagerPtr);
  public abstract DisplayMetrics com.lynx.tasm.behavior.LayoutContext.getScreenMetrics();
  public void com.lynx.tasm.behavior.LayoutContext.triggerLayout();
  public long com.lynx.tasm.behavior.LayoutContext.getNativeLayoutContextPtr();
  public void com.lynx.tasm.behavior.LayoutContext.destroy();
}

public class com::lynx::tasm::animation::layout::LayoutCreateAnimation : com.lynx.tasm.animation.layout.BaseLayoutAnimation {
}

public class com::lynx::tasm::animation::layout::LayoutDeleteAnimation : com.lynx.tasm.animation.layout.BaseLayoutAnimation {
}

public interface com::lynx::tasm::animation::layout::LayoutHandlingAnimation {
  public void com.lynx.tasm.animation.layout.LayoutHandlingAnimation.onLayoutUpdate(int x, int y, int width, int height);
}

public class com::lynx::tasm::behavior::shadow::LayoutNode :  {
  public long com.lynx.tasm.behavior.shadow.LayoutNode.mBaseline mBaseline;
  public com.lynx.tasm.behavior.shadow.LayoutNode.LayoutNode();
  public void com.lynx.tasm.behavior.shadow.LayoutNode.attachNativePtr(long ptr);
  public final int com.lynx.tasm.behavior.shadow.LayoutNode.getSignature();
  public void com.lynx.tasm.behavior.shadow.LayoutNode.setSignature(int signature);
  public void com.lynx.tasm.behavior.shadow.LayoutNode.setLayoutNodeManager(LayoutNodeManager manager);
  public void com.lynx.tasm.behavior.shadow.LayoutNode.destroy();
  public void com.lynx.tasm.behavior.shadow.LayoutNode.onLayoutBefore();
  public void com.lynx.tasm.behavior.shadow.LayoutNode.onLayout(int left, int top, int width, int height);
  public void com.lynx.tasm.behavior.shadow.LayoutNode.setMeasureFunc(MeasureFunc measureFunc);
  public void com.lynx.tasm.behavior.shadow.LayoutNode.setCustomMeasureFunc(CustomMeasureFunc customMeasureFunc);
  public boolean com.lynx.tasm.behavior.shadow.LayoutNode.isDirty();
  public void com.lynx.tasm.behavior.shadow.LayoutNode.markDirty();
  public void com.lynx.tasm.behavior.shadow.LayoutNode.resetIsDirty();
  public Style com.lynx.tasm.behavior.shadow.LayoutNode.getStyle();
  public float[] com.lynx.tasm.behavior.shadow.LayoutNode.measure(float width, int widthMode, float height, int heightMode, boolean finalMeasure);
  public void com.lynx.tasm.behavior.shadow.LayoutNode.align();
}

public class com::lynx::tasm::behavior::LayoutNodeManager :  {
  public float com.lynx.tasm.behavior.LayoutNodeManager.UNDEFINED_MAX_SIZE UNDEFINED_MAX_SIZE;
  public float com.lynx.tasm.behavior.LayoutNodeManager.UNDEFINED_MIN_SIZE UNDEFINED_MIN_SIZE;
  public void com.lynx.tasm.behavior.LayoutNodeManager.attachNativePtr(long mNativePtr);
  public void com.lynx.tasm.behavior.LayoutNodeManager.setMeasureFunc(int id, Object shadowNode);
  public void com.lynx.tasm.behavior.LayoutNodeManager.markDirty(int id);
  public boolean com.lynx.tasm.behavior.LayoutNodeManager.isDirty(int id);
  public long com.lynx.tasm.behavior.LayoutNodeManager.measureNativeNode(int id, float width, int widthMode, float height, int heightMode, boolean finalMeasure);
  public int[] com.lynx.tasm.behavior.LayoutNodeManager.measureNativeNodeReturnWithBaseline(int id, float width, int widthMode, float height, int heightMode, boolean finalMeasure);
  public void com.lynx.tasm.behavior.LayoutNodeManager.alignNativeNode(int id, float offset_top, float offset_left);
  public int com.lynx.tasm.behavior.LayoutNodeManager.getFlexDirection(int id);
  public float com.lynx.tasm.behavior.LayoutNodeManager.getWidth(int id);
  public float com.lynx.tasm.behavior.LayoutNodeManager.getHeight(int id);
  public float com.lynx.tasm.behavior.LayoutNodeManager.getMinWidth(int id);
  public float com.lynx.tasm.behavior.LayoutNodeManager.getMaxWidth(int id);
  public float com.lynx.tasm.behavior.LayoutNodeManager.getMinHeight(int id);
  public float com.lynx.tasm.behavior.LayoutNodeManager.getMaxHeight(int id);
  public int[] com.lynx.tasm.behavior.LayoutNodeManager.getPadding(int id);
  public int[] com.lynx.tasm.behavior.LayoutNodeManager.getMargin(int id);
}

public interface com::lynx::tasm::behavior::shadow::LayoutTick {
  public void com.lynx.tasm.behavior.shadow.LayoutTick.request(Runnable runnable);
}

public class com::lynx::tasm::animation::layout::LayoutUpdateAnimation : com.lynx.tasm.animation.layout.AbstractLayoutAnimation {
  public com.lynx.tasm.animation.layout.LayoutUpdateAnimation.LayoutUpdateAnimation();
}

public interface com::lynx::tasm::behavior::shadow::text::TypefaceCache::LazyProvider {
  public Typeface com.lynx.tasm.behavior.shadow.text.TypefaceCache.LazyProvider.getTypeface(String fontFamilyName, int style);
}

public class com::lynx::tasm::behavior::ui::shapes::BasicShape::Length :  {
  public double com.lynx.tasm.behavior.ui.shapes.BasicShape.Length.mVal mVal;
  public int com.lynx.tasm.behavior.ui.shapes.BasicShape.Length.mUnit mUnit;
  public com.lynx.tasm.behavior.ui.shapes.BasicShape.Length.Length(double val, int unit);
}

public class com::lynx::tasm::common::LepusBuffer : com.lynx.tasm.common.MessageCodec {
  public final LepusBuffer com.lynx.tasm.common.LepusBuffer.INSTANCE INSTANCE;
  public void com.lynx.tasm.common.LepusBuffer.setDebug(boolean debug);
  public ByteBuffer com.lynx.tasm.common.LepusBuffer.encodeMessage(@NonNull Object message);
  public Object com.lynx.tasm.common.LepusBuffer.decodeMessage(@NonNull ByteBuffer message);
}

public enum com::lynx::tasm::LynxSubErrorCode::Level {
  public com.lynx.tasm.LynxSubErrorCode.Level.FATAL FATAL;
  public com.lynx.tasm.LynxSubErrorCode.Level.ERROR ERROR;
  public com.lynx.tasm.LynxSubErrorCode.Level.WARN WARN;
  public com.lynx.tasm.LynxSubErrorCode.Level.UNDECIDED UNDECIDED;
  public final String com.lynx.tasm.LynxSubErrorCode.Level.value value;
  public com.lynx.tasm.LynxSubErrorCode.Level.Level(String value);
}

public class com::lynx::tasm::behavior::ui::list::container::ListContainerView : com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView, com.lynx.tasm.behavior.ui.IDrawChildHook.IDrawChildHookBinding {
  public com.lynx.tasm.behavior.ui.list.container.ListContainerView.ListContainerView(@NonNull Context context, UIListContainer uiListContainer);
  public boolean com.lynx.tasm.behavior.ui.list.container.ListContainerView.onInterceptTouchEvent(MotionEvent e);
  public boolean com.lynx.tasm.behavior.ui.list.container.ListContainerView.dispatchTouchEvent(MotionEvent ev);
  public boolean com.lynx.tasm.behavior.ui.list.container.ListContainerView.onTouchEvent(MotionEvent ev);
  public void com.lynx.tasm.behavior.ui.list.container.ListContainerView.consumeGesture(boolean consume);
  public void com.lynx.tasm.behavior.ui.list.container.ListContainerView.interceptGesture(boolean intercept);
  public void com.lynx.tasm.behavior.ui.list.container.ListContainerView.computeScroll();
  public void com.lynx.tasm.behavior.ui.list.container.ListContainerView.setForceCanScroll(boolean forceCanScroll);
  public boolean com.lynx.tasm.behavior.ui.list.container.ListContainerView.canScrollVertically(int direction);
  public boolean com.lynx.tasm.behavior.ui.list.container.ListContainerView.canScrollHorizontally(int direction);
  public void com.lynx.tasm.behavior.ui.list.container.ListContainerView.bindDrawChildHook(IDrawChildHook hook);
  public void com.lynx.tasm.behavior.ui.list.container.ListContainerView.setOrientation(int orientation);
  public void com.lynx.tasm.behavior.ui.list.container.ListContainerView.addView(View child);
  public void com.lynx.tasm.behavior.ui.list.container.ListContainerView.addView(View child, int index);
  public void com.lynx.tasm.behavior.ui.list.container.ListContainerView.addView(View child, ViewGroup.LayoutParams params);
  public void com.lynx.tasm.behavior.ui.list.container.ListContainerView.addView(View child, int width, int height);
  public void com.lynx.tasm.behavior.ui.list.container.ListContainerView.addView(View child, int index, ViewGroup.LayoutParams params);
  public void com.lynx.tasm.behavior.ui.list.container.ListContainerView.removeView(View view);
  public void com.lynx.tasm.behavior.ui.list.container.ListContainerView.removeViewAt(int index);
  public void com.lynx.tasm.behavior.ui.list.container.ListContainerView.removeAllViews();
}

public class com::lynx::tasm::behavior::ui::list::ListEventManager : RecyclerView.OnScrollListener {
  public com.lynx.tasm.behavior.ui.list.ListEventManager.ListEventManager(EventEmitter eventEmitter, RecyclerView recyclerView, UIList list);
  public boolean com.lynx.tasm.behavior.ui.list.ListEventManager.isLayoutCompleteEnable();
  public void com.lynx.tasm.behavior.ui.list.ListEventManager.sendLayoutCompleteEvent(final JavaOnlyArray cells);
  public void com.lynx.tasm.behavior.ui.list.ListEventManager.onScrolled(RecyclerView recyclerView, int dx, int dy);
  public void com.lynx.tasm.behavior.ui.list.ListEventManager.onScrollStateChanged(RecyclerView recyclerView, int newState);
  public int com.lynx.tasm.behavior.ui.list.ListEventManager.getScrollOffset();
  public static int com.lynx.tasm.behavior.ui.list.ListEventManager.dynamicToInt(Dynamic value, int defaultVal);
  public static boolean com.lynx.tasm.behavior.ui.list.ListEventManager.dynamicToBoolean(Dynamic value, boolean defaultVal);
  public static String com.lynx.tasm.behavior.ui.list.ListEventManager.dynamicToString(Dynamic value, String defaultVal);
}

public class com::lynx::tasm::behavior::ui::list::ListLayoutManager::ListGridLayoutManager : GridLayoutManager, com.lynx.tasm.behavior.ui.list.ListLayoutManager.ListLayoutInfo {
  public com.lynx.tasm.behavior.ui.list.ListLayoutManager.ListGridLayoutManager.ListGridLayoutManager(Context context, int spanCount, int crossAxisGap, UIList listRef);
  public boolean com.lynx.tasm.behavior.ui.list.ListLayoutManager.ListGridLayoutManager.supportsPredictiveItemAnimations();
  public void com.lynx.tasm.behavior.ui.list.ListLayoutManager.ListGridLayoutManager.layoutDecoratedWithMargins(View child, int left, int top, int right, int bottom);
  public void com.lynx.tasm.behavior.ui.list.ListLayoutManager.ListGridLayoutManager.onLayoutCompleted(RecyclerView.State state);
  public float com.lynx.tasm.behavior.ui.list.ListLayoutManager.ListGridLayoutManager.getConsumedY();
  public float com.lynx.tasm.behavior.ui.list.ListLayoutManager.ListGridLayoutManager.getConsumedX();
  public int com.lynx.tasm.behavior.ui.list.ListLayoutManager.ListGridLayoutManager.scrollVerticallyBy(int dy, RecyclerView.Recycler recycler, RecyclerView.State state);
  public int com.lynx.tasm.behavior.ui.list.ListLayoutManager.ListGridLayoutManager.scrollHorizontallyBy(int dx, RecyclerView.Recycler recycler, RecyclerView.State state);
  public boolean com.lynx.tasm.behavior.ui.list.ListLayoutManager.ListGridLayoutManager.canScrollVertically();
  public boolean com.lynx.tasm.behavior.ui.list.ListLayoutManager.ListGridLayoutManager.canScrollHorizontally();
}

public interface com::lynx::tasm::behavior::ui::list::ListLayoutManager::ListLayoutInfo {
  public float com.lynx.tasm.behavior.ui.list.ListLayoutManager.ListLayoutInfo.getConsumedY();
  public float com.lynx.tasm.behavior.ui.list.ListLayoutManager.ListLayoutInfo.getConsumedX();
}

public class com::lynx::tasm::behavior::ui::list::ListLayoutManager :  {
  public final String com.lynx.tasm.behavior.ui.list.ListLayoutManager.TAG TAG;
}

public class com::lynx::tasm::behavior::ui::list::ListLayoutManager::ListLinearLayoutManager : LinearLayoutManager, com.lynx.tasm.behavior.ui.list.ListLayoutManager.ListLayoutInfo {
  public com.lynx.tasm.behavior.ui.list.ListLayoutManager.ListLinearLayoutManager.ListLinearLayoutManager(Context context, UIList listRef);
  public boolean com.lynx.tasm.behavior.ui.list.ListLayoutManager.ListLinearLayoutManager.supportsPredictiveItemAnimations();
  public void com.lynx.tasm.behavior.ui.list.ListLayoutManager.ListLinearLayoutManager.layoutDecoratedWithMargins(View child, int left, int top, int right, int bottom);
  public void com.lynx.tasm.behavior.ui.list.ListLayoutManager.ListLinearLayoutManager.onLayoutCompleted(RecyclerView.State state);
  public float com.lynx.tasm.behavior.ui.list.ListLayoutManager.ListLinearLayoutManager.getConsumedY();
  public float com.lynx.tasm.behavior.ui.list.ListLayoutManager.ListLinearLayoutManager.getConsumedX();
  public int com.lynx.tasm.behavior.ui.list.ListLayoutManager.ListLinearLayoutManager.scrollVerticallyBy(int dy, RecyclerView.Recycler recycler, RecyclerView.State state);
  public int com.lynx.tasm.behavior.ui.list.ListLayoutManager.ListLinearLayoutManager.scrollHorizontallyBy(int dx, RecyclerView.Recycler recycler, RecyclerView.State state);
  public boolean com.lynx.tasm.behavior.ui.list.ListLayoutManager.ListLinearLayoutManager.canScrollVertically();
  public boolean com.lynx.tasm.behavior.ui.list.ListLayoutManager.ListLinearLayoutManager.canScrollHorizontally();
}

public class com::lynx::tasm::ListNodeInfoFetcher : com.lynx.tasm.IListNodeInfoFetcher {
  public com.lynx.tasm.ListNodeInfoFetcher.ListNodeInfoFetcher(LynxTemplateRender renderer);
  public JavaOnlyMap com.lynx.tasm.ListNodeInfoFetcher.getPlatformInfo(int listSign);
  public void com.lynx.tasm.ListNodeInfoFetcher.renderChild(int listSign, int index, long operationId);
  public void com.lynx.tasm.ListNodeInfoFetcher.updateChild(int listSign, int oldSign, int newIndex, long operationId);
  public void com.lynx.tasm.ListNodeInfoFetcher.removeChild(int listSign, int childSign);
  public int com.lynx.tasm.ListNodeInfoFetcher.obtainChild(int listSign, int index, long operationId, boolean enableReuseNotification);
  public void com.lynx.tasm.ListNodeInfoFetcher.recycleChild(int listSign, int childSign);
  public void com.lynx.tasm.ListNodeInfoFetcher.obtainChildAsync(int listSign, int index, long operationId);
  public void com.lynx.tasm.ListNodeInfoFetcher.recycleChildAsync(int listSign, int childSign);
  public void com.lynx.tasm.ListNodeInfoFetcher.scrollByListContainer(int containerSign, float x, float y, float originalX, float originalY);
  public void com.lynx.tasm.ListNodeInfoFetcher.scrollToPosition(int containerSign, int position, float offset, int align, boolean smooth);
  public void com.lynx.tasm.ListNodeInfoFetcher.scrollStopped(int containerSign);
}

public class com::lynx::tasm::behavior::ui::list::ListPreloadCache :  {
  public ArrayList<UIComponent> com.lynx.tasm.behavior.ui.list.ListPreloadCache.upperCache upperCache;
  public ArrayList<UIComponent> com.lynx.tasm.behavior.ui.list.ListPreloadCache.lowerCache lowerCache;
  public com.lynx.tasm.behavior.ui.list.ListPreloadCache.ListPreloadCache(UIList uiList, int cacheCount);
  public void com.lynx.tasm.behavior.ui.list.ListPreloadCache.setCacheCount(int cacheCount);
  public void com.lynx.tasm.behavior.ui.list.ListPreloadCache.addComponent(@NonNull UIComponent component, boolean upper);
  public UIComponent com.lynx.tasm.behavior.ui.list.ListPreloadCache.removeComponent(@NonNull String itemKey);
  public boolean com.lynx.tasm.behavior.ui.list.ListPreloadCache.contains(@NonNull String itemKey);
  public void com.lynx.tasm.behavior.ui.list.ListPreloadCache.clear();
  public void com.lynx.tasm.behavior.ui.list.ListPreloadCache.destroy();
}

public class com::lynx::tasm::behavior::ui::list::ListScroller :  {
}

public class com::lynx::tasm::behavior::ui::list::ListStickyManager : RecyclerView.OnScrollListener, View.OnAttachStateChangeListener {
  public void com.lynx.tasm.behavior.ui.list.ListStickyManager.onViewAttachedToWindow(View recyclerView);
  public void com.lynx.tasm.behavior.ui.list.ListStickyManager.onViewDetachedFromWindow(View v);
  public void com.lynx.tasm.behavior.ui.list.ListStickyManager.onScrolled(final RecyclerView recyclerView, int dx, int dy);
}

public class com::lynx::tasm::behavior::ui::list::ListViewHolder : RecyclerView.ViewHolder {
  public com.lynx.tasm.behavior.ui.list.ListViewHolder.ListViewHolder(WrapView itemView);
  public void com.lynx.tasm.behavior.ui.list.ListViewHolder.setEstimatedHeight(int height);
  public void com.lynx.tasm.behavior.ui.list.ListViewHolder.setEstimatedWidth(int width);
  public UIComponent com.lynx.tasm.behavior.ui.list.ListViewHolder.getUIComponent();
}

public class com::lynx::tasm::base::LLog :  {
  public final int com.lynx.tasm.base.LLog.REPORT REPORT;
  public final int com.lynx.tasm.base.LLog.VERBOSE VERBOSE;
  public final int com.lynx.tasm.base.LLog.DEBUG DEBUG;
  public final int com.lynx.tasm.base.LLog.INFO INFO;
  public final int com.lynx.tasm.base.LLog.WARN WARN;
  public final int com.lynx.tasm.base.LLog.ERROR ERROR;
  public static void com.lynx.tasm.base.LLog.initLynxLog();
  public static void com.lynx.tasm.base.LLog.setDebugLoggingDelegate(AbsLogDelegate delegate);
  public static void com.lynx.tasm.base.LLog.setMinimumLoggingLevel(int level);
  public static int com.lynx.tasm.base.LLog.getMinimumLoggingLevel();
  public static void com.lynx.tasm.base.LLog.setJSLogsFromExternalChannels(boolean isOpen);
  public static void com.lynx.tasm.base.LLog.v(String tag, String msg);
  public static void com.lynx.tasm.base.LLog.d(String tag, String msg);
  public static void com.lynx.tasm.base.LLog.i(String tag, String msg);
  public static void com.lynx.tasm.base.LLog.w(String tag, String msg);
  public static void com.lynx.tasm.base.LLog.e(String tag, String msg);
  public static void com.lynx.tasm.base.LLog.report(String tag, String msg);
  public static void com.lynx.tasm.base.LLog.internalLog(int level, String tag, String msg);
  public static void com.lynx.tasm.base.LLog.internalLog(int level, String tag, String msg, LogSource source, Long runtimeId, int messageStart);
  public static void com.lynx.tasm.base.LLog.DCHECK(boolean condition);
  public static void com.lynx.tasm.base.LLog.DTHROW();
  public static void com.lynx.tasm.base.LLog.DTHROW(@Nullable RuntimeException e);
  public static void com.lynx.tasm.base.LLog.initALog(long addr);
  public static void com.lynx.tasm.base.LLog.setLoggingDelegate(AbsLogDelegate delegate);
  public static boolean com.lynx.tasm.base.LLog.isLoggable(int level);
  public static int com.lynx.tasm.base.LLog.addLoggingDelegate(AbsLogDelegate delegate);
  public static synchronized void com.lynx.tasm.base.LLog.removeLoggingDelegate(int delegateId);
  public static void com.lynx.tasm.base.LLog.onEnvReady();
}

public class com::lynx::tasm::performance::performanceobserver::LoadBundleEntry : com.lynx.tasm.performance.performanceobserver.PipelineEntry {
  public double com.lynx.tasm.performance.performanceobserver.LoadBundleEntry.loadBundleStart loadBundleStart;
  public double com.lynx.tasm.performance.performanceobserver.LoadBundleEntry.loadBundleEnd loadBundleEnd;
  public double com.lynx.tasm.performance.performanceobserver.LoadBundleEntry.parseStart parseStart;
  public double com.lynx.tasm.performance.performanceobserver.LoadBundleEntry.parseEnd parseEnd;
  public double com.lynx.tasm.performance.performanceobserver.LoadBundleEntry.loadBackgroundStart loadBackgroundStart;
  public double com.lynx.tasm.performance.performanceobserver.LoadBundleEntry.loadBackgroundEnd loadBackgroundEnd;
  public double com.lynx.tasm.performance.performanceobserver.LoadBundleEntry.verifyTasmStart verifyTasmStart;
  public double com.lynx.tasm.performance.performanceobserver.LoadBundleEntry.verifyTasmEnd verifyTasmEnd;
  public double com.lynx.tasm.performance.performanceobserver.LoadBundleEntry.ffiStart ffiStart;
  public double com.lynx.tasm.performance.performanceobserver.LoadBundleEntry.ffiEnd ffiEnd;
  public com.lynx.tasm.performance.performanceobserver.LoadBundleEntry.LoadBundleEntry(HashMap< String, Object > props);
}

public interface com::lynx::tasm::component::DynamicComponentFetcher::LoadedHandler {
  public void com.lynx.tasm.component.DynamicComponentFetcher.LoadedHandler.onComponentLoaded(@Nullable byte[] data, @Nullable Throwable error);
}

public interface com::lynx::tasm::provider::LynxExternalResourceFetcherWrapper::LoadedHandler {
  public void com.lynx.tasm.provider.LynxExternalResourceFetcherWrapper.LoadedHandler.onLoaded(@Nullable byte[] data, @Nullable Throwable error);
}

public class abstract com::lynx::tasm::loader::LynxFontFaceLoader::Loader :  {
  public final Typeface com.lynx.tasm.loader.LynxFontFaceLoader.Loader.loadFontFace(LynxContext context, FontFace.TYPE type, String src);
}

public class com::lynx::tasm::image::ImageUtils::LocalCacheState :  {
  public boolean com.lynx.tasm.image.ImageUtils.LocalCacheState.mUseLocalCache mUseLocalCache;
  public boolean com.lynx.tasm.image.ImageUtils.LocalCacheState.mAwaitLocalCache mAwaitLocalCache;
}

public enum com::lynx::tasm::behavior::ui::utils::BorderRadius::Location {
  public com.lynx.tasm.behavior.ui.utils.BorderRadius.Location.TOP_LEFT TOP_LEFT;
  public com.lynx.tasm.behavior.ui.utils.BorderRadius.Location.TOP_RIGHT TOP_RIGHT;
  public com.lynx.tasm.behavior.ui.utils.BorderRadius.Location.BOTTOM_RIGHT BOTTOM_RIGHT;
  public com.lynx.tasm.behavior.ui.utils.BorderRadius.Location.BOTTOM_LEFT BOTTOM_LEFT;
}

public enum com::lynx::devtoolwrapper::LogBoxLogLevel {
  public com.lynx.devtoolwrapper.LogBoxLogLevel.Info Info;
  public com.lynx.devtoolwrapper.LogBoxLogLevel.Warn Warn;
  public com.lynx.devtoolwrapper.LogBoxLogLevel.Error Error;
  public final String com.lynx.devtoolwrapper.LogBoxLogLevel.value value;
  public com.lynx.devtoolwrapper.LogBoxLogLevel.LogBoxLogLevel(String value);
}

public enum com::lynx::tasm::base::LLog::LogChannel {
  public com.lynx.tasm.base.LLog.LogChannel.INTERNAL INTERNAL;
  public com.lynx.tasm.base.LLog.LogChannel.EXTERNAL EXTERNAL;
}

public class com::lynx::tasm::LynxTemplateRender::LogLynxViewClient : com.lynx.tasm.LynxViewClient {
  public void com.lynx.tasm.LynxTemplateRender.LogLynxViewClient.onPageStart(String url);
  public void com.lynx.tasm.LynxTemplateRender.LogLynxViewClient.onLoadSuccess();
  public void com.lynx.tasm.LynxTemplateRender.LogLynxViewClient.onFirstScreen();
  public void com.lynx.tasm.LynxTemplateRender.LogLynxViewClient.onPageUpdate();
  public void com.lynx.tasm.LynxTemplateRender.LogLynxViewClient.onDataUpdated();
}

public enum com::lynx::tasm::service::ILynxLogService::LogOutputChannelType {
  public com.lynx.tasm.service.ILynxLogService.LogOutputChannelType.Native Native;
  public com.lynx.tasm.service.ILynxLogService.LogOutputChannelType.Platform Platform;
}

public enum com::lynx::tasm::base::LogSource {
  public com.lynx.tasm.base.LogSource.Native Native;
  public com.lynx.tasm.base.LogSource.JS JS;
  public com.lynx.tasm.base.LogSource.JS_EXT JS_EXT;
  public com.lynx.tasm.base.LogSource.JAVA JAVA;
}

public class com::lynx::tasm::gesture::handler::LongPressGestureHandler : com.lynx.tasm.gesture.handler.BaseGestureHandler {
  public com.lynx.tasm.gesture.handler.LongPressGestureHandler.LongPressGestureHandler(int sign, LynxContext lynxContext, @NonNull GestureDetector gestureDetector, @NonNull GestureArenaMember gestureArenaMember);
  public void com.lynx.tasm.gesture.handler.LongPressGestureHandler.fail();
  public void com.lynx.tasm.gesture.handler.LongPressGestureHandler.end();
  public void com.lynx.tasm.gesture.handler.LongPressGestureHandler.reset();
}

public class com::lynx::tasm::utils::LRUHashMap : LinkedHashMap< K, V > {
  public com.lynx.tasm.utils.LRUHashMap< K, V >.LRUHashMap(int capacity);
  public int com.lynx.tasm.utils.LRUHashMap< K, V >.getCapacity();
}

public class com::lynx::tasm::behavior::ui::accessibility::LynxAccessibilityDelegate : AccessibilityDelegateCompat {
  public final String com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityDelegate.TAG TAG;
  public final boolean com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityDelegate.DEBUG DEBUG;
  public final int com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityDelegate.INVALID_NODE_ID INVALID_NODE_ID;
  public final int com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityDelegate.HOST_NODE_ID HOST_NODE_ID;
  public com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityDelegate.LynxAccessibilityDelegate(UIGroup hostUI);
  public AccessibilityNodeProviderCompat com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityDelegate.getAccessibilityNodeProvider(View host);
  public boolean com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityDelegate.dispatchHoverEvent(MotionEvent event);
  public boolean com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityDelegate.requestAccessibilityFocus(LynxBaseUI ui);
  public void com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityDelegate.setConfigEnableAccessibilityElement(boolean value);
}

public class com::lynx::tasm::behavior::ui::accessibility::LynxAccessibilityHelper :  {
  public com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityHelper.LynxAccessibilityHelper(UIGroup hostUI);
  public boolean com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityHelper.requestAccessibilityFocus(LynxBaseUI ui);
  public void com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityHelper.setConfigEnableAccessibilityElement(final boolean configEnableAccessibilityElement);
  public void com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityHelper.addUIToExclusiveMap(LynxBaseUI ui);
  public void com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityHelper.removeUIFromExclusiveMap(LynxBaseUI ui);
  public boolean com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityHelper.isImportantForAccessibility(final int status);
  public boolean com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityHelper.isImportantForAccessibility(final LynxBaseUI ui);
}

public class com::lynx::jsbridge::LynxAccessibilityModule : com.lynx.jsbridge.LynxContextModule {
  public final String com.lynx.jsbridge.LynxAccessibilityModule.NAME NAME;
  public final String com.lynx.jsbridge.LynxAccessibilityModule.MSG_MUTATION_STYLES MSG_MUTATION_STYLES;
  public final String com.lynx.jsbridge.LynxAccessibilityModule.MSG_CONTENT MSG_CONTENT;
  public final String com.lynx.jsbridge.LynxAccessibilityModule.MSG MSG;
  public com.lynx.jsbridge.LynxAccessibilityModule.LynxAccessibilityModule(LynxContext context);
}

public class com::lynx::tasm::behavior::ui::accessibility::LynxAccessibilityMutationHelper :  {
  public final int com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityMutationHelper.MUTATION_ACTION_INSERT MUTATION_ACTION_INSERT;
  public final int com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityMutationHelper.MUTATION_ACTION_REMOVE MUTATION_ACTION_REMOVE;
  public final int com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityMutationHelper.MUTATION_ACTION_DETACH MUTATION_ACTION_DETACH;
  public final int com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityMutationHelper.MUTATION_ACTION_UPDATE MUTATION_ACTION_UPDATE;
  public final int com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityMutationHelper.MUTATION_ACTION_STYLE_UPDATE MUTATION_ACTION_STYLE_UPDATE;
  public void com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityMutationHelper.registerMutationStyle(final ReadableArray array);
  public void com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityMutationHelper.insertA11yMutationEvent(final int action, final LynxBaseUI ui);
  public void com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityMutationHelper.insertA11yMutationEvent(final int action, final LynxBaseUI ui, final String key);
  public void com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityMutationHelper.flushA11yMutationEvents(LynxContext context);
}

public class com::lynx::tasm::behavior::ui::LynxAccessibilityNodeProvider : AccessibilityNodeProvider {
  public com.lynx.tasm.behavior.ui.LynxAccessibilityNodeProvider.LynxAccessibilityNodeProvider(UIGroup host);
  public AccessibilityNodeInfo com.lynx.tasm.behavior.ui.LynxAccessibilityNodeProvider.createAccessibilityNodeInfo(int virtualViewId);
  public List< AccessibilityNodeInfo > com.lynx.tasm.behavior.ui.LynxAccessibilityNodeProvider.findAccessibilityNodeInfosByText(String searched, int virtualViewId);
  public boolean com.lynx.tasm.behavior.ui.LynxAccessibilityNodeProvider.performAction(int virtualViewId, int action, Bundle arguments);
  public boolean com.lynx.tasm.behavior.ui.LynxAccessibilityNodeProvider.onHover(View view, MotionEvent event);
  public void com.lynx.tasm.behavior.ui.LynxAccessibilityNodeProvider.setConfigEnableAccessibilityElement(boolean configEnableAccessibilityElement);
  public void com.lynx.tasm.behavior.ui.LynxAccessibilityNodeProvider.setConfigEnableOverlapForAccessibilityElement(boolean configEnableOverlapForAccessibilityElement);
}

public class com::lynx::tasm::behavior::ui::accessibility::LynxAccessibilityStateHelper :  {
  public com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityStateHelper.LynxAccessibilityStateHelper(AccessibilityManager accessibilityManager, OnStateListener onStateListener);
  public void com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityStateHelper.removeAllListeners();
}

public enum com::lynx::tasm::behavior::ui::accessibility::LynxAccessibilityHelper::LynxAccessibilityTraits {
  public com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityHelper.LynxAccessibilityTraits.NONE NONE;
  public com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityHelper.LynxAccessibilityTraits.IMAGE IMAGE;
  public com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityHelper.LynxAccessibilityTraits.BUTTON BUTTON;
  public static String com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityHelper.LynxAccessibilityTraits.getValue(LynxAccessibilityTraits traits);
  public static LynxAccessibilityTraits com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityHelper.LynxAccessibilityTraits.fromValue(String value);
}

public class com::lynx::tasm::behavior::ui::accessibility::LynxAccessibilityWrapper : com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityStateHelper.OnStateListener {
  public final int com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityWrapper.ACCESSIBILITY_ELEMENT_DEFAULT ACCESSIBILITY_ELEMENT_DEFAULT;
  public final int com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityWrapper.ACCESSIBILITY_ELEMENT_FALSE ACCESSIBILITY_ELEMENT_FALSE;
  public final int com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityWrapper.ACCESSIBILITY_ELEMENT_TRUE ACCESSIBILITY_ELEMENT_TRUE;
  public final Rect com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityWrapper.INVALID_BOUNDS INVALID_BOUNDS;
  public com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityWrapper.LynxAccessibilityWrapper(UIBody uiBody);
  public void com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityWrapper.onPageConfigDecoded(final PageConfig config);
  public boolean com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityWrapper.onHoverEvent(UIBody.UIBodyView bodyView, MotionEvent event);
  public void com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityWrapper.onDestroy();
  public void com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityWrapper.insertA11yMutationEvent(final int action, final LynxBaseUI ui);
  public void com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityWrapper.handleMutationStyleUpdate(final LynxBaseUI ui, final StylesDiffMap props);
  public void com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityWrapper.flushA11yMutationEvents();
  public void com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityWrapper.registerMutationStyleInner(final ReadableMap params, final JavaOnlyMap res);
  public void com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityWrapper.requestAccessibilityFocus(final LynxBaseUI ui, final Callback callback);
  public void com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityWrapper.fetchAccessibilityTargets(final LynxBaseUI ui, final Callback callback);
  public void com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityWrapper.innerText(final LynxBaseUI ui, final Callback callback);
  public boolean com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityWrapper.shouldHandleA11yMutation();
  public boolean com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityWrapper.isSystemAccessibilityEnable();
  public void com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityWrapper.onLayoutFinish();
  public void com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityWrapper.addAccessibilityElementsUI(final LynxBaseUI root);
  public void com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityWrapper.addAccessibilityElementsA11yUI(final LynxBaseUI root);
  public void com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityWrapper.addOrRemoveUIFromExclusiveMap(LynxBaseUI ui, boolean isExclusive);
  public boolean com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityWrapper.shouldCreateNoFlattenUI();
  public void com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityWrapper.onAccessibilityEnable(boolean enable);
  public void com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityWrapper.onTouchExplorationEnable(boolean enable);
  public boolean com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityWrapper.enableDelegate();
  public boolean com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityWrapper.enableHelper();
  public LynxAccessibilityHelper com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityWrapper.getLynxAccessibilityHelper();
}

public interface com::lynx::tasm::animation::keyframe::LynxKeyframeAnimator::LynxAnimationListener {
  public void com.lynx.tasm.animation.keyframe.LynxKeyframeAnimator.LynxAnimationListener.onAnimationEnd(String value);
}

public enum com::lynx::tasm::animation::keyframe::LynxKeyframeAnimator::LynxAnimationPropertyType {
  public com.lynx.tasm.animation.keyframe.LynxKeyframeAnimator.LynxAnimationPropertyType.TRANSLATE_X TRANSLATE_X;
  public com.lynx.tasm.animation.keyframe.LynxKeyframeAnimator.LynxAnimationPropertyType.TRANSLATE_Y TRANSLATE_Y;
  public com.lynx.tasm.animation.keyframe.LynxKeyframeAnimator.LynxAnimationPropertyType.TRANSLATE_Z TRANSLATE_Z;
  public com.lynx.tasm.animation.keyframe.LynxKeyframeAnimator.LynxAnimationPropertyType.ROTATE_X ROTATE_X;
  public com.lynx.tasm.animation.keyframe.LynxKeyframeAnimator.LynxAnimationPropertyType.ROTATE_Y ROTATE_Y;
  public com.lynx.tasm.animation.keyframe.LynxKeyframeAnimator.LynxAnimationPropertyType.ROTATE_Z ROTATE_Z;
  public com.lynx.tasm.animation.keyframe.LynxKeyframeAnimator.LynxAnimationPropertyType.SCALE_X SCALE_X;
  public com.lynx.tasm.animation.keyframe.LynxKeyframeAnimator.LynxAnimationPropertyType.SCALE_Y SCALE_Y;
  public com.lynx.tasm.animation.keyframe.LynxKeyframeAnimator.LynxAnimationPropertyType.OPACITY OPACITY;
  public com.lynx.tasm.animation.keyframe.LynxKeyframeAnimator.LynxAnimationPropertyType.BG_COLOR BG_COLOR;
}

public interface com::lynx::jsbridge::LynxAttribute {
}

public class com::lynx::tasm::behavior::ui::utils::LynxBackground : LynxDrawableManager< BackgroundDrawable > {
  public com.lynx.tasm.behavior.ui.utils.LynxBackground.LynxBackground(LynxContext context);
  public void com.lynx.tasm.behavior.ui.utils.LynxBackground.setBackgroundColor(int color);
  public BackgroundDrawable com.lynx.tasm.behavior.ui.utils.LynxBackground.getDrawable();
  public boolean com.lynx.tasm.behavior.ui.utils.LynxBackground.setBorderRadius(int index, @Nullable ReadableArray ra);
  public void com.lynx.tasm.behavior.ui.utils.LynxBackground.setBorderColorForSpacingIndex(int spacingIndex, Integer color);
  public void com.lynx.tasm.behavior.ui.utils.LynxBackground.setBorderColor(int position, float color, float alpha);
  public void com.lynx.tasm.behavior.ui.utils.LynxBackground.setBorderRadiusCorner(int position, BorderRadius.Corner corner);
  public void com.lynx.tasm.behavior.ui.utils.LynxBackground.setBorderStyle(int position, int style);
  public int com.lynx.tasm.behavior.ui.utils.LynxBackground.getBackgroundColor();
  public BorderRadius com.lynx.tasm.behavior.ui.utils.LynxBackground.getBorderRadius();
  public void com.lynx.tasm.behavior.ui.utils.LynxBackground.setBoxShadowInsetDrawer(UIShadowProxy.InsetDrawer drawer);
  public UIShadowProxy.InsetDrawer com.lynx.tasm.behavior.ui.utils.LynxBackground.getBoxShadowInsetDrawer();
}

public class com::lynx::tasm::LynxBackgroundRuntime : com.lynx.tasm.ILynxErrorReceiver {
  public final int com.lynx.tasm.LynxBackgroundRuntime.STATE_START STATE_START;
  public final int com.lynx.tasm.LynxBackgroundRuntime.STATE_DESTROYED STATE_DESTROYED;
  public final int com.lynx.tasm.LynxBackgroundRuntime.STATE_ATTACHED STATE_ATTACHED;
  public final int com.lynx.tasm.LynxBackgroundRuntime.STATE_INVALID STATE_INVALID;
  public com.lynx.tasm.LynxBackgroundRuntime.LynxBackgroundRuntime( @NonNull Context context, @NonNull LynxBackgroundRuntimeOptions options);
  public void com.lynx.tasm.LynxBackgroundRuntime.addLynxBackgroundRuntimeClient(LynxBackgroundRuntimeClient client);
  public void com.lynx.tasm.LynxBackgroundRuntime.removeLynxBackgroundRuntimeClient(LynxBackgroundRuntimeClient client);
  public void com.lynx.tasm.LynxBackgroundRuntime.evaluateJavaScript(String url, @NonNull String sources);
  public String com.lynx.tasm.LynxBackgroundRuntime.getLastScriptUrl();
  public void com.lynx.tasm.LynxBackgroundRuntime.sendGlobalEvent(String name, JavaOnlyArray params);
  public void com.lynx.tasm.LynxBackgroundRuntime.destroy();
  public int com.lynx.tasm.LynxBackgroundRuntime.getState();
  public void com.lynx.tasm.LynxBackgroundRuntime.setSessionStorageItem(String key, TemplateData data);
  public void com.lynx.tasm.LynxBackgroundRuntime.getSessionStorageItem(String key, PlatformCallBack callback);
  public double com.lynx.tasm.LynxBackgroundRuntime.subscribeSessionStorage(String key, PlatformCallBack callBack);
  public void com.lynx.tasm.LynxBackgroundRuntime.unsubscribeSessionStorage(String key, double id);
  public void com.lynx.tasm.LynxBackgroundRuntime.onErrorOccurred(LynxError error);
  public void com.lynx.tasm.LynxBackgroundRuntime.onModuleMethodInvoked(String module, String method, int error_code);
  public boolean com.lynx.tasm.LynxBackgroundRuntime.attachToLynxView();
  public LynxModuleFactory com.lynx.tasm.LynxBackgroundRuntime.getModuleFactory();
  public LynxBackgroundRuntimeOptions com.lynx.tasm.LynxBackgroundRuntime.getLynxRuntimeOptions();
  public LynxDevtool com.lynx.tasm.LynxBackgroundRuntime.getDevtool();
  public long com.lynx.tasm.LynxBackgroundRuntime.getNativePtr();
  public void com.lynx.tasm.LynxBackgroundRuntime.addRuntimeLifecycleListener(@NonNull RuntimeLifecycleListener listener);
  public void com.lynx.tasm.LynxBackgroundRuntime.transitionToFullRuntime();
}

public class abstract com::lynx::tasm::LynxBackgroundRuntimeClient :  {
  public void com.lynx.tasm.LynxBackgroundRuntimeClient.onReceivedError(LynxError error);
  public void com.lynx.tasm.LynxBackgroundRuntimeClient.onModuleMethodInvoked(String module, String method, int error_code);
}

public class com::lynx::tasm::LynxBackgroundRuntimeOptions :  {
  public com.lynx.tasm.LynxBackgroundRuntimeOptions.LynxBackgroundRuntimeOptions();
  public void com.lynx.tasm.LynxBackgroundRuntimeOptions.registerModule(String name, Class<? extends LynxModule > module, Object param);
  public boolean com.lynx.tasm.LynxBackgroundRuntimeOptions.useQuickJSEngine();
  public boolean com.lynx.tasm.LynxBackgroundRuntimeOptions.isEnableUserBytecode();
  public void com.lynx.tasm.LynxBackgroundRuntimeOptions.setEnableUserBytecode(boolean mEnableUserBytecode);
  public String com.lynx.tasm.LynxBackgroundRuntimeOptions.getBytecodeSourceUrl();
  public void com.lynx.tasm.LynxBackgroundRuntimeOptions.setBytecodeSourceUrl(String mBytecodeSourceUrl);
  public void com.lynx.tasm.LynxBackgroundRuntimeOptions.setPendingCoreJsLoad(boolean pending);
  public boolean com.lynx.tasm.LynxBackgroundRuntimeOptions.isPendingCoreJsLoad();
  public LynxGroup com.lynx.tasm.LynxBackgroundRuntimeOptions.getLynxGroup();
  public void com.lynx.tasm.LynxBackgroundRuntimeOptions.setLynxGroup(@Nullable LynxGroup lynxGroup);
  public List< ParamWrapper > com.lynx.tasm.LynxBackgroundRuntimeOptions.getWrappers();
  public void com.lynx.tasm.LynxBackgroundRuntimeOptions.setResourceProviders(String key, LynxResourceProvider provider);
  public LynxResourceProvider com.lynx.tasm.LynxBackgroundRuntimeOptions.getResourceProvidersByKey(String key);
  public Set< Map.Entry< String, LynxResourceProvider > > com.lynx.tasm.LynxBackgroundRuntimeOptions.getAllResourceProviders();
  public void com.lynx.tasm.LynxBackgroundRuntimeOptions.setPresetData(TemplateData data);
  public void com.lynx.tasm.LynxBackgroundRuntimeOptions.genericResourceFetcher(@NonNull LynxGenericResourceFetcher fetcher);
  public void com.lynx.tasm.LynxBackgroundRuntimeOptions.mediaResourceFetcher(@NonNull LynxMediaResourceFetcher fetcher);
  public void com.lynx.tasm.LynxBackgroundRuntimeOptions.templateResourceFetcher(@NonNull LynxTemplateResourceFetcher fetcher);
  public static int com.lynx.tasm.LynxBackgroundRuntimeOptions.calcRuntimeFlags(boolean forceReloadJSCore, boolean useQuickJSEngine, boolean enablePendingJsTask, boolean enableUserBytecode, @Nullable Boolean enableJSGroupThread, @Nullable Boolean enablePendingCoreJsLoad);
}

public interface com::lynx::devtoolwrapper::LynxBaseInspectorOwner {
  public void com.lynx.devtoolwrapper.LynxBaseInspectorOwner.setReloadHelper(PageReloadHelper reloadHelper);
  public void com.lynx.devtoolwrapper.LynxBaseInspectorOwner.onTemplateAssemblerCreated(long ptr);
  public long com.lynx.devtoolwrapper.LynxBaseInspectorOwner.onBackgroundRuntimeCreated(String groupName);
  public void com.lynx.devtoolwrapper.LynxBaseInspectorOwner.reload(boolean ignoreCache);
  public void com.lynx.devtoolwrapper.LynxBaseInspectorOwner.reload(boolean ignoreCache, String templateBin, boolean fromTemplateFragments, int templateSize);
  public void com.lynx.devtoolwrapper.LynxBaseInspectorOwner.navigate(String url);
  public void com.lynx.devtoolwrapper.LynxBaseInspectorOwner.stopCasting();
  public void com.lynx.devtoolwrapper.LynxBaseInspectorOwner.continueCasting();
  public void com.lynx.devtoolwrapper.LynxBaseInspectorOwner.pauseCasting();
  public void com.lynx.devtoolwrapper.LynxBaseInspectorOwner.sendResponse(String response);
  public void com.lynx.devtoolwrapper.LynxBaseInspectorOwner.savePostURL(@NonNull final String postUrl);
  public void com.lynx.devtoolwrapper.LynxBaseInspectorOwner.onRootViewInputEvent(InputEvent ev);
  public void com.lynx.devtoolwrapper.LynxBaseInspectorOwner.destroy();
  public void com.lynx.devtoolwrapper.LynxBaseInspectorOwner.attach(LynxView view);
  public void com.lynx.devtoolwrapper.LynxBaseInspectorOwner.sendConsoleMessage(String text, int level, long timestamp);
  public void com.lynx.devtoolwrapper.LynxBaseInspectorOwner.updateScreenMetrics(int width, int height, float density);
  public void com.lynx.devtoolwrapper.LynxBaseInspectorOwner.attachToDebugBridge(String url);
  public String com.lynx.devtoolwrapper.LynxBaseInspectorOwner.getGroupID();
  public void com.lynx.devtoolwrapper.LynxBaseInspectorOwner.sendFileByAgent(String type, String file);
  public void com.lynx.devtoolwrapper.LynxBaseInspectorOwner.endTestbench(String filePath);
  public void com.lynx.devtoolwrapper.LynxBaseInspectorOwner.onPageUpdate();
  public void com.lynx.devtoolwrapper.LynxBaseInspectorOwner.attachLynxUIOwnerToAgent(LynxUIOwner uiOwner);
  public void com.lynx.devtoolwrapper.LynxBaseInspectorOwner.setLynxInspectorConsoleDelegate(Object delegate);
  public void com.lynx.devtoolwrapper.LynxBaseInspectorOwner.getConsoleObject(String objectId, boolean needStringify, Callback callback);
  public void com.lynx.devtoolwrapper.LynxBaseInspectorOwner.onPerfMetricsEvent(String eventName, @NonNull JSONObject data);
  public String com.lynx.devtoolwrapper.LynxBaseInspectorOwner.getDebugInfoUrl(String fileName);
  public void com.lynx.devtoolwrapper.LynxBaseInspectorOwner.onReceiveMessageEvent(ReadableMap event);
  public void com.lynx.devtoolwrapper.LynxBaseInspectorOwner.onGlobalPropsUpdated(TemplateData props);
  public void com.lynx.devtoolwrapper.LynxBaseInspectorOwner.setDevToolDelegate(IDevToolDelegate devToolDelegate);
  public void com.lynx.devtoolwrapper.LynxBaseInspectorOwner.showErrorMessageOnConsole(final LynxError error);
  public void com.lynx.devtoolwrapper.LynxBaseInspectorOwner.showMessageOnConsole(final String message, int level);
  public void com.lynx.devtoolwrapper.LynxBaseInspectorOwner.invokeCDPFromSDK(final String cdpMsg, final CDPResultCallback callback);
}

public interface com::lynx::devtoolwrapper::LynxBaseInspectorOwnerNG {
  public void com.lynx.devtoolwrapper.LynxBaseInspectorOwnerNG.sendMessage(CustomizedMessage message);
  public void com.lynx.devtoolwrapper.LynxBaseInspectorOwnerNG.subscribeMessage(String type, MessageHandler handler);
  public void com.lynx.devtoolwrapper.LynxBaseInspectorOwnerNG.unsubscribeMessage(String type);
  public void com.lynx.devtoolwrapper.LynxBaseInspectorOwnerNG.onRegisterModule(LynxModuleFactory moduleFactory);
  public void com.lynx.devtoolwrapper.LynxBaseInspectorOwnerNG.downloadResource(String url, LynxResourceCallback< byte[]> callback);
}

public class abstract com::lynx::tasm::behavior::ui::LynxBaseUI : com.lynx.tasm.behavior.ui.UIParent, com.lynx.tasm.behavior.event.EventTarget, com.lynx.tasm.behavior.PropertiesDispatcher, Cloneable, com.lynx.tasm.gesture.LynxNewGestureDelegate {
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setAccessibilityExclusiveFocus(boolean value);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setAccessibilityValue(String value);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setAccessibilityHeading(boolean value);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setConsumeHoverEvent(boolean value);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setAccessibilityTraits(@Nullable Dynamic value);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setAccessibilityRoleDescription(@Nullable Dynamic value);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setAccessibilityStatus(@Nullable Dynamic value);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setAccessibilityActions(ReadableArray array);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.requestAccessibilityFocus(ReadableMap params, Callback callback);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.fetchAccessibilityTargets(ReadableMap params, Callback callback);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.innerText(ReadableMap params, Callback callback);
  public String com.lynx.tasm.behavior.ui.LynxBaseUI.getAccessibilityId();
  public String com.lynx.tasm.behavior.ui.LynxBaseUI.getAccessibilityStatus();
  public ArrayList< String > com.lynx.tasm.behavior.ui.LynxBaseUI.getAccessibilityActions();
  public ArrayList< String > com.lynx.tasm.behavior.ui.LynxBaseUI.getAccessibilityElementsA11y();
  public final void com.lynx.tasm.behavior.ui.LynxBaseUI.setCSSPosition(int position);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setEnableScrollMonitor(@Nullable boolean enable);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setScrollMonitorTag(@Nullable String scrollMonitorTag);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setLynxDirection(int direction);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setIntersectionObservers(@Nullable ReadableArray observers);
  public JSONObject com.lynx.tasm.behavior.ui.LynxBaseUI.getPlatformCustomInfo();
  public int com.lynx.tasm.behavior.ui.LynxBaseUI.getCSSPositionType();
  public ArrayList< String > com.lynx.tasm.behavior.ui.LynxBaseUI.getAccessibilityElements();
  public CharSequence com.lynx.tasm.behavior.ui.LynxBaseUI.getAccessibilityLabel();
  public boolean com.lynx.tasm.behavior.ui.LynxBaseUI.getAccessibilityKeepFocused();
  public int com.lynx.tasm.behavior.ui.LynxBaseUI.getAccessibilityElementStatus();
  public boolean com.lynx.tasm.behavior.ui.LynxBaseUI.getAccessibilityEnableTap();
  public LynxAccessibilityHelper.LynxAccessibilityTraits com.lynx.tasm.behavior.ui.LynxBaseUI.getAccessibilityTraits();
  public String com.lynx.tasm.behavior.ui.LynxBaseUI.getAccessibilityRoleDescription();
  public String com.lynx.tasm.behavior.ui.LynxBaseUI.getName();
  public String com.lynx.tasm.behavior.ui.LynxBaseUI.getIdSelector();
  public String com.lynx.tasm.behavior.ui.LynxBaseUI.getRefIdSelector();
  public ReadableMap com.lynx.tasm.behavior.ui.LynxBaseUI.getDataset();
  public Rect com.lynx.tasm.behavior.ui.LynxBaseUI.getBound();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setBound(Rect bound);
  public int com.lynx.tasm.behavior.ui.LynxBaseUI.getWidth();
  public int com.lynx.tasm.behavior.ui.LynxBaseUI.getHeight();
  public int com.lynx.tasm.behavior.ui.LynxBaseUI.getTop();
  public int com.lynx.tasm.behavior.ui.LynxBaseUI.getLeft();
  public int com.lynx.tasm.behavior.ui.LynxBaseUI.getPaddingLeft();
  public int com.lynx.tasm.behavior.ui.LynxBaseUI.getPaddingTop();
  public int com.lynx.tasm.behavior.ui.LynxBaseUI.getPaddingRight();
  public int com.lynx.tasm.behavior.ui.LynxBaseUI.getPaddingBottom();
  public int com.lynx.tasm.behavior.ui.LynxBaseUI.getBorderLeftWidth();
  public int com.lynx.tasm.behavior.ui.LynxBaseUI.getBorderTopWidth();
  public int com.lynx.tasm.behavior.ui.LynxBaseUI.getBorderBottomWidth();
  public int com.lynx.tasm.behavior.ui.LynxBaseUI.getBorderRightWidth();
  public int com.lynx.tasm.behavior.ui.LynxBaseUI.getMarginLeft();
  public int com.lynx.tasm.behavior.ui.LynxBaseUI.getMarginTop();
  public int com.lynx.tasm.behavior.ui.LynxBaseUI.getMarginRight();
  public int com.lynx.tasm.behavior.ui.LynxBaseUI.getMarginBottom();
  public int com.lynx.tasm.behavior.ui.LynxBaseUI.getScrollX();
  public int com.lynx.tasm.behavior.ui.LynxBaseUI.getScrollY();
  public float com.lynx.tasm.behavior.ui.LynxBaseUI.getFontSize();
  public boolean com.lynx.tasm.behavior.ui.LynxBaseUI.getHasRadius();
  public List< TransformRaw > com.lynx.tasm.behavior.ui.LynxBaseUI.getTransformRaws();
  public boolean com.lynx.tasm.behavior.ui.LynxBaseUI.isEnableScrollMonitor();
  public String com.lynx.tasm.behavior.ui.LynxBaseUI.getScrollMonitorTag();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setTransform(@Nullable ReadableArray transform);
  public boolean com.lynx.tasm.behavior.ui.LynxBaseUI.hasConsumeSlideEventAngles();
  public TransformOrigin com.lynx.tasm.behavior.ui.LynxBaseUI.getTransformOriginStr();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setTransformOrigin(@Nullable ReadableArray params);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setPerspective(@Nullable ReadableArray perspective);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setLocalCache(@Nullable Dynamic localCache);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setSkipRedirection(boolean skipRedirection);
  public Dynamic com.lynx.tasm.behavior.ui.LynxBaseUI.getEnableLocalCache();
  public boolean com.lynx.tasm.behavior.ui.LynxBaseUI.getSkipRedirection();
  public int com.lynx.tasm.behavior.ui.LynxBaseUI.getImageRendering();
  public final boolean com.lynx.tasm.behavior.ui.LynxBaseUI.shouldDoTransform();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.updateLayout(int left, int top, int width, int height, int paddingLeft, int paddingTop, int paddingRight, int paddingBottom, int marginLeft, int marginTop, int marginRight, int marginBottom, int borderLeftWidth, int borderTopWidth, int borderRightWidth, int borderBottomWidth, Rect bound);
  public final void com.lynx.tasm.behavior.ui.LynxBaseUI.updateLayoutSize(int width, int height);
  public final int com.lynx.tasm.behavior.ui.LynxBaseUI.getLatestWidth();
  public final int com.lynx.tasm.behavior.ui.LynxBaseUI.getLatestHeight();
  public final boolean com.lynx.tasm.behavior.ui.LynxBaseUI.hasSizeChanged();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.measure();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.layout();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.updateLayout(int left, int top, int width, int height, int paddingLeft, int paddingTop, int paddingRight, int paddingBottom, int borderLeftWidth, int borderTopWidth, int borderRightWidth, int borderBottomWidth, Rect bound);
  public int com.lynx.tasm.behavior.ui.LynxBaseUI.getOriginTop();
  public int com.lynx.tasm.behavior.ui.LynxBaseUI.getOriginLeft();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setOriginLeft(int originLeft);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setOriginTop(int originTop);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.updateLayoutInfo(final LynxBaseUI layout);
  public boolean com.lynx.tasm.behavior.ui.LynxBaseUI.updateDrawingLayoutInfo(int left, int top, Rect bounds);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setLeft(int left);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setTop(int top);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setWidth(int width);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setHeight(int height);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.onLayoutUpdated();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.onPropsUpdated();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.onBeforeAnimation(int left, int top, int width, int height, int paddingLeft, int paddingTop, int paddingRight, int paddingBottom);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.onAnimationUpdated();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.onLayoutFinish(long operationId, @Nullable LynxBaseUI component);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.onLayoutFinish(long operationId);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.onAnimationNodeReady();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.afterAnimationNodeReady();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.onNodeReady();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.onNodeReload();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.onNodeRemoved();
  public boolean com.lynx.tasm.behavior.ui.LynxBaseUI.isFirstAnimatedReady();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.initTransitionAnimator(ReadableMap map);
  public TransitionAnimationManager com.lynx.tasm.behavior.ui.LynxBaseUI.getTransitionAnimator();
  public KeyframeManager com.lynx.tasm.behavior.ui.LynxBaseUI.getKeyframeManager();
  public boolean com.lynx.tasm.behavior.ui.LynxBaseUI.enableLayoutAnimation();
  public LayoutAnimationManager com.lynx.tasm.behavior.ui.LynxBaseUI.getLayoutAnimator();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setAnimation(@Nullable ReadableArray animationInfos);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.updateExtraData(final Object extraData);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.renderIfNeeded();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.onAttach();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.onDetach();
  public LynxBaseUI com.lynx.tasm.behavior.ui.LynxBaseUI.getParentBaseUI();
  public LynxBaseUI com.lynx.tasm.behavior.ui.LynxBaseUI.getExposeReceiveTarget();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.removeChildrenExposureUI();
  public String com.lynx.tasm.behavior.ui.LynxBaseUI.getExposeUniqueID();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.updateSticky(float[] sticky);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.updateMaxHeight(float maxHeight);
  public boolean com.lynx.tasm.behavior.ui.LynxBaseUI.checkStickyOnParentScroll(int l, int t);
  public int com.lynx.tasm.behavior.ui.LynxBaseUI.getSign();
  public int com.lynx.tasm.behavior.ui.LynxBaseUI.getGestureArenaMemberId();
  public int com.lynx.tasm.behavior.ui.LynxBaseUI.getPseudoStatus();
  public EventTarget com.lynx.tasm.behavior.ui.LynxBaseUI.parent();
  public EventTargetBase com.lynx.tasm.behavior.ui.LynxBaseUI.parentResponder();
  public float[] com.lynx.tasm.behavior.ui.LynxBaseUI.getTargetPoint(float x, float y, int scrollX, int scrollY, Rect targetRect, Matrix transformMatrix);
  public float[] com.lynx.tasm.behavior.ui.LynxBaseUI.getTargetPoint(float x, float y, int scrollX, int scrollY, View targetView, Matrix transformMatrix);
  public float[] com.lynx.tasm.behavior.ui.LynxBaseUI.getLocationOnScreen(final float[] point);
  public boolean com.lynx.tasm.behavior.ui.LynxBaseUI.isCustomHittest();
  public EventTarget com.lynx.tasm.behavior.ui.LynxBaseUI.hitTest(float x, float y);
  public EventTarget com.lynx.tasm.behavior.ui.LynxBaseUI.hitTest(float x, float y, boolean ignoreUserInteraction);
  public boolean com.lynx.tasm.behavior.ui.LynxBaseUI.containsPoint(float x, float y);
  public boolean com.lynx.tasm.behavior.ui.LynxBaseUI.containsPoint(float x, float y, boolean ignoreUserInteraction);
  public boolean com.lynx.tasm.behavior.ui.LynxBaseUI.childrenContainPoint(float x, float y);
  public boolean com.lynx.tasm.behavior.ui.LynxBaseUI.childrenContainPoint(float x, float y, boolean ignoreUserInteraction);
  public Map< String, EventsListener > com.lynx.tasm.behavior.ui.LynxBaseUI.getEvents();
  public Map< Integer, GestureDetector > com.lynx.tasm.behavior.ui.LynxBaseUI.getGestureDetectorMap();
  public Matrix com.lynx.tasm.behavior.ui.LynxBaseUI.getTransformMatrix();
  public boolean com.lynx.tasm.behavior.ui.LynxBaseUI.isUserInteractionEnabled();
  public boolean com.lynx.tasm.behavior.ui.LynxBaseUI.ignoreFocus();
  public boolean com.lynx.tasm.behavior.ui.LynxBaseUI.isFocusable();
  public boolean com.lynx.tasm.behavior.ui.LynxBaseUI.isScrollable();
  public boolean com.lynx.tasm.behavior.ui.LynxBaseUI.isOverlay();
  public boolean com.lynx.tasm.behavior.ui.LynxBaseUI.isClickable();
  public boolean com.lynx.tasm.behavior.ui.LynxBaseUI.isLongClickable();
  public boolean com.lynx.tasm.behavior.ui.LynxBaseUI.enableTouchPseudoPropagation();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.onPseudoStatusChanged(int preStatus, int currentStatus);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.onFocusChanged(boolean hasFocus, boolean isFocusTransition);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.onResponseChain();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.offResponseChain();
  public boolean com.lynx.tasm.behavior.ui.LynxBaseUI.isOnResponseChain();
  public boolean com.lynx.tasm.behavior.ui.LynxBaseUI.consumeSlideEvent(float angle);
  public boolean com.lynx.tasm.behavior.ui.LynxBaseUI.blockNativeEvent(MotionEvent ev);
  public boolean com.lynx.tasm.behavior.ui.LynxBaseUI.eventThrough();
  public EventTarget com.lynx.tasm.behavior.ui.LynxBaseUI.getParentLynxPageUI();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setParentLynxPageUI(EventTarget parentLynxPageUI);
  public HashMap< String, EventTarget > com.lynx.tasm.behavior.ui.LynxBaseUI.getChildrenLynxPageUI();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setChildrenLynxPageUI(HashMap< String, EventTarget > childrenLynxPageUI);
  public EventTarget com.lynx.tasm.behavior.ui.LynxBaseUI.getRootLynxPageUI();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setEventID(long eventID);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.startEventCapture(long eventID);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.onEventCapture(boolean isCatch, long eventID);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.startEventBubble(long eventID);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.onEventBubble(boolean isCatch, long eventID);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.startEventFire(boolean isStop, long eventID);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.onEventFire(boolean isStop, long eventID);
  public boolean com.lynx.tasm.behavior.ui.LynxBaseUI.isScrollContainer();
  public boolean com.lynx.tasm.behavior.ui.LynxBaseUI.dispatchEvent(LynxEventDetail event);
  public boolean com.lynx.tasm.behavior.ui.LynxBaseUI.dispatchTouch(MotionEvent ev);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.registerScrollStateListener(ScrollStateChangeListener listener);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.unRegisterScrollStateListener(ScrollStateChangeListener listener);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.notifyScrollStateChanged(int state);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.dispatchProperties(StylesDiffMap map);
  public Point com.lynx.tasm.behavior.ui.LynxBaseUI.getLastSize();
  public Point com.lynx.tasm.behavior.ui.LynxBaseUI.getLatestSize();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.copyPropFromOldUiInUpdateFlatten(LynxBaseUI oldUI);
  public boolean com.lynx.tasm.behavior.ui.LynxBaseUI.getNeedSortChildren();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setNeedSortChildren(boolean needSortChildren);
  public float com.lynx.tasm.behavior.ui.LynxBaseUI.getLastTranslateZ();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setLastTranslateZ(float lastTranslateZ);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setOffsetDescendantRectToLynxView(int[] offset);
  public int[] com.lynx.tasm.behavior.ui.LynxBaseUI.getOffsetDescendantRectToLynxView();
  public Matrix com.lynx.tasm.behavior.ui.LynxBaseUI.getHitTestMatrix();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.onListCellAppear(String itemKey, LynxBaseUI list);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.onListCellDisAppear(String itemKey, LynxBaseUI list, boolean isExist);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.onListCellPrepareForReuse(String itemKey, LynxBaseUI list);
  public String com.lynx.tasm.behavior.ui.LynxBaseUI.constructListStateCacheKey(String tagName, String itemKey, String idSelector);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.removeKeyFromNativeStorage(String key);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.storeKeyToNativeStorage(String key, Object value);
  public Object com.lynx.tasm.behavior.ui.LynxBaseUI.getValueFromNativeStorage(String key);
  public boolean com.lynx.tasm.behavior.ui.LynxBaseUI.initialPropsFlushed(String initialPropKey, String cacheKey);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setInitialPropsHasFlushed(String initialPropKey, String cacheKey);
  public LynxBaseUI com.lynx.tasm.behavior.ui.LynxBaseUI.clone();
  public GestureArenaManager com.lynx.tasm.behavior.ui.LynxBaseUI.getGestureArenaManager();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setGestureDetectorState(int gestureId, int state);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.consumeGesture(int gestureId, ReadableMap params);
  public boolean com.lynx.tasm.behavior.ui.LynxBaseUI.isEnableNewGesture();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setHitSlop(@Nullable Dynamic value);
  public Window com.lynx.tasm.behavior.ui.LynxBaseUI.getWindow();
  public TouchEventDispatcher com.lynx.tasm.behavior.ui.LynxBaseUI.getTouchEventDispatcher();
  public final int [] com.lynx.tasm.behavior.ui.LynxBaseUI.SPACING_TYPES SPACING_TYPES;
  public final short com.lynx.tasm.behavior.ui.LynxBaseUI.OVERFLOW_X OVERFLOW_X;
  public final short com.lynx.tasm.behavior.ui.LynxBaseUI.OVERFLOW_Y OVERFLOW_Y;
  public final short com.lynx.tasm.behavior.ui.LynxBaseUI.OVERFLOW_XY OVERFLOW_XY;
  public final short com.lynx.tasm.behavior.ui.LynxBaseUI.OVERFLOW_HIDDEN OVERFLOW_HIDDEN;
  public LynxBaseUI com.lynx.tasm.behavior.ui.LynxBaseUI.getPreviousDrawUI();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setPreviousDrawUI(LynxBaseUI previousDrawUI);
  public LynxBaseUI com.lynx.tasm.behavior.ui.LynxBaseUI.getNextDrawUI();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setNextDrawUI(LynxBaseUI nextDrawUI);
  public float com.lynx.tasm.behavior.ui.LynxBaseUI.getSkewX();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setSkewX(float skewX);
  public float com.lynx.tasm.behavior.ui.LynxBaseUI.getSkewY();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setSkewY(float mSkewY);
  public boolean com.lynx.tasm.behavior.ui.LynxBaseUI.isFlatten();
  public boolean com.lynx.tasm.behavior.ui.LynxBaseUI.canHaveFlattenChild();
  public LynxContext com.lynx.tasm.behavior.ui.LynxBaseUI.getLynxContext();
  public ViewGroup.LayoutParams com.lynx.tasm.behavior.ui.LynxBaseUI.generateLayoutParams(ViewGroup.LayoutParams childParams);
  public boolean com.lynx.tasm.behavior.ui.LynxBaseUI.needCustomLayout();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.requestLayout();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.invalidate();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.recognizeGesturere();
  public CSSPropertySetter.UIPaintStyles com.lynx.tasm.behavior.ui.LynxBaseUI.getOrCreateUIPaintStyles();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.applyUIPaintStylesToTarget(LynxBaseUI targetUI);
  public boolean com.lynx.tasm.behavior.ui.LynxBaseUI.getVisibility();
  public boolean com.lynx.tasm.behavior.ui.LynxBaseUI.isVisible();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.initialize();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.destroy();
  public LynxBackground com.lynx.tasm.behavior.ui.LynxBaseUI.getLynxBackground();
  public LynxMask com.lynx.tasm.behavior.ui.LynxBaseUI.getLynxMask();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setSign(int sign, String tagName);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setNodeIndex(int nodeIndex);
  public int com.lynx.tasm.behavior.ui.LynxBaseUI.getNodeIndex();
  public String com.lynx.tasm.behavior.ui.LynxBaseUI.getTagName();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setEvents(Map< String, EventsListener > events);
  public boolean com.lynx.tasm.behavior.ui.LynxBaseUI.getIncludeNativeGesture();
  public Map< Integer, BaseGestureHandler > com.lynx.tasm.behavior.ui.LynxBaseUI.getGestureHandlers();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setGestureDetectors(Map< Integer, GestureDetector > gestureDetectors);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setParent(UIParent parent);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setDrawParent(UIParent drawParent);
  public LynxBaseUI com.lynx.tasm.behavior.ui.LynxBaseUI.getDrawParent();
  public UIParent com.lynx.tasm.behavior.ui.LynxBaseUI.getParent();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.insertChild(LynxBaseUI child, int index);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.flattenChildrenCountIncrement();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.removeChild(LynxBaseUI child);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.flattenChildrenCountDecrement();
  public int com.lynx.tasm.behavior.ui.LynxBaseUI.flattenChildrenCount();
  public int com.lynx.tasm.behavior.ui.LynxBaseUI.getIndex(LynxBaseUI child);
  public List< LynxBaseUI > com.lynx.tasm.behavior.ui.LynxBaseUI.getChildren();
  public LynxBaseUI com.lynx.tasm.behavior.ui.LynxBaseUI.getChildAt(int index);
  public JavaOnlyMap com.lynx.tasm.behavior.ui.LynxBaseUI.getProps();
  public float com.lynx.tasm.behavior.ui.LynxBaseUI.getTranslationX();
  public float com.lynx.tasm.behavior.ui.LynxBaseUI.getTranslationY();
  public float com.lynx.tasm.behavior.ui.LynxBaseUI.getTranslationZ();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setTranslationZ(float zValue);
  public boolean com.lynx.tasm.behavior.ui.LynxBaseUI.getClipToRadius();
  public final void com.lynx.tasm.behavior.ui.LynxBaseUI.updateProperties(StylesDiffMap props);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.updatePropertiesInterval(StylesDiffMap props);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.afterPropsUpdated(StylesDiffMap props);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.boundingClientRect(ReadableMap params, Callback callback);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.uiOwnerDidPerformLayout();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.requestUIInfo(ReadableMap params, Callback callback);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.scrollIntoView(ReadableMap params);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.scrollIntoView(ReadableMap params, Callback callback);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.scrollIntoView(boolean isSmooth, String block, String inline);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.scrollIntoView(boolean isSmooth, String block, String inline, Callback callback);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setFocusable(Boolean focusable);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setIgnoreFocus(@Nullable Dynamic ignoreFocus);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setTestID(@Nullable String tag);
  public String com.lynx.tasm.behavior.ui.LynxBaseUI.getTestID();
  public Rect com.lynx.tasm.behavior.ui.LynxBaseUI.getBoundingClientRect();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.transformFromViewToRootView(View fromView, float[] inOutLocation);
  public TransOffset com.lynx.tasm.behavior.ui.LynxBaseUI.getTransformValue(float left, float right, float top, float bottom);
  public Rect com.lynx.tasm.behavior.ui.LynxBaseUI.getRectToWindow();
  public float[] com.lynx.tasm.behavior.ui.LynxBaseUI.scrollBy(float width, float height);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setName(@Nullable String name);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setIdSelector(@Nullable String idSelector);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setRefIdSelector(@Nullable String refId);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setDataset(@Nullable ReadableMap dataset);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setBackgroundColor(int backgroundColor);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setConsumeSlideEvent(@Nullable ReadableArray array);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setBlockListEvent(boolean blockListEvent);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setImageConfig(@Nullable String config);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setImageRendering(int imageRendering);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setEnableBitmapGradient(boolean enable);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setBackgroundImage(@Nullable ReadableArray bgImage);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setBackgroundOrigin(@Nullable ReadableArray bgOrigin);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setBackgroundPosition(@Nullable ReadableArray bgPosition);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setBackgroundRepeat(@Nullable ReadableArray bgRepeat);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setBackgroundSize(@Nullable ReadableArray bgSize);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setMaskImage(@Nullable ReadableArray maskImage);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setMaskOrigin(@Nullable ReadableArray maskOrigin);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setMaskPosition(@Nullable ReadableArray maskPosition);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setMaskRepeat(@Nullable ReadableArray maskRepeat);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setMaskSize(@Nullable ReadableArray maskSize);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setMaskClip(@Nullable ReadableArray maskClip);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setBoxShadow(@Nullable ReadableArray shadow);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setExposureID(Dynamic exposureID);
  public String com.lynx.tasm.behavior.ui.LynxBaseUI.getExposureID();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setExposureScene(String exposureScene);
  public String com.lynx.tasm.behavior.ui.LynxBaseUI.getExposureScene();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setExposureScreenMarginTop(String exposureScreenMarginTop);
  public float com.lynx.tasm.behavior.ui.LynxBaseUI.getExposureScreenMarginTop();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setExposureScreenMarginBottom(String exposureScreenMarginBottom);
  public float com.lynx.tasm.behavior.ui.LynxBaseUI.getExposureScreenMarginBottom();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setExposureScreenMarginLeft(String exposureScreenMarginLeft);
  public float com.lynx.tasm.behavior.ui.LynxBaseUI.getExposureScreenMarginLeft();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setExposureScreenMarginRight(String exposureScreenMarginRight);
  public float com.lynx.tasm.behavior.ui.LynxBaseUI.getExposureScreenMarginRight();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setEnableExposureUIMargin(boolean enableExposureUIMargin);
  public boolean com.lynx.tasm.behavior.ui.LynxBaseUI.getEnableExposureUIMargin();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setExposureUIMarginTop(String exposureUIMarginTop);
  public String com.lynx.tasm.behavior.ui.LynxBaseUI.getExposureUIMarginTop();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setExposureUIMarginBottom(String exposureUIMarginBottom);
  public String com.lynx.tasm.behavior.ui.LynxBaseUI.getExposureUIMarginBottom();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setExposureUIMarginLeft(String exposureUIMarginLeft);
  public String com.lynx.tasm.behavior.ui.LynxBaseUI.getExposureUIMarginLeft();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setExposureUIMarginRight(String exposureUIMarginRight);
  public String com.lynx.tasm.behavior.ui.LynxBaseUI.getExposureUIMarginRight();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setExposureArea(String exposureArea);
  public String com.lynx.tasm.behavior.ui.LynxBaseUI.getExposureArea();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setEnableExposureUIClip(boolean enableExposureUIClip);
  public EnableStatus com.lynx.tasm.behavior.ui.LynxBaseUI.getEnableExposureUIClip();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setBorderRadius(int index, @Nullable String borderRadius);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setBorderWidth(int index, String borderWidth);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setBorderColor(@Nullable String borderColor);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.onBorderRadiusUpdated(int index);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setBorderRadius(int index, @Nullable ReadableArray ra);
  public int com.lynx.tasm.behavior.ui.LynxBaseUI.getInitialOverflowType();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setOverflow(@Nullable Integer overflow);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setOverflow(int overflow);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setOverflowX(@Nullable Integer overflowX);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setOverflowY(@Nullable Integer overflowY);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setUserInteractionEnabled(@Nullable boolean userInteractionEnabled);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setNativeInteractionEnabled(@Nullable boolean nativeInteractionEnabled);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setBlockNativeEvent(@Nullable boolean blockNativeEvent);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setBlockNativeEventAreas(@Nullable Dynamic maybeBlockNativeEventAreas);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setEventThrough(@Nullable Dynamic eventThrough);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setEnableTouchPseudoPropagation(@Nullable Dynamic enableTouchPseudoPropagation);
  public int com.lynx.tasm.behavior.ui.LynxBaseUI.getOverflow();
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setBorderStyle(int index, int borderStyle);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setBorderWidth(int index, int borderWidth);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setBorderColor(int index, Integer color);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setOutlineColor(int color);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setOutlineWidth(float outlineWidth);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setOutlineStyle(int outlineStyle);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setFontSize(float fontSize);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setBackgroundClip(@Nullable ReadableArray bgClip);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setClipToRadius(@Nullable Dynamic clip);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setBorderColor(Integer color);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setCaretColor(@Nullable String caretColor);
  public boolean com.lynx.tasm.behavior.ui.LynxBaseUI.isAccessibilityHostUI();
  public boolean com.lynx.tasm.behavior.ui.LynxBaseUI.isAccessibilityDirectionVertical();
  public boolean com.lynx.tasm.behavior.ui.LynxBaseUI.requestChildUIRectangleOnScreen(LynxBaseUI child, Rect rect, boolean smooth);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setAccessibilityKeepFocused(@Nullable Dynamic value);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setAccessibilityElements(@Nullable Dynamic value);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setAccessibilityLabel(@Nullable Dynamic value);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setAccessibilityElement(@Nullable Dynamic value);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setAccessibilityEnableTap(@Nullable Dynamic value);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setAccessibilityElementsA11y(@Nullable Dynamic value);
  public void com.lynx.tasm.behavior.ui.LynxBaseUI.setA11yId(@Nullable Dynamic value);
}

public interface com::lynx::tasm::behavior::LynxBehavior {
  public String[] com.lynx.tasm.behavior.LynxBehavior.tagName();
  public boolean com.lynx.tasm.behavior.LynxBehavior.isCreateAsync() default false;
}

public enum com::lynx::tasm::LynxBooleanOption {
  public com.lynx.tasm.LynxBooleanOption.UNSET UNSET;
  public com.lynx.tasm.LynxBooleanOption.TRUE TRUE;
  public com.lynx.tasm.LynxBooleanOption.FALSE FALSE;
}

public interface com::lynx::jsbridge::LynxBytecodeCallback {
  public void com.lynx.jsbridge.LynxBytecodeCallback.onResponse(String errorMsg, JavaOnlyMap buffers);
}

public class com::lynx::tasm::navigator::LynxCardManager : com.lynx.tasm.navigator.LynxRouteLruCache.LynxRouteCacheListener {
  public void com.lynx.tasm.navigator.LynxCardManager.registerRoute(ReadableMap routeTable);
  public void com.lynx.tasm.navigator.LynxCardManager.registerInitLynxView(LynxView lynxView);
  public void com.lynx.tasm.navigator.LynxCardManager.push(final String name, Map< String, Object > param);
  public void com.lynx.tasm.navigator.LynxCardManager.replace(final String name, Map< String, Object > param);
  public void com.lynx.tasm.navigator.LynxCardManager.pop();
  public boolean com.lynx.tasm.navigator.LynxCardManager.onBackPressed();
  public void com.lynx.tasm.navigator.LynxCardManager.onEnterForeground();
  public void com.lynx.tasm.navigator.LynxCardManager.onEnterBackground();
  public void com.lynx.tasm.navigator.LynxCardManager.onLynxViewEvicted(LynxView view);
  public void com.lynx.tasm.navigator.LynxCardManager.onLynxViewRecreated(LynxRoute key, LynxViewCreationListener listener);
  public void com.lynx.tasm.navigator.LynxCardManager.onDestroy();
}

public class com::lynx::tasm::LynxConfigInfo :  {
  public String com.lynx.tasm.LynxConfigInfo.getPageVersion();
  public String com.lynx.tasm.LynxConfigInfo.getPageType();
  public String com.lynx.tasm.LynxConfigInfo.getCliVersion();
  public String com.lynx.tasm.LynxConfigInfo.getCustomData();
  public String com.lynx.tasm.LynxConfigInfo.getTemplateUrl();
  public String com.lynx.tasm.LynxConfigInfo.getTargetSdkVersion();
  public String com.lynx.tasm.LynxConfigInfo.getLepusVersion();
  public ThreadStrategyForRendering com.lynx.tasm.LynxConfigInfo.getThreadStrategyForRendering();
  public boolean com.lynx.tasm.LynxConfigInfo.isEnableLepusNG();
  public String com.lynx.tasm.LynxConfigInfo.getRadonMode();
  public String com.lynx.tasm.LynxConfigInfo.getReactVersion();
  public Set< String > com.lynx.tasm.LynxConfigInfo.getRegisteredComponent();
  public boolean com.lynx.tasm.LynxConfigInfo.getCssAlignWithLegacyW3c();
  public JSONObject com.lynx.tasm.LynxConfigInfo.toJson();
}

public class com::lynx::tasm::utils::LynxConstants :  {
  public final String com.lynx.tasm.utils.LynxConstants.TAG TAG;
  public final String com.lynx.tasm.utils.LynxConstants.ROOT_TAG_NAME ROOT_TAG_NAME;
  public final String com.lynx.tasm.utils.LynxConstants.LYNX_DEFAULT_COMPONENT_ID LYNX_DEFAULT_COMPONENT_ID;
  public final int com.lynx.tasm.utils.LynxConstants.LYNX_ROOT_UI_SIGN LYNX_ROOT_UI_SIGN;
}

public interface com::lynx::tasm::base::LynxConsumer {
  public void com.lynx.tasm.base.LynxConsumer< T >.accept(T t);
}

public class abstract com::lynx::tasm::behavior::LynxContext : com.lynx.tasm.behavior.LynxBaseContext, com.lynx.tasm.behavior.ExceptionHandler {
  public final int com.lynx.tasm.behavior.LynxContext.INSTANCE_ID_DEFAULT INSTANCE_ID_DEFAULT;
  public com.lynx.tasm.behavior.LynxContext.LynxContext(Context base, DisplayMetrics screenMetrics);
  public float com.lynx.tasm.behavior.LynxContext.getFontScale();
  public boolean com.lynx.tasm.behavior.LynxContext.enableEventReporter();
  public boolean com.lynx.tasm.behavior.LynxContext.enableTiming();
  public boolean com.lynx.tasm.behavior.LynxContext.isEmbeddedModeOn();
  public boolean com.lynx.tasm.behavior.LynxContext.isLayoutInElementModeOn();
  public boolean com.lynx.tasm.behavior.LynxContext.isEnginePoolEnabled();
  public void com.lynx.tasm.behavior.LynxContext.setEmbeddedMode(@EmbeddedMode.Mode int embeddedMode);
  public void com.lynx.tasm.behavior.LynxContext.setEnableAsyncLoadImage(boolean b);
  public boolean com.lynx.tasm.behavior.LynxContext.isEnableAsyncLoadImage();
  public LynxBooleanOption com.lynx.tasm.behavior.LynxContext.getLongTaskMonitorEnabled();
  public void com.lynx.tasm.behavior.LynxContext.setLongTaskMonitorEnabled(LynxBooleanOption enabled);
  public void com.lynx.tasm.behavior.LynxContext.onPageConfigDecoded(PageConfig config);
  public void com.lynx.tasm.behavior.LynxContext.setEnableAutoExpose(boolean enableAutoExpose);
  public boolean com.lynx.tasm.behavior.LynxContext.getAutoExpose();
  public String com.lynx.tasm.behavior.LynxContext.getPageVersion();
  public double com.lynx.tasm.behavior.LynxContext.getEnableLynxScrollFluency();
  public boolean com.lynx.tasm.behavior.LynxContext.getEnableVsyncAlignedFlush();
  public boolean com.lynx.tasm.behavior.LynxContext.isAsyncRedirect();
  public boolean com.lynx.tasm.behavior.LynxContext.isSyncImageAttach();
  public boolean com.lynx.tasm.behavior.LynxContext.isPrefetchImageOnCreate();
  public boolean com.lynx.tasm.behavior.LynxContext.isEnableCheckLocalImage();
  public boolean com.lynx.tasm.behavior.LynxContext.isEnableAsyncRequestImage();
  public boolean com.lynx.tasm.behavior.LynxContext.isEnableAsyncImageCallback();
  public boolean com.lynx.tasm.behavior.LynxContext.isForceImageAsyncRequest();
  public boolean com.lynx.tasm.behavior.LynxContext.isUseImagePostProcessor();
  public boolean com.lynx.tasm.behavior.LynxContext.getEnableLoadImageFromService();
  public boolean com.lynx.tasm.behavior.LynxContext.getDefaultOverflowVisible();
  public boolean com.lynx.tasm.behavior.LynxContext.isAsyncInitTTVideoEngine();
  public boolean com.lynx.tasm.behavior.LynxContext.getEnableFiberArch();
  public boolean com.lynx.tasm.behavior.LynxContext.getCssAlignWithLegacyW3c();
  public boolean com.lynx.tasm.behavior.LynxContext.isEnableNewGesture();
  public FluencyTraceHelper com.lynx.tasm.behavior.LynxContext.getFluencyTraceHelper();
  public DisplayMetrics com.lynx.tasm.behavior.LynxContext.getScreenMetrics();
  public void com.lynx.tasm.behavior.LynxContext.updateScreenSize(int screenWidth, int screenHeight);
  public void com.lynx.tasm.behavior.LynxContext.setImageInterceptor(ImageInterceptor imageInterceptor);
  public void com.lynx.tasm.behavior.LynxContext.setAsyncImageInterceptor(ImageInterceptor imageInterceptor);
  public ImageInterceptor com.lynx.tasm.behavior.LynxContext.imageInterceptor();
  public ImageInterceptor com.lynx.tasm.behavior.LynxContext.getAsyncImageInterceptor();
  public boolean com.lynx.tasm.behavior.LynxContext.getEnableImageSmallDiskCache();
  public void com.lynx.tasm.behavior.LynxContext.setEnableImageSmallDiskCache(boolean enable);
  public void com.lynx.tasm.behavior.LynxContext.setPrefetchImageOnCreate(boolean enable);
  public void com.lynx.tasm.behavior.LynxContext.setEnableAsyncImageCallback(boolean enable);
  public void com.lynx.tasm.behavior.LynxContext.setForceImageAsyncRequest(boolean enable);
  public void com.lynx.tasm.behavior.LynxContext.setLynxViewClient(LynxViewClient lynxViewClient);
  public LynxViewClient com.lynx.tasm.behavior.LynxContext.getLynxViewClient();
  public void com.lynx.tasm.behavior.LynxContext.setLynxView(LynxView lynxview);
  public void com.lynx.tasm.behavior.LynxContext.setUIBodyView(UIBodyView bodyView);
  public String com.lynx.tasm.behavior.LynxContext.getLynxSessionID();
  public LynxView com.lynx.tasm.behavior.LynxContext.getLynxView();
  public UIBodyView com.lynx.tasm.behavior.LynxContext.getUIBodyView();
  public void com.lynx.tasm.behavior.LynxContext.reportResourceError(String errMsg);
  public void com.lynx.tasm.behavior.LynxContext.reportResourceError(String src, String type, String error_msg);
  public void com.lynx.tasm.behavior.LynxContext.reportResourceError(int code, String src, String type, String error_msg);
  public void com.lynx.tasm.behavior.LynxContext.reportResourceError(String src, String type, LynxError error);
  public void com.lynx.tasm.behavior.LynxContext.setTouchEventDispatcher(TouchEventDispatcher dispatcher);
  public TouchEventDispatcher com.lynx.tasm.behavior.LynxContext.getTouchEventDispatcher();
  public void com.lynx.tasm.behavior.LynxContext.onGestureRecognized();
  public void com.lynx.tasm.behavior.LynxContext.onGestureRecognized(int sign);
  public void com.lynx.tasm.behavior.LynxContext.onGestureRecognized(LynxBaseUI ui);
  public void com.lynx.tasm.behavior.LynxContext.onPropsChanged(LynxBaseUI ui);
  public boolean com.lynx.tasm.behavior.LynxContext.isTouchMoving();
  public void com.lynx.tasm.behavior.LynxContext.setEventEmitter(EventEmitter eventEmitter);
  public EventEmitter com.lynx.tasm.behavior.LynxContext.getEventEmitter();
  public IListNodeInfoFetcher com.lynx.tasm.behavior.LynxContext.getListNodeInfoFetcher();
  public void com.lynx.tasm.behavior.LynxContext.setListNodeInfoFetcher(IListNodeInfoFetcher listNodeInfoFetcher);
  public void com.lynx.tasm.behavior.LynxContext.setIntersectionObserverManager(LynxIntersectionObserverManager manager);
  public LynxIntersectionObserverManager com.lynx.tasm.behavior.LynxContext.getIntersectionObserverManager();
  public Long com.lynx.tasm.behavior.LynxContext.getRuntimeId();
  public void com.lynx.tasm.behavior.LynxContext.setJSProxy(JSProxy proxy);
  public void com.lynx.tasm.behavior.LynxContext.setLayoutProxy(LynxLayoutProxy proxy);
  public JSModule com.lynx.tasm.behavior.LynxContext.getJSModule(String module);
  public void com.lynx.tasm.behavior.LynxContext.sendKeyEvent(int keyCode, String name);
  public void com.lynx.tasm.behavior.LynxContext.sendGlobalEvent(String name, JavaOnlyArray params);
  public abstract void com.lynx.tasm.behavior.LynxContext.handleException(Exception e);
  public void com.lynx.tasm.behavior.LynxContext.handleException(Exception e, JSONObject userDefinedInfo);
  public void com.lynx.tasm.behavior.LynxContext.handleException(Exception e, int errCode);
  public void com.lynx.tasm.behavior.LynxContext.handleException(Exception e, int errCode, JSONObject userDefinedInfo);
  public void com.lynx.tasm.behavior.LynxContext.handleLynxError(LynxError error);
  public void com.lynx.tasm.behavior.LynxContext.removeAnimationKeyframe(String removeName);
  public void com.lynx.tasm.behavior.LynxContext.setKeyframes(ReadableMap keyframes);
  public void com.lynx.tasm.behavior.LynxContext.setFontFaces(ReadableMap fontFaces);
  public ReadableMap com.lynx.tasm.behavior.LynxContext.getKeyframes(String name);
  public Map com.lynx.tasm.behavior.LynxContext.getFontFaces(String name);
  public FontFace com.lynx.tasm.behavior.LynxContext.getFontFace(String fontFamily);
  public String com.lynx.tasm.behavior.LynxContext.getTemplateUrl();
  public String com.lynx.tasm.behavior.LynxContext.getJSGroupThreadName();
  public void com.lynx.tasm.behavior.LynxContext.setTemplateUrl(String url);
  public void com.lynx.tasm.behavior.LynxContext.setJSGroupThreadName(String lynxGroupName);
  public void com.lynx.tasm.behavior.LynxContext.setLynxUIOwner(LynxUIOwner owner);
  public UIExposure com.lynx.tasm.behavior.LynxContext.getExposure();
  public LynxUIOwner com.lynx.tasm.behavior.LynxContext.getLynxUIOwner();
  public LynxBaseUI com.lynx.tasm.behavior.LynxContext.findLynxUIByName(@NonNull String name);
  public UIBody com.lynx.tasm.behavior.LynxContext.getUIBody();
  public void com.lynx.tasm.behavior.LynxContext.setUIBody(UIBody mUIBody);
  public void com.lynx.tasm.behavior.LynxContext.putSharedData(String key, Object value);
  public Object com.lynx.tasm.behavior.LynxContext.getSharedData(String key);
  public LynxBaseUI com.lynx.tasm.behavior.LynxContext.findLynxUIByIdSelector(@NonNull String idSelector, LynxBaseUI container);
  public LynxBaseUI com.lynx.tasm.behavior.LynxContext.findLynxUIBySign(int sign);
  public LynxBaseUI com.lynx.tasm.behavior.LynxContext.findLynxUIByComponentId(String componentId);
  public void com.lynx.tasm.behavior.LynxContext.invokeUIMethod(String sign, ReadableArray nodes, String method, ReadableMap params, Callback callback);
  public void com.lynx.tasm.behavior.LynxContext.reportModuleCustomError(String message);
  public void com.lynx.tasm.behavior.LynxContext.setShadowNodeOwner(ShadowNodeOwner shadowNodeOwner);
  public ShadowNode com.lynx.tasm.behavior.LynxContext.findShadowNodeBySign(int sign);
  public void com.lynx.tasm.behavior.LynxContext.findShadowNodeAndRunTask(int sign, LynxConsumer< ShadowNode > task);
  public LynxBaseInspectorOwner com.lynx.tasm.behavior.LynxContext.getBaseInspectorOwner();
  public void com.lynx.tasm.behavior.LynxContext.setProviderRegistry(LynxProviderRegistry providerRegistry);
  public LynxProviderRegistry com.lynx.tasm.behavior.LynxContext.getProviderRegistry();
  public void com.lynx.tasm.behavior.LynxContext.setGenericResourceFetcher(LynxGenericResourceFetcher genericResourceFetcher);
  public LynxGenericResourceFetcher com.lynx.tasm.behavior.LynxContext.getGenericResourceFetcher();
  public void com.lynx.tasm.behavior.LynxContext.setMediaResourceFetcher(LynxMediaResourceFetcher mediaResourceFetcher);
  public LynxMediaResourceFetcher com.lynx.tasm.behavior.LynxContext.getMediaResourceFetcher();
  public void com.lynx.tasm.behavior.LynxContext.setTemplateResourceFetcher(LynxTemplateResourceFetcher templateResourceFetcher);
  public LynxTemplateResourceFetcher com.lynx.tasm.behavior.LynxContext.getTemplateResourceFetcher();
  public void com.lynx.tasm.behavior.LynxContext.setFontLoader(LynxFontFaceLoader.Loader fontLoader);
  public LynxFontFaceLoader.Loader com.lynx.tasm.behavior.LynxContext.getFontLoader();
  public Object com.lynx.tasm.behavior.LynxContext.getFrescoCallerContext();
  public void com.lynx.tasm.behavior.LynxContext.setFrescoCallerContext(Object frescoCallerContext);
  public void com.lynx.tasm.behavior.LynxContext.runOnTasmThread(Runnable runnable);
  public void com.lynx.tasm.behavior.LynxContext.unregisterPatchFinishListener(@NonNull PatchFinishListener listener);
  public boolean com.lynx.tasm.behavior.LynxContext.isTextRefactorEnabled();
  public boolean com.lynx.tasm.behavior.LynxContext.isNewClipModeEnabled();
  public boolean com.lynx.tasm.behavior.LynxContext.isTextOverflowEnabled();
  public boolean com.lynx.tasm.behavior.LynxContext.isTextBoringLayoutEnabled();
  public boolean com.lynx.tasm.behavior.LynxContext.isTextLayoutCacheEnabled();
  public boolean com.lynx.tasm.behavior.LynxContext.useRelativeKeyboardHeightApi();
  public boolean com.lynx.tasm.behavior.LynxContext.getDefaultTextIncludePadding();
  public boolean com.lynx.tasm.behavior.LynxContext.getEnableEventRefactor();
  public boolean com.lynx.tasm.behavior.LynxContext.getEnableDisexposureWhenLynxHidden();
  public boolean com.lynx.tasm.behavior.LynxContext.getEnableExposureWhenLayout();
  public void com.lynx.tasm.behavior.LynxContext.reset();
  public void com.lynx.tasm.behavior.LynxContext.destory();
  public void com.lynx.tasm.behavior.LynxContext.clearExposure();
  public void com.lynx.tasm.behavior.LynxContext.addUIToExposedMap(LynxBaseUI ui);
  public void com.lynx.tasm.behavior.LynxContext.addUIToExposedMap(LynxBaseUI ui, @Nullable String uniqueID, @Nullable JavaOnlyMap data, @Nullable JavaOnlyMap options);
  public void com.lynx.tasm.behavior.LynxContext.removeUIFromExposedMap(LynxBaseUI ui);
  public void com.lynx.tasm.behavior.LynxContext.removeUIFromExposedMap(LynxBaseUI ui, @Nullable String uniqueID);
  public void com.lynx.tasm.behavior.LynxContext.onRootViewDraw(Canvas canvas);
  public void com.lynx.tasm.behavior.LynxContext.onAttachedToWindow();
  public boolean com.lynx.tasm.behavior.LynxContext.getEnableFlattenTranslateZ();
  public boolean com.lynx.tasm.behavior.LynxContext.enableEventThrough();
  public boolean com.lynx.tasm.behavior.LynxContext.getEnableNewIntersectionObserver();
  public boolean com.lynx.tasm.behavior.LynxContext.getEnableCreateViewAsync();
  public boolean com.lynx.tasm.behavior.LynxContext.isUseNewSwiper();
  public int com.lynx.tasm.behavior.LynxContext.getObserverFrameRate();
  public boolean com.lynx.tasm.behavior.LynxContext.getEnableExposureUIMargin();
  public int com.lynx.tasm.behavior.LynxContext.getLongPressDuration();
  public int com.lynx.tasm.behavior.LynxContext.getMapContainerType();
  public LynxAccessibilityWrapper com.lynx.tasm.behavior.LynxContext.getLynxAccessibilityWrapper();
  public void com.lynx.tasm.behavior.LynxContext.setContextData(HashMap< String, Object > contextData);
  public HashMap com.lynx.tasm.behavior.LynxContext.getContextData();
  public int com.lynx.tasm.behavior.LynxContext.getInstanceId();
  public void com.lynx.tasm.behavior.LynxContext.setInstanceId(int instanceId);
  public void com.lynx.tasm.behavior.LynxContext.setInPreLoad(boolean preload);
  public void com.lynx.tasm.behavior.LynxContext.setEnableImageResourceHint(boolean enable);
  public boolean com.lynx.tasm.behavior.LynxContext.getEnableImageResourceHint();
  public void com.lynx.tasm.behavior.LynxContext.setImageCustomParam(Map< String, String > imageCustomParam);
  public Map< String, String > com.lynx.tasm.behavior.LynxContext.getImageCustomParam();
  public void com.lynx.tasm.behavior.LynxContext.setImageFetcher(LynxImageFetcher fetcher);
  public LynxImageFetcher com.lynx.tasm.behavior.LynxContext.getImageFetcher();
  public void com.lynx.tasm.behavior.LynxContext.setLynxExtraData(Object extraData);
  public Object com.lynx.tasm.behavior.LynxContext.getLynxExtraData();
  public boolean com.lynx.tasm.behavior.LynxContext.isInPreLoad();
  public void com.lynx.tasm.behavior.LynxContext.runOnJSThread(Runnable runnable);
  public void com.lynx.tasm.behavior.LynxContext.setForceDarkAllowed(boolean allowed);
  public boolean com.lynx.tasm.behavior.LynxContext.getForceDarkAllowed();
  public void com.lynx.tasm.behavior.LynxContext.setEnableAutoConcurrency(boolean enable);
  public boolean com.lynx.tasm.behavior.LynxContext.getEnableAutoConcurrency();
  public void com.lynx.tasm.behavior.LynxContext.initUIExposure();
  public void com.lynx.tasm.behavior.LynxContext.EnsureEventDispatcher();
  public void com.lynx.tasm.behavior.LynxContext.setExtensionModuleForKey(LynxExtensionModule module, String key);
  public LynxExtensionModule com.lynx.tasm.behavior.LynxContext.getExtensionModuleByKey(String key);
  public Map< String, LynxExtensionModule > com.lynx.tasm.behavior.LynxContext.getExtensionModules();
  public void com.lynx.tasm.behavior.LynxContext.setEnableVSyncAligned(boolean enable);
  public boolean com.lynx.tasm.behavior.LynxContext.getEnableVSyncAligned();
}

public class com::lynx::jsbridge::LynxContextModule : com.lynx.jsbridge.LynxModule {
  public com.lynx.jsbridge.LynxContextModule.LynxContextModule(LynxContext context);
  public com.lynx.jsbridge.LynxContextModule.LynxContextModule(LynxContext context, Object param);
  public void com.lynx.jsbridge.LynxContextModule.destroy();
}

public class com::lynx::tasm::event::LynxCustomEvent : com.lynx.tasm.event.LynxEvent {
  public com.lynx.tasm.event.LynxCustomEvent.LynxCustomEvent(int tag, String type);
  public com.lynx.tasm.event.LynxCustomEvent.LynxCustomEvent(int tag, String type, Map< String, Object > params);
  public Map< String, Object > com.lynx.tasm.event.LynxCustomEvent.eventParams();
  public void com.lynx.tasm.event.LynxCustomEvent.addDetail(String key, Object value);
  public String com.lynx.tasm.event.LynxCustomEvent.paramsName();
}

public class com::lynx::tasm::behavior::ui::accessibility::LynxNodeProvider::LynxCustomNodeInfo :  {
  public void com.lynx.tasm.behavior.ui.accessibility.LynxNodeProvider.LynxCustomNodeInfo.invalid();
  public com.lynx.tasm.behavior.ui.accessibility.LynxNodeProvider.LynxCustomNodeInfo.LynxCustomNodeInfo(LynxBaseUI ui, UIGroup hostUI, Rect rectOnScreen);
  public com.lynx.tasm.behavior.ui.accessibility.LynxNodeProvider.LynxCustomNodeInfo.LynxCustomNodeInfo(View view, Rect rectOnScreen);
}

public class com::lynx::tasm::event::LynxDetailEvent : com.lynx.tasm.event.LynxCustomEvent {
  public com.lynx.tasm.event.LynxDetailEvent.LynxDetailEvent(int tag, String type);
  public com.lynx.tasm.event.LynxDetailEvent.LynxDetailEvent(int tag, String type, Map< String, Object > details);
  public Map< String, Object > com.lynx.tasm.event.LynxDetailEvent.eventParams();
  public String com.lynx.tasm.event.LynxDetailEvent.paramsName();
}

public class com::lynx::devtoolwrapper::LynxDevtool :  {
  public com.lynx.devtoolwrapper.LynxDevtool.LynxDevtool(LynxView view, LynxTemplateRender render, boolean debuggable);
  public com.lynx.devtoolwrapper.LynxDevtool.LynxDevtool(boolean debuggable, Context context);
  public void com.lynx.devtoolwrapper.LynxDevtool.attachContext(Context context);
  public void com.lynx.devtoolwrapper.LynxDevtool.destroy();
  public void com.lynx.devtoolwrapper.LynxDevtool.onLoadFromLocalFile(byte[] template, TemplateData templateData, String baseUrl);
  public void com.lynx.devtoolwrapper.LynxDevtool.onGlobalPropsChanged(TemplateData globalProps);
  public void com.lynx.devtoolwrapper.LynxDevtool.onLoadFromURL(@NonNull final String templateUrl, @NonNull final String postUrl, @Nullable final TemplateData templateData, @Nullable final Map< String, Object > map, @Nullable final String jsonData);
  public void com.lynx.devtoolwrapper.LynxDevtool.onLoadFromBundle(TemplateBundle templateBundle, TemplateData templateData, String baseUrl);
  public void com.lynx.devtoolwrapper.LynxDevtool.onRootViewInputEvent(InputEvent ev);
  public void com.lynx.devtoolwrapper.LynxDevtool.onTemplateAssemblerCreated(long ptr);
  public long com.lynx.devtoolwrapper.LynxDevtool.onBackgroundRuntimeCreated(String groupName);
  public void com.lynx.devtoolwrapper.LynxDevtool.onEnterForeground();
  public void com.lynx.devtoolwrapper.LynxDevtool.onEnterBackground();
  public void com.lynx.devtoolwrapper.LynxDevtool.showErrorMessage(final LynxError error);
  public void com.lynx.devtoolwrapper.LynxDevtool.onLoadFinished();
  public void com.lynx.devtoolwrapper.LynxDevtool.onRegisterModule(LynxModuleFactory moduleFactory);
  public void com.lynx.devtoolwrapper.LynxDevtool.attach(LynxView lynxView);
  public void com.lynx.devtoolwrapper.LynxDevtool.attach(@NonNull LynxView lynxView, @NonNull LynxTemplateRender render);
  public void com.lynx.devtoolwrapper.LynxDevtool.onUpdate(TemplateData data);
  public LynxBaseInspectorOwner com.lynx.devtoolwrapper.LynxDevtool.getBaseInspectorOwner();
  public void com.lynx.devtoolwrapper.LynxDevtool.updateScreenMetrics(int width, int height, float density);
  public void com.lynx.devtoolwrapper.LynxDevtool.attachToDebugBridge(String url);
  public void com.lynx.devtoolwrapper.LynxDevtool.onPageUpdate();
  public void com.lynx.devtoolwrapper.LynxDevtool.downloadResource(String url, LynxResourceCallback callback);
  public String com.lynx.devtoolwrapper.LynxDevtool.getTemplateUrl();
  public Map< String, Object > com.lynx.devtoolwrapper.LynxDevtool.getAllJsSource();
  public LynxContext com.lynx.devtoolwrapper.LynxDevtool.getLynxContext();
  public void com.lynx.devtoolwrapper.LynxDevtool.attachLynxUIOwner(LynxUIOwner uiOwner);
  public void com.lynx.devtoolwrapper.LynxDevtool.onTemplateLoadSuccess(byte[] template);
  public void com.lynx.devtoolwrapper.LynxDevtool.onPerfMetricsEvent(String eventName, @NonNull JSONObject data);
  public String com.lynx.devtoolwrapper.LynxDevtool.getDebugInfoUrl(String fileName);
  public Boolean com.lynx.devtoolwrapper.LynxDevtool.enableAirStrictMode();
  public void com.lynx.devtoolwrapper.LynxDevtool.onReceiveMessageEvent(ReadableMap event);
}

public interface com::lynx::devtoolwrapper::LynxDevtoolCardListener {
  public void com.lynx.devtoolwrapper.LynxDevtoolCardListener.open(String url);
}

public class com::lynx::tasm::LynxDevToolDelegateImpl : com.lynx.devtoolwrapper.IDevToolDelegate {
  public com.lynx.tasm.LynxDevToolDelegateImpl.LynxDevToolDelegateImpl(LynxTemplateRender render);
  public void com.lynx.tasm.LynxDevToolDelegateImpl.onDispatchMessageEvent(ReadableMap map);
  public void com.lynx.tasm.LynxDevToolDelegateImpl.takeScreenshot(ScreenshotBitmapHandler handler, String screenShotMode);
  public void com.lynx.tasm.LynxDevToolDelegateImpl.scrollIntoViewFromUI(int nodeId);
  public String com.lynx.tasm.LynxDevToolDelegateImpl.getActualScreenshotMode();
  public int com.lynx.tasm.LynxDevToolDelegateImpl.getNodeForLocation(float x, float y, String mode);
  public float[] com.lynx.tasm.LynxDevToolDelegateImpl.getTransformValue(int id, float[] padBorderMarginLayout);
  public Bitmap com.lynx.tasm.LynxDevToolDelegateImpl.getBitmapOfView();
}

public class com::lynx::devtoolwrapper::LynxDevtoolGlobalHelper :  {
  public static LynxDevtoolGlobalHelper com.lynx.devtoolwrapper.LynxDevtoolGlobalHelper.getInstance();
  public void com.lynx.devtoolwrapper.LynxDevtoolGlobalHelper.setAppInfo(Context context, Map< String, String > appInfo);
  public void com.lynx.devtoolwrapper.LynxDevtoolGlobalHelper.setAppInfo(Context context, String appName, String appVersion);
  public void com.lynx.devtoolwrapper.LynxDevtoolGlobalHelper.setAppInfo(String appName, String appVersion);
  public boolean com.lynx.devtoolwrapper.LynxDevtoolGlobalHelper.isRemoteDebugAvailable();
  public boolean com.lynx.devtoolwrapper.LynxDevtoolGlobalHelper.shouldPrepareRemoteDebug(String url);
  public boolean com.lynx.devtoolwrapper.LynxDevtoolGlobalHelper.prepareRemoteDebug(String scheme);
  public void com.lynx.devtoolwrapper.LynxDevtoolGlobalHelper.setContext(Context context);
  public void com.lynx.devtoolwrapper.LynxDevtoolGlobalHelper.showDebugView(ViewGroup root);
  public void com.lynx.devtoolwrapper.LynxDevtoolGlobalHelper.registerCardListener(LynxDevtoolCardListener listener);
  public void com.lynx.devtoolwrapper.LynxDevtoolGlobalHelper.onPerfMetricsEvent(String eventName, @NonNull JSONObject data, int instanceId);
}

public class com::lynx::devtoolwrapper::LynxDevToolUtils :  {
  public static void com.lynx.devtoolwrapper.LynxDevToolUtils.setDevToolLibraryLoader(INativeLibraryLoader loader);
  public static void com.lynx.devtoolwrapper.LynxDevToolUtils.setDevtoolEnv(String key, Object value);
  public static void com.lynx.devtoolwrapper.LynxDevToolUtils.setDevtoolEnv(String groupKey, Set< String > newGroupValues);
  public static Object com.lynx.devtoolwrapper.LynxDevToolUtils.getDevtoolEnv(String key, Object defaultValue);
  public static Set< String > com.lynx.devtoolwrapper.LynxDevToolUtils.getDevtoolEnv(String groupKey);
}

public class abstract com::lynx::tasm::behavior::ui::utils::LynxDrawableManager< T extends LayerDrawable :  {
}

public class com::lynx::tasm::LynxEngineBuilder : com.lynx.tasm.LynxViewBuilder {
  public com.lynx.tasm.LynxEngineBuilder.LynxEngineBuilder();
  public ILynxEngine com.lynx.tasm.LynxEngineBuilder.build();
}

public class com::lynx::tasm::core::LynxEngineProxy :  {
  public long com.lynx.tasm.core.LynxEngineProxy.mNativePtr mNativePtr;
  public com.lynx.tasm.core.LynxEngineProxy.LynxEngineProxy(long nativeCreator);
  public void com.lynx.tasm.core.LynxEngineProxy.destroy();
  public void com.lynx.tasm.core.LynxEngineProxy.dispatchTaskToLynxEngine(Runnable runnable);
  public void com.lynx.tasm.core.LynxEngineProxy.sendTouchEvent(LynxTouchEvent event);
  public void com.lynx.tasm.core.LynxEngineProxy.sendMultiTouchEvent(LynxTouchEvent event);
  public void com.lynx.tasm.core.LynxEngineProxy.sendCustomEvent(LynxCustomEvent event);
  public void com.lynx.tasm.core.LynxEngineProxy.sendGestureEvent(final String name, final int tag, int gestureId, final ByteBuffer params, final int length);
  public void com.lynx.tasm.core.LynxEngineProxy.onPseudoStatusChanged(final int id, final int preStatus, final int currentStatus);
  public void com.lynx.tasm.core.LynxEngineProxy.invokeLepusApiCallback(int callbackID, String entryName, Object data);
  public void com.lynx.tasm.core.LynxEngineProxy.startEventGenerate(LynxEvent event);
  public void com.lynx.tasm.core.LynxEngineProxy.startEventCapture(long eventID);
  public void com.lynx.tasm.core.LynxEngineProxy.startEventBubble(long eventID);
  public void com.lynx.tasm.core.LynxEngineProxy.startEventFire(boolean isStop, long eventID);
}

public enum com::lynx::tasm::LynxEngine::LynxEngineState {
  public com.lynx.tasm.LynxEngine.LynxEngineState.UN_LOADED UN_LOADED;
  public com.lynx.tasm.LynxEngine.LynxEngineState.READY_BE_REUSED READY_BE_REUSED;
  public com.lynx.tasm.LynxEngine.LynxEngineState.ON_REUSING ON_REUSING;
  public com.lynx.tasm.LynxEngine.LynxEngineState.FREEZED FREEZED;
  public com.lynx.tasm.LynxEngine.LynxEngineState.DESTROYED DESTROYED;
}

public class com::lynx::tasm::LynxEnv :  {
  public final String com.lynx.tasm.LynxEnv.SP_NAME SP_NAME;
  public static LynxEnv com.lynx.tasm.LynxEnv.inst();
  public static void com.lynx.tasm.LynxEnv.setLazyInitializer(Initializer initializer);
  public static void com.lynx.tasm.LynxEnv.reportPiperInvoked(String moduleName, String methodName, String paramStr, String url);
  public static String com.lynx.tasm.LynxEnv.getStringFromExternalEnv(LynxEnvKey key);
  public static boolean com.lynx.tasm.LynxEnv.getBooleanFromExternalEnv(LynxEnvKey key, boolean defaultValue);
  public static boolean com.lynx.tasm.LynxEnv.runJavaTaskOnConcurrentLoop(Runnable task, int taskType);
  public static void com.lynx.tasm.LynxEnv.onJavaTaskOnConcurrentLoop(long taskId, int taskType);
  public static void com.lynx.tasm.LynxEnv.clearBytecode(String bytecodeSourceUrl, boolean useV8);
  public synchronized void com.lynx.tasm.LynxEnv.init(Application context, INativeLibraryLoader nativeLibraryLoader, AbsTemplateProvider templateProvider, BehaviorBundle behaviorBundle);
  public synchronized void com.lynx.tasm.LynxEnv.init(Application context, INativeLibraryLoader nativeLibraryLoader, AbsTemplateProvider templateProvider, BehaviorBundle behaviorBundle, @Nullable IDynamicHandler dynamicHandler);
  public void com.lynx.tasm.LynxEnv.lazyInitIfNeeded();
  public void com.lynx.tasm.LynxEnv.warmClass();
  public void com.lynx.tasm.LynxEnv.registerModule(String name, Class<? extends LynxModule > module);
  public void com.lynx.tasm.LynxEnv.registerModule(String name, Class<? extends LynxModule > module, Object param);
  public LynxModuleFactory com.lynx.tasm.LynxEnv.getModuleFactory();
  public void com.lynx.tasm.LynxEnv.addResourceProvider(String key, LynxResourceProvider provider);
  public Map< String, LynxResourceProvider > com.lynx.tasm.LynxEnv.getResourceProvider();
  public synchronized boolean com.lynx.tasm.LynxEnv.initNativeLibraries(INativeLibraryLoader loader);
  public void com.lynx.tasm.LynxEnv.loadNativeLynxLibrary(INativeLibraryLoader nativeLibraryLoader);
  public void com.lynx.tasm.LynxEnv.addBehaviors(@NonNull List< Behavior > behaviors);
  public void com.lynx.tasm.LynxEnv.addBehavior(@NonNull Behavior behavior);
  public List< Behavior > com.lynx.tasm.LynxEnv.getBehaviors();
  public Map< String, Behavior > com.lynx.tasm.LynxEnv.getBehaviorMap();
  public AbsTemplateProvider com.lynx.tasm.LynxEnv.getTemplateProvider();
  public AbsNetworkingModuleProvider com.lynx.tasm.LynxEnv.getNetworkingModuleProvider();
  public ResProvider com.lynx.tasm.LynxEnv.getResProvider();
  public void com.lynx.tasm.LynxEnv.setResProvider(ResProvider resProvider);
  public ThemeResourceProvider com.lynx.tasm.LynxEnv.getThemeResourceProviderProvider();
  public void com.lynx.tasm.LynxEnv.setThemeResourceProvider(ThemeResourceProvider themeResourceProvider);
  public BehaviorBundle com.lynx.tasm.LynxEnv.getBehaviorBundle();
  public synchronized String com.lynx.tasm.LynxEnv.getLastUrl();
  public void com.lynx.tasm.LynxEnv.setLastUrl(String url);
  public boolean com.lynx.tasm.LynxEnv.hasInited();
  public void com.lynx.tasm.LynxEnv.setDevtoolEnv(String key, Object value);
  public void com.lynx.tasm.LynxEnv.setDevtoolEnv(String groupKey, Set< String > newGroupValues);
  public boolean com.lynx.tasm.LynxEnv.getDevtoolEnv(String key, boolean defaultValue);
  public int com.lynx.tasm.LynxEnv.getDevtoolEnv(String key, int defaultValue);
  public Set< String > com.lynx.tasm.LynxEnv.getDevtoolEnv(String groupKey);
  public boolean com.lynx.tasm.LynxEnv.isLynxDebugEnabled();
  public void com.lynx.tasm.LynxEnv.initDevtool();
  public void com.lynx.tasm.LynxEnv.enableLynxDebug(boolean enableLynxDebug);
  public boolean com.lynx.tasm.LynxEnv.isDevtoolComponentAttach();
  public boolean com.lynx.tasm.LynxEnv.isDevtoolEnabled();
  public void com.lynx.tasm.LynxEnv.enableDevtool(boolean enableDevTool);
  public boolean com.lynx.tasm.LynxEnv.isDevtoolEnabledForDebuggableView();
  public void com.lynx.tasm.LynxEnv.enableDevtoolForDebuggableView(boolean enable);
  public boolean com.lynx.tasm.LynxEnv.isRedBoxEnabled();
  public boolean com.lynx.tasm.LynxEnv.isLogBoxEnabled();
  public void com.lynx.tasm.LynxEnv.enableRedBox(boolean enableLogBox);
  public void com.lynx.tasm.LynxEnv.enableLogBox(boolean enableLogBox);
  public boolean com.lynx.tasm.LynxEnv.isPixelCopyEnabled();
  public void com.lynx.tasm.LynxEnv.enablePixelCopy(boolean enabled);
  public boolean com.lynx.tasm.LynxEnv.isHighlightTouchEnabled();
  public void com.lynx.tasm.LynxEnv.enableHighlightTouch(boolean enableHighlightTouch);
  public boolean com.lynx.tasm.LynxEnv.isDebugModeEnabled();
  public void com.lynx.tasm.LynxEnv.enableDebugMode(boolean enableDebugMode);
  public boolean com.lynx.tasm.LynxEnv.isLaunchRecordEnabled();
  public void com.lynx.tasm.LynxEnv.enableLaunchRecord(boolean enableLaunchRecord);
  public void com.lynx.tasm.LynxEnv.enableLayoutOnly(boolean enableLayoutOnly);
  public boolean com.lynx.tasm.LynxEnv.enableVSyncAlignedMessageLoopGlobal();
  public boolean com.lynx.tasm.LynxEnv.shouldForceLayoutOnBackgroundThread();
  public boolean com.lynx.tasm.LynxEnv.isLayoutOnlyEnabled();
  public void com.lynx.tasm.LynxEnv.setRecordEnable(boolean enable);
  public boolean com.lynx.tasm.LynxEnv.getRecordEnable();
  public void com.lynx.tasm.LynxEnv.setCreateViewAsync(boolean isCreateViewAsync);
  public void com.lynx.tasm.LynxEnv.setVsyncAlignedFlushGlobalSwitch(boolean enable);
  public boolean com.lynx.tasm.LynxEnv.getCreateViewAsync();
  public boolean com.lynx.tasm.LynxEnv.getVsyncAlignedFlushGlobalSwitch();
  public boolean com.lynx.tasm.LynxEnv.isSettingsEnableNewImage();
  public void com.lynx.tasm.LynxEnv.setDebug(boolean debug);
  public void com.lynx.tasm.LynxEnv.setEnableDevtoolDebug(boolean enableDevToolDebug);
  public boolean com.lynx.tasm.LynxEnv.isEnableDevtoolDebug();
  public void com.lynx.tasm.LynxEnv.setEnableJSDebug(boolean enableJSDebug);
  public boolean com.lynx.tasm.LynxEnv.isEnableJSDebug();
  public void com.lynx.tasm.LynxEnv.setEnableLogBox(boolean enableLogBox);
  public boolean com.lynx.tasm.LynxEnv.isEnableLogBox();
  public boolean com.lynx.tasm.LynxEnv.isRadonCompatibleEnabled();
  public void com.lynx.tasm.LynxEnv.enableRadonCompatible(boolean enableRadonCompatible);
  public boolean com.lynx.tasm.LynxEnv.isNativeLibraryLoaded();
  public void com.lynx.tasm.LynxEnv.setNativeLibraryLoaded(boolean status);
  public Context com.lynx.tasm.LynxEnv.getAppContext();
  public void com.lynx.tasm.LynxEnv.setNetworkingModuleProvider(AbsNetworkingModuleProvider netProvider);
  public void com.lynx.tasm.LynxEnv.onLowMemory();
  public InputMethodManager com.lynx.tasm.LynxEnv.getInputMethodManager();
  public void com.lynx.tasm.LynxEnv.setBackgroundImageLoader(BackgroundImageLoader bgImageLoader);
  public BackgroundImageLoader com.lynx.tasm.LynxEnv.getBackgroundImageLoader();
  public HeroTransitionManager com.lynx.tasm.LynxEnv.getHeroTransitionManager();
  public String com.lynx.tasm.LynxEnv.getLynxVersion();
  public String com.lynx.tasm.LynxEnv.getSSRApiVersion();
  public void com.lynx.tasm.LynxEnv.addLynxViewClient(LynxViewClient client);
  public void com.lynx.tasm.LynxEnv.removeLynxViewClient(LynxViewClient client);
  public void com.lynx.tasm.LynxEnv.setLocale(String locale);
  public String com.lynx.tasm.LynxEnv.getLocale();
  public LynxViewClientGroup com.lynx.tasm.LynxEnv.getLynxViewClient();
  public void com.lynx.tasm.LynxEnv.setCheckPropsSetter(boolean enable);
  public void com.lynx.tasm.LynxEnv.setSettings(HashMap< String, Object > newSettings);
  public boolean com.lynx.tasm.LynxEnv.isCheckPropsSetter();
  public void com.lynx.tasm.LynxEnv.setDevLibraryLoaded(boolean status);
  public void com.lynx.tasm.LynxEnv.setUpNativeMemoryTracer(Context context, int minWatchedSize);
  public void com.lynx.tasm.LynxEnv.setUpNativeMemoryTracer(Context context);
  public boolean com.lynx.tasm.LynxEnv.isDevLibraryLoaded();
  public INativeLibraryLoader com.lynx.tasm.LynxEnv.getLibraryLoader();
  public void com.lynx.tasm.LynxEnv.reportModuleCustomError(String message);
  public void com.lynx.tasm.LynxEnv.setPiperMonitorState(boolean state);
  public native void com.lynx.tasm.LynxEnv.nativeSetLocalEnv(String key, String value);
  public native void com.lynx.tasm.LynxEnv.nativeSetGroupedEnv(String key, boolean value, String groupKey);
  public native void com.lynx.tasm.LynxEnv.nativeSetGroupedEnvWithGroupSet(String groupKey, Set< String > newGroupValues);
  public native void com.lynx.tasm.LynxEnv.nativeSetEnvMask(String key, boolean value);
  public HashMap< String, String > com.lynx.tasm.LynxEnv.GetNativeEnvDebugDescription();
  public HashMap< String, String > com.lynx.tasm.LynxEnv.GetPlatformEnvDebugDescription();
  public void com.lynx.tasm.LynxEnv.setStringLocalEnv(LynxEnvKey key, String value);
  public void com.lynx.tasm.LynxEnv.setBooleanLocalEnv(LynxEnvKey key, boolean value);
  public boolean com.lynx.tasm.LynxEnv.disableImagePostProcessor();
  public boolean com.lynx.tasm.LynxEnv.enableLoadImageFromService();
  public boolean com.lynx.tasm.LynxEnv.enableImageEventReport();
  public boolean com.lynx.tasm.LynxEnv.enableImageAsyncRedirect();
  public boolean com.lynx.tasm.LynxEnv.enableImageAsyncRedirectOnCreate();
  public boolean com.lynx.tasm.LynxEnv.enableImageAsyncRequest();
  public boolean com.lynx.tasm.LynxEnv.enableImageMemoryReport();
  public boolean com.lynx.tasm.LynxEnv.enableComponentStatisticReport();
  public boolean com.lynx.tasm.LynxEnv.enableTransformForPositionCalculation();
  public boolean com.lynx.tasm.LynxEnv.enableSvgAsync();
  public void com.lynx.tasm.LynxEnv.initEnableSvgAsync();
  public boolean com.lynx.tasm.LynxEnv.enableGenericResourceFetcher();
  public boolean com.lynx.tasm.LynxEnv.enableTextBoringLayout();
  public boolean com.lynx.tasm.LynxEnv.enableFreshRateOpt();
  public boolean com.lynx.tasm.LynxEnv.enableCheckAccessFromNonUIThread();
  public boolean com.lynx.tasm.LynxEnv.enableTextLayoutCache();
  public void com.lynx.tasm.LynxEnv.initNativeUIThread();
  public boolean com.lynx.tasm.LynxEnv.tryToLoadV8Bridge(boolean unused);
  public void com.lynx.tasm.LynxEnv.forceDisableQuickJsCache();
}

public enum com::lynx::tasm::LynxEnvKey {
  public com.lynx.tasm.LynxEnvKey.FORCE_DISABLE_QUICKJS_CACHE FORCE_DISABLE_QUICKJS_CACHE;
  public com.lynx.tasm.LynxEnvKey.ENABLE_VSYNC_ALIGNED_FLUSH ENABLE_VSYNC_ALIGNED_FLUSH;
  public com.lynx.tasm.LynxEnvKey.ENABLE_GLOBAL_FEATURE_SWITCH_STATISTIC ENABLE_GLOBAL_FEATURE_SWITCH_STATISTIC;
  public com.lynx.tasm.LynxEnvKey.ENABLE_FEATURE_COUNTER ENABLE_FEATURE_COUNTER;
  public com.lynx.tasm.LynxEnvKey.ENABLE_JSB_TIMING ENABLE_JSB_TIMING;
  public com.lynx.tasm.LynxEnvKey.ENABLE_LONG_TASK_TIMING ENABLE_LONG_TASK_TIMING;
  public com.lynx.tasm.LynxEnvKey.ENABLE_CHECK_ACCESS_FROM_NON_UI_THREAD ENABLE_CHECK_ACCESS_FROM_NON_UI_THREAD;
  public com.lynx.tasm.LynxEnvKey.VSYNC_ALIGNED_FLUSH_EXP_KEY VSYNC_ALIGNED_FLUSH_EXP_KEY;
  public com.lynx.tasm.LynxEnvKey.USE_NEW_IMAGE USE_NEW_IMAGE;
  public com.lynx.tasm.LynxEnvKey.ENABLE_PIPER_MONITOR ENABLE_PIPER_MONITOR;
  public com.lynx.tasm.LynxEnvKey.ENABLE_FLUENCY_TRACE ENABLE_FLUENCY_TRACE;
  public com.lynx.tasm.LynxEnvKey.DISABLE_POST_PROCESSOR DISABLE_POST_PROCESSOR;
  public com.lynx.tasm.LynxEnvKey.ENABLE_IMAGE_MEMORY_REPORT ENABLE_IMAGE_MEMORY_REPORT;
  public com.lynx.tasm.LynxEnvKey.ENABLE_COMPONENT_STATISTIC_REPORT ENABLE_COMPONENT_STATISTIC_REPORT;
  public com.lynx.tasm.LynxEnvKey.ENABLE_TRANSFORM_FOR_POSITION_CALCULATION ENABLE_TRANSFORM_FOR_POSITION_CALCULATION;
  public com.lynx.tasm.LynxEnvKey.DEVTOOL_COMPONENT_ATTACH DEVTOOL_COMPONENT_ATTACH;
  public com.lynx.tasm.LynxEnvKey.ENABLE_GENERIC_LYNX_RESOURCE_FETCHER_FONT_KEY ENABLE_GENERIC_LYNX_RESOURCE_FETCHER_FONT_KEY;
  public com.lynx.tasm.LynxEnvKey.ENABLE_VSYNC_ALIGNED_MESSAGE_LOOP_GLOBAL ENABLE_VSYNC_ALIGNED_MESSAGE_LOOP_GLOBAL;
  public com.lynx.tasm.LynxEnvKey.FORCE_LAYOUT_ON_BACKGROUND_THREAD FORCE_LAYOUT_ON_BACKGROUND_THREAD;
  public com.lynx.tasm.LynxEnvKey.ENABLE_REPORT_CREATE_ASYNC_TAG ENABLE_REPORT_CREATE_ASYNC_TAG;
  public com.lynx.tasm.LynxEnvKey.ENABLE_SVG_ASYNC ENABLE_SVG_ASYNC;
  public com.lynx.tasm.LynxEnvKey.ENABLE_IMAGE_EVENT_REPORT ENABLE_IMAGE_EVENT_REPORT;
  public com.lynx.tasm.LynxEnvKey.ENABLE_IMAGE_ASYNC_REDIRECT ENABLE_IMAGE_ASYNC_REDIRECT;
  public com.lynx.tasm.LynxEnvKey.ENABLE_IMAGE_ASYNC_REDIRECT_ON_CREATE ENABLE_IMAGE_ASYNC_REDIRECT_ON_CREATE;
  public com.lynx.tasm.LynxEnvKey.ENABLE_IMAGE_ASYNC_REQUEST ENABLE_IMAGE_ASYNC_REQUEST;
  public com.lynx.tasm.LynxEnvKey.ENABLE_GENERIC_RESOURCE_FETCHER ENABLE_GENERIC_RESOURCE_FETCHER;
  public com.lynx.tasm.LynxEnvKey.ENABLE_TEXT_BORING_LAYOUT ENABLE_TEXT_BORING_LAYOUT;
  public com.lynx.tasm.LynxEnvKey.ENABLE_REFRESH_RATE_OPT ENABLE_REFRESH_RATE_OPT;
  public com.lynx.tasm.LynxEnvKey.ENABLE_MULTI_JS_THREAD_BY_DEFAULT ENABLE_MULTI_JS_THREAD_BY_DEFAULT;
  public com.lynx.tasm.LynxEnvKey.ENABLE_TEXT_LAYOUT_CACHE ENABLE_TEXT_LAYOUT_CACHE;
  public  final String com.lynx.tasm.LynxEnvKey.SP_KEY_ENABLE_DEBUG_MODE SP_KEY_ENABLE_DEBUG_MODE;
  public  final String com.lynx.tasm.LynxEnvKey.SP_KEY_ENABLE_LAUNCH_RECORD SP_KEY_ENABLE_LAUNCH_RECORD;
  public  final String com.lynx.tasm.LynxEnvKey.SP_KEY_FORCE_DISABLE_QUICKJS_CACHE SP_KEY_FORCE_DISABLE_QUICKJS_CACHE;
  public  final String com.lynx.tasm.LynxEnvKey.SP_KEY_DISABLE_LEPUSNG_OPTIMIZE SP_KEY_DISABLE_LEPUSNG_OPTIMIZE;
  public  final String com.lynx.tasm.LynxEnvKey.SP_KEY_ENABLE_VSYNC_ALIGNED_FLUSH SP_KEY_ENABLE_VSYNC_ALIGNED_FLUSH;
  public  final String com.lynx.tasm.LynxEnvKey.KEY_LYNX_DEBUG_ENABLED KEY_LYNX_DEBUG_ENABLED;
  public  final String com.lynx.tasm.LynxEnvKey.KEY_DEVTOOL_COMPONENT_ATTACH KEY_DEVTOOL_COMPONENT_ATTACH;
  public  final String com.lynx.tasm.LynxEnvKey.SP_KEY_ENABLE_DEVTOOL SP_KEY_ENABLE_DEVTOOL;
  public  final String com.lynx.tasm.LynxEnvKey.SP_KEY_ENABLE_DEVTOOL_FOR_DEBUGGABLE_VIEW SP_KEY_ENABLE_DEVTOOL_FOR_DEBUGGABLE_VIEW;
  public  final String com.lynx.tasm.LynxEnvKey.SP_KEY_ENABLE_LOGBOX SP_KEY_ENABLE_LOGBOX;
  public  final String com.lynx.tasm.LynxEnvKey.SP_KEY_ENABLE_HIGHLIGHT_TOUCH SP_KEY_ENABLE_HIGHLIGHT_TOUCH;
  public  final String com.lynx.tasm.LynxEnvKey.SP_KEY_SHOW_DEVTOOL_BADGE SP_KEY_SHOW_DEVTOOL_BADGE;
  public  final String com.lynx.tasm.LynxEnvKey.SP_KEY_ENABLE_QUICKJS_CACHE SP_KEY_ENABLE_QUICKJS_CACHE;
  public  final String com.lynx.tasm.LynxEnvKey.SP_KEY_ENABLE_V8 SP_KEY_ENABLE_V8;
  public  final String com.lynx.tasm.LynxEnvKey.SP_KEY_ENABLE_DOM_TREE SP_KEY_ENABLE_DOM_TREE;
  public  final String com.lynx.tasm.LynxEnvKey.SP_KEY_ENABLE_LONG_PRESS_MENU SP_KEY_ENABLE_LONG_PRESS_MENU;
  public  final String com.lynx.tasm.LynxEnvKey.SP_KEY_IGNORE_ERROR_TYPES SP_KEY_IGNORE_ERROR_TYPES;
  public  final String com.lynx.tasm.LynxEnvKey.SP_KEY_ENABLE_IGNORE_ERROR_CSS SP_KEY_ENABLE_IGNORE_ERROR_CSS;
  public  final String com.lynx.tasm.LynxEnvKey.SP_KEY_ENABLE_PIXEL_COPY SP_KEY_ENABLE_PIXEL_COPY;
  public  final String com.lynx.tasm.LynxEnvKey.SP_KEY_DEVTOOL_CONNECTED SP_KEY_DEVTOOL_CONNECTED;
  public  final String com.lynx.tasm.LynxEnvKey.SP_KEY_ENABLE_QUICKJS_DEBUG SP_KEY_ENABLE_QUICKJS_DEBUG;
  public  final String com.lynx.tasm.LynxEnvKey.SP_KEY_ENABLE_PREVIEW_SCREEN_SHOT SP_KEY_ENABLE_PREVIEW_SCREEN_SHOT;
  public  final String com.lynx.tasm.LynxEnvKey.SP_KEY_ACTIVATED_CDP_DOMAINS SP_KEY_ACTIVATED_CDP_DOMAINS;
  public  final String com.lynx.tasm.LynxEnvKey.SP_KEY_ENABLE_CDP_DOMAIN_DOM SP_KEY_ENABLE_CDP_DOMAIN_DOM;
  public  final String com.lynx.tasm.LynxEnvKey.SP_KEY_ENABLE_CDP_DOMAIN_CSS SP_KEY_ENABLE_CDP_DOMAIN_CSS;
  public  final String com.lynx.tasm.LynxEnvKey.SP_KEY_ENABLE_CDP_DOMAIN_PAGE SP_KEY_ENABLE_CDP_DOMAIN_PAGE;
  public com.lynx.tasm.LynxEnvKey.LynxEnvKey(String description);
  public String com.lynx.tasm.LynxEnvKey.getDescription();
}

public class com::lynx::tasm::LynxEnvLazyInitializer :  {
  public static void com.lynx.tasm.LynxEnvLazyInitializer.setLazyInitializer(Initializer initializer);
  public static Initializer com.lynx.tasm.LynxEnvLazyInitializer.getsInitializer();
}

public class com::lynx::tasm::LynxError : com.lynx.tasm.LynxErrorCodeLegacy {
  public final String com.lynx.tasm.LynxError.LYNX_ERROR_SUGGESTION_REF_OFFICIAL_SITE LYNX_ERROR_SUGGESTION_REF_OFFICIAL_SITE;
  public final String com.lynx.tasm.LynxError.LYNX_ERROR_KEY_RESOURCE_TYPE LYNX_ERROR_KEY_RESOURCE_TYPE;
  public final String com.lynx.tasm.LynxError.LYNX_ERROR_KEY_RESOURCE_URL LYNX_ERROR_KEY_RESOURCE_URL;
  public final String com.lynx.tasm.LynxError.LYNX_ERROR_KEY_IMAGE_CATEGORIZED_CODE LYNX_ERROR_KEY_IMAGE_CATEGORIZED_CODE;
  public final String com.lynx.tasm.LynxError.LYNX_THROWABLE LYNX_THROWABLE;
  public final int com.lynx.tasm.LynxError.JAVA_ERROR JAVA_ERROR;
  public final int com.lynx.tasm.LynxError.JS_ERROR JS_ERROR;
  public final int com.lynx.tasm.LynxError.NATIVE_ERROR NATIVE_ERROR;
  public final String com.lynx.tasm.LynxError.LEVEL_ERROR LEVEL_ERROR;
  public final String com.lynx.tasm.LynxError.LEVEL_WARN LEVEL_WARN;
  public com.lynx.tasm.LynxError.LynxError(String msg, int code);
  public com.lynx.tasm.LynxError.LynxError(int code, String msg);
  public com.lynx.tasm.LynxError.LynxError(int errorCode, String errorMessage, String fixSuggestion, String level);
  public com.lynx.tasm.LynxError.LynxError(int errorCode, String errorMessage, String fixSuggestion, String level, int errorType);
  public void com.lynx.tasm.LynxError.addCustomInfo(String key, String value);
  public void com.lynx.tasm.LynxError.setCustomInfo(Map< String, Object > customInfo);
  public boolean com.lynx.tasm.LynxError.containsCustomField(String key);
  public void com.lynx.tasm.LynxError.setTemplateUrl(String url);
  public void com.lynx.tasm.LynxError.setCardVersion(String version);
  public void com.lynx.tasm.LynxError.setCallStack(String stack);
  public void com.lynx.tasm.LynxError.setRootCause(String rootCause);
  public String com.lynx.tasm.LynxError.getRootCause();
  public void com.lynx.tasm.LynxError.setUserDefineInfo(JSONObject object);
  public String com.lynx.tasm.LynxError.getSummaryMessage();
  public String com.lynx.tasm.LynxError.getLevel();
  public int com.lynx.tasm.LynxError.getErrorCode();
  public int com.lynx.tasm.LynxError.getSubCode();
  public String com.lynx.tasm.LynxError.getFixSuggestion();
  public int com.lynx.tasm.LynxError.getType();
  public Map< String, String > com.lynx.tasm.LynxError.getContextInfo();
  public String com.lynx.tasm.LynxError.getMsg();
  public JSONObject com.lynx.tasm.LynxError.getErrorObj();
  public boolean com.lynx.tasm.LynxError.isValid();
  public boolean com.lynx.tasm.LynxError.isFatal();
  public boolean com.lynx.tasm.LynxError.isJSError();
  public boolean com.lynx.tasm.LynxError.isLepusError();
  public void com.lynx.tasm.LynxError.setLogBoxOnly(boolean value);
  public boolean com.lynx.tasm.LynxError.isLogBoxOnly();
  public String com.lynx.tasm.LynxError.toString();
}

public class com::lynx::tasm::LynxErrorBehavior :  {
  public final int com.lynx.tasm.LynxErrorBehavior.EB_SUCCESS EB_SUCCESS;
  public final int com.lynx.tasm.LynxErrorBehavior.EB_APP_BUNDLE_LOAD EB_APP_BUNDLE_LOAD;
  public final int com.lynx.tasm.LynxErrorBehavior.EB_APP_BUNDLE_RELOAD EB_APP_BUNDLE_RELOAD;
  public final int com.lynx.tasm.LynxErrorBehavior.EB_APP_BUNDLE_VERIFY EB_APP_BUNDLE_VERIFY;
  public final int com.lynx.tasm.LynxErrorBehavior.EB_BTS_RUNTIME_ERROR EB_BTS_RUNTIME_ERROR;
  public final int com.lynx.tasm.LynxErrorBehavior.EB_BTS_PLATFORM_CALL_JS_FUNCTION EB_BTS_PLATFORM_CALL_JS_FUNCTION;
  public final int com.lynx.tasm.LynxErrorBehavior.EB_BTS_LIFECYCLE_LISTENER_ERROR EB_BTS_LIFECYCLE_LISTENER_ERROR;
  public final int com.lynx.tasm.LynxErrorBehavior.EB_RESOURCE_IMAGE EB_RESOURCE_IMAGE;
  public final int com.lynx.tasm.LynxErrorBehavior.EB_RESOURCE_FONT EB_RESOURCE_FONT;
  public final int com.lynx.tasm.LynxErrorBehavior.EB_RESOURCE_EXTERNAL_RESOURCE EB_RESOURCE_EXTERNAL_RESOURCE;
  public final int com.lynx.tasm.LynxErrorBehavior.EB_RESOURCE_I18N EB_RESOURCE_I18N;
  public final int com.lynx.tasm.LynxErrorBehavior.EB_RESOURCE_MODULE EB_RESOURCE_MODULE;
  public final int com.lynx.tasm.LynxErrorBehavior.EB_RESOURCE_CUSTOM EB_RESOURCE_CUSTOM;
  public final int com.lynx.tasm.LynxErrorBehavior.EB_RESOURCE_EXCEPTION EB_RESOURCE_EXCEPTION;
  public final int com.lynx.tasm.LynxErrorBehavior.EB_DATA_FLOW_UPDATE EB_DATA_FLOW_UPDATE;
  public final int com.lynx.tasm.LynxErrorBehavior.EB_ELEMENT_API EB_ELEMENT_API;
  public final int com.lynx.tasm.LynxErrorBehavior.EB_ELEMENT_UPDATE EB_ELEMENT_UPDATE;
  public final int com.lynx.tasm.LynxErrorBehavior.EB_LAYOUT_INTERNAL EB_LAYOUT_INTERNAL;
  public final int com.lynx.tasm.LynxErrorBehavior.EB_LAYOUT_PERF EB_LAYOUT_PERF;
  public final int com.lynx.tasm.LynxErrorBehavior.EB_LAYOUT_UPDATE EB_LAYOUT_UPDATE;
  public final int com.lynx.tasm.LynxErrorBehavior.EB_LAYOUT_PLATFORM EB_LAYOUT_PLATFORM;
  public final int com.lynx.tasm.LynxErrorBehavior.EB_NATIVE_MODULES_COMMON EB_NATIVE_MODULES_COMMON;
  public final int com.lynx.tasm.LynxErrorBehavior.EB_NATIVE_MODULES_NETWORK EB_NATIVE_MODULES_NETWORK;
  public final int com.lynx.tasm.LynxErrorBehavior.EB_NATIVE_MODULES_CUSTOM_ERROR EB_NATIVE_MODULES_CUSTOM_ERROR;
  public final int com.lynx.tasm.LynxErrorBehavior.EB_NATIVE_MODULES_EXCEPTION EB_NATIVE_MODULES_EXCEPTION;
  public final int com.lynx.tasm.LynxErrorBehavior.EB_EVENT_EXCEPTION EB_EVENT_EXCEPTION;
  public final int com.lynx.tasm.LynxErrorBehavior.EB_MTS_RUNTIME_ERROR EB_MTS_RUNTIME_ERROR;
  public final int com.lynx.tasm.LynxErrorBehavior.EB_MTS_RENDERER_FUNCTION EB_MTS_RENDERER_FUNCTION;
  public final int com.lynx.tasm.LynxErrorBehavior.EB_THREAD_WRONG_THREAD EB_THREAD_WRONG_THREAD;
  public final int com.lynx.tasm.LynxErrorBehavior.EB_CSS EB_CSS;
  public final int com.lynx.tasm.LynxErrorBehavior.EB_CSS_COMPUTED_CSS_VALUE EB_CSS_COMPUTED_CSS_VALUE;
  public final int com.lynx.tasm.LynxErrorBehavior.EB_CSS_PARSER EB_CSS_PARSER;
  public final int com.lynx.tasm.LynxErrorBehavior.EB_SSR_DECODE EB_SSR_DECODE;
  public final int com.lynx.tasm.LynxErrorBehavior.EB_SSR_LOAD EB_SSR_LOAD;
  public final int com.lynx.tasm.LynxErrorBehavior.EB_SSR_HYDRATE EB_SSR_HYDRATE;
  public final int com.lynx.tasm.LynxErrorBehavior.EB_LAZY_BUNDLE_LOAD EB_LAZY_BUNDLE_LOAD;
  public final int com.lynx.tasm.LynxErrorBehavior.EB_WORKLET_MTS_CALL_EXCEPTION EB_WORKLET_MTS_CALL_EXCEPTION;
  public final int com.lynx.tasm.LynxErrorBehavior.EB_WORKLET_RAF_CALL_EXCEPTION EB_WORKLET_RAF_CALL_EXCEPTION;
  public final int com.lynx.tasm.LynxErrorBehavior.EB_WORKLET_MODULE_EXCEPTION EB_WORKLET_MODULE_EXCEPTION;
  public final int com.lynx.tasm.LynxErrorBehavior.EB_MTS_BRIDGE_MODULE EB_MTS_BRIDGE_MODULE;
  public final int com.lynx.tasm.LynxErrorBehavior.EB_COMPONENT_API EB_COMPONENT_API;
  public final int com.lynx.tasm.LynxErrorBehavior.EB_COMPONENT_LIST EB_COMPONENT_LIST;
  public final int com.lynx.tasm.LynxErrorBehavior.EB_COMPONENT_IMAGE EB_COMPONENT_IMAGE;
  public final int com.lynx.tasm.LynxErrorBehavior.EB_COMPONENT_CUSTOM EB_COMPONENT_CUSTOM;
  public final int com.lynx.tasm.LynxErrorBehavior.EB_EXCEPTION_PLATFORM EB_EXCEPTION_PLATFORM;
  public final int com.lynx.tasm.LynxErrorBehavior.EB_EXCEPTION_JNI EB_EXCEPTION_JNI;
}

public class com::lynx::tasm::LynxErrorCodeLegacy :  {
  public final int com.lynx.tasm.LynxErrorCodeLegacy.LYNX_ERROR_CODE_SUCCESS LYNX_ERROR_CODE_SUCCESS;
  public final int com.lynx.tasm.LynxErrorCodeLegacy.LYNX_ERROR_CODE_LOAD_TEMPLATE LYNX_ERROR_CODE_LOAD_TEMPLATE;
  public final int com.lynx.tasm.LynxErrorCodeLegacy.LYNX_ERROR_CODE_TEMPLATE_PROVIDER LYNX_ERROR_CODE_TEMPLATE_PROVIDER;
  public final int com.lynx.tasm.LynxErrorCodeLegacy.LYNX_ERROR_CODE_JAVASCRIPT LYNX_ERROR_CODE_JAVASCRIPT;
  public final int com.lynx.tasm.LynxErrorCodeLegacy.LYNX_ERROR_CODE_RESOURCE LYNX_ERROR_CODE_RESOURCE;
  public final int com.lynx.tasm.LynxErrorCodeLegacy.LYNX_ERROR_CODE_LAYOUT LYNX_ERROR_CODE_LAYOUT;
  public final int com.lynx.tasm.LynxErrorCodeLegacy.LYNX_ERROR_CODE_UPDATE LYNX_ERROR_CODE_UPDATE;
  public final int com.lynx.tasm.LynxErrorCodeLegacy.LYNX_ERROR_CODE_RELOAD_TEMPLATE LYNX_ERROR_CODE_RELOAD_TEMPLATE;
  public final int com.lynx.tasm.LynxErrorCodeLegacy.LYNX_ERROR_EXCEPTION LYNX_ERROR_EXCEPTION;
}

public class com::lynx::tasm::event::LynxEvent :  {
  public com.lynx.tasm.event.LynxEvent.LynxEvent(int tag, String name, LynxEventType type);
  public int com.lynx.tasm.event.LynxEvent.getTag();
  public String com.lynx.tasm.event.LynxEvent.getName();
  public LynxEventType com.lynx.tasm.event.LynxEvent.getType();
  public void com.lynx.tasm.event.LynxEvent.setTarget(EventTargetBase target);
  public EventTargetBase com.lynx.tasm.event.LynxEvent.getTarget();
  public void com.lynx.tasm.event.LynxEvent.setTimestamp(long timestamp);
  public long com.lynx.tasm.event.LynxEvent.getTimestamp();
  public void com.lynx.tasm.event.LynxEvent.setEventID(long eventID);
  public long com.lynx.tasm.event.LynxEvent.getEventID();
  public ArrayList< Object > com.lynx.tasm.event.LynxEvent.getEventParams();
}

public class com::lynx::tasm::event::LynxEventDetail :  {
  public com.lynx.tasm.event.LynxEventDetail.LynxEventDetail(@NonNull LynxEvent event, EventTargetBase target, LynxView view);
  public LynxView com.lynx.tasm.event.LynxEventDetail.getLynxView();
  public EventTargetBase com.lynx.tasm.event.LynxEventDetail.getEventTarget();
  public String com.lynx.tasm.event.LynxEventDetail.getEventName();
  public EVENT_TYPE com.lynx.tasm.event.LynxEventDetail.getEventType();
  public void com.lynx.tasm.event.LynxEventDetail.setMotionEvent(MotionEvent motionEvent);
  public MotionEvent com.lynx.tasm.event.LynxEventDetail.getMotionEvent();
  public Point com.lynx.tasm.event.LynxEventDetail.getTargetPoint();
  public boolean com.lynx.tasm.event.LynxEventDetail.getIsMultiTouch();
  public HashMap< Integer, Point > com.lynx.tasm.event.LynxEventDetail.getTargetPointMap();
  public HashMap< String, Object > com.lynx.tasm.event.LynxEventDetail.getEventParams();
}

public class com::lynx::tasm::LynxEventEmitter : com.lynx.tasm.EventEmitter {
  public com.lynx.tasm.LynxEventEmitter.LynxEventEmitter(LynxEngineProxy engineProxy);
  public void com.lynx.tasm.LynxEventEmitter.sendTouchEvent(LynxTouchEvent event);
  public boolean com.lynx.tasm.LynxEventEmitter.onLynxEvent(LynxEvent event);
  public void com.lynx.tasm.LynxEventEmitter.sendMultiTouchEvent(LynxTouchEvent event);
  public void com.lynx.tasm.LynxEventEmitter.sendCustomEvent(LynxCustomEvent event);
  public void com.lynx.tasm.LynxEventEmitter.sendGestureEvent(int gestureId, LynxCustomEvent event);
  public void com.lynx.tasm.LynxEventEmitter.onPseudoStatusChanged(int sign, int preStatus, int currentStatus);
  public void com.lynx.tasm.LynxEventEmitter.setTestTapTracker(ITestTapTrack track);
  public void com.lynx.tasm.LynxEventEmitter.sendLayoutEvent();
  public void com.lynx.tasm.LynxEventEmitter.setInPreLoad(boolean preload);
  public void com.lynx.tasm.LynxEventEmitter.addObserver(LynxEventObserver observer);
  public void com.lynx.tasm.LynxEventEmitter.removeObserver(LynxEventObserver observer);
  public void com.lynx.tasm.LynxEventEmitter.registerEventReporter(LynxEventReporter reporter);
  public void com.lynx.tasm.LynxEventEmitter.startEventGenerate(LynxEvent event);
  public void com.lynx.tasm.LynxEventEmitter.setEventID(long eventID);
  public void com.lynx.tasm.LynxEventEmitter.startEventCapture(long eventID);
  public void com.lynx.tasm.LynxEventEmitter.startEventBubble(long eventID);
  public void com.lynx.tasm.LynxEventEmitter.startEventFire(boolean isStop, long eventID);
}

public interface com::lynx::tasm::EventEmitter::LynxEventObserver {
  public void com.lynx.tasm.EventEmitter.LynxEventObserver.onLynxEvent(LynxEventType type, LynxEvent event);
}

public interface com::lynx::tasm::EventEmitter::LynxEventReporter {
  public boolean com.lynx.tasm.EventEmitter.LynxEventReporter.onLynxEvent(LynxEvent event);
  public void com.lynx.tasm.EventEmitter.LynxEventReporter.onInternalEvent(@NonNull LynxInternalEvent event);
}

public class com::lynx::tasm::eventreport::LynxEventReporter :  {
  public final String com.lynx.tasm.eventreport.LynxEventReporter.PROP_NAME_LYNX_SDK_VERSION PROP_NAME_LYNX_SDK_VERSION;
  public final String com.lynx.tasm.eventreport.LynxEventReporter.PROP_NAME_THREAD_MODE PROP_NAME_THREAD_MODE;
  public final String com.lynx.tasm.eventreport.LynxEventReporter.PROP_NAME_URL PROP_NAME_URL;
  public final String com.lynx.tasm.eventreport.LynxEventReporter.PROP_NAME_RELATIVE_PATH PROP_NAME_RELATIVE_PATH;
  public final String com.lynx.tasm.eventreport.LynxEventReporter.PROP_NAME_ENABLE_SSR PROP_NAME_ENABLE_SSR;
  public final int com.lynx.tasm.eventreport.LynxEventReporter.INSTANCE_ID_UNKNOWN INSTANCE_ID_UNKNOWN;
  public final String com.lynx.tasm.eventreport.LynxEventReporter.LYNX_SDK_ERROR_EVENT LYNX_SDK_ERROR_EVENT;
  public static LynxEventReporter com.lynx.tasm.eventreport.LynxEventReporter.getInstance();
  public static void com.lynx.tasm.eventreport.LynxEventReporter.onEvent(final String eventName, final Map< String, Object > props, final int instanceId);
  public static void com.lynx.tasm.eventreport.LynxEventReporter.onEvent(final String eventName, final int instanceId, final PropsBuilder builder);
  public static void com.lynx.tasm.eventreport.LynxEventReporter.updateGenericInfo(final String key, Object value, final int instanceId);
  public static void com.lynx.tasm.eventreport.LynxEventReporter.updateGenericInfo(final Map< String, Object > props, final int instanceId);
  public static void com.lynx.tasm.eventreport.LynxEventReporter.removeGenericInfo(final int instanceId);
  public static void com.lynx.tasm.eventreport.LynxEventReporter.putExtraParams(final Map< String, Object > params, final int instanceId);
  public static void com.lynx.tasm.eventreport.LynxEventReporter.moveExtraParams(final int originInstanceId, final int targetInstanceId);
  public static void com.lynx.tasm.eventreport.LynxEventReporter.clearCache(final int instanceId);
  public static void com.lynx.tasm.eventreport.LynxEventReporter.addObserver(ILynxEventReportObserver observer);
  public static void com.lynx.tasm.eventreport.LynxEventReporter.removeObserver(ILynxEventReportObserver observer);
  public static HashMap< String, Object > com.lynx.tasm.eventreport.LynxEventReporter.getGenericInfo(Integer instanceId);
  public static void com.lynx.tasm.eventreport.LynxEventReporter.runOnReportThread(Runnable runnable);
}

public enum com::lynx::tasm::event::LynxEvent::LynxEventType {
  public com.lynx.tasm.event.LynxEvent.LynxEventType.kNone kNone;
  public com.lynx.tasm.event.LynxEvent.LynxEventType.kTouch kTouch;
  public com.lynx.tasm.event.LynxEvent.LynxEventType.kMouse kMouse;
  public com.lynx.tasm.event.LynxEvent.LynxEventType.kWheel kWheel;
  public com.lynx.tasm.event.LynxEvent.LynxEventType.kKeyboard kKeyboard;
  public com.lynx.tasm.event.LynxEvent.LynxEventType.kCustom kCustom;
}

public enum com::lynx::tasm::EventEmitter::LynxEventType {
  public com.lynx.tasm.EventEmitter.LynxEventType.kLynxEventTypeTouchEvent kLynxEventTypeTouchEvent;
  public com.lynx.tasm.EventEmitter.LynxEventType.kLynxEventTypeCustomEvent kLynxEventTypeCustomEvent;
  public com.lynx.tasm.EventEmitter.LynxEventType.kLynxEventTypeLayoutEvent kLynxEventTypeLayoutEvent;
}

public class com::lynx::jsbridge::LynxExposureModule : com.lynx.jsbridge.LynxContextModule {
  public final String com.lynx.jsbridge.LynxExposureModule.NAME NAME;
  public com.lynx.jsbridge.LynxExposureModule.LynxExposureModule(LynxContext context);
}

public class abstract com::lynx::jsbridge::LynxExtensionModule :  {
  public com.lynx.jsbridge.LynxExtensionModule.LynxExtensionModule(LynxContext context, LynxGroup group, BehaviorRegistry behaviorRegistry);
  public abstract long com.lynx.jsbridge.LynxExtensionModule.getExtensionDelegatePtr();
  public abstract void com.lynx.jsbridge.LynxExtensionModule.setUp();
  public abstract void com.lynx.jsbridge.LynxExtensionModule.destroy();
}

public class com::lynx::tasm::provider::LynxExternalResourceFetcherWrapper :  {
  public com.lynx.tasm.provider.LynxExternalResourceFetcherWrapper.LynxExternalResourceFetcherWrapper(DynamicComponentFetcher fetcher);
  public boolean com.lynx.tasm.provider.LynxExternalResourceFetcherWrapper.fetchResourceWithDynamicComponentFetcher(final String url, @NonNull LoadedHandler handler);
}

public class com::lynx::tasm::featurecount::LynxFeatureCounter :  {
  public final int com.lynx.tasm.featurecount.LynxFeatureCounter.JAVA_HARDWARE_LAYER JAVA_HARDWARE_LAYER;
  public final int com.lynx.tasm.featurecount.LynxFeatureCounter.JAVA_NEW_SWIPER_NOT_ENABLED JAVA_NEW_SWIPER_NOT_ENABLED;
  public final int com.lynx.tasm.featurecount.LynxFeatureCounter.JAVA_LAYOUT_ANIMATION_CREATE_ANDROID JAVA_LAYOUT_ANIMATION_CREATE_ANDROID;
  public final int com.lynx.tasm.featurecount.LynxFeatureCounter.JAVA_LAYOUT_ANIMATION_UPDATE_ANDROID JAVA_LAYOUT_ANIMATION_UPDATE_ANDROID;
  public final int com.lynx.tasm.featurecount.LynxFeatureCounter.JAVA_LAYOUT_ANIMATION_DELETE_ANDROID JAVA_LAYOUT_ANIMATION_DELETE_ANDROID;
  public final int com.lynx.tasm.featurecount.LynxFeatureCounter.JAVA_ENTER_TRANSITION_NAME_ANDROID JAVA_ENTER_TRANSITION_NAME_ANDROID;
  public final int com.lynx.tasm.featurecount.LynxFeatureCounter.JAVA_EXIT_TRANSITION_NAME_ANDROID JAVA_EXIT_TRANSITION_NAME_ANDROID;
  public final int com.lynx.tasm.featurecount.LynxFeatureCounter.JAVA_PAUSE_TRANSITION_NAME_ANDROID JAVA_PAUSE_TRANSITION_NAME_ANDROID;
  public final int com.lynx.tasm.featurecount.LynxFeatureCounter.JAVA_RESUME_TRANSITION_NAME_ANDROID JAVA_RESUME_TRANSITION_NAME_ANDROID;
  public final int com.lynx.tasm.featurecount.LynxFeatureCounter.JAVA_UPDATE_FONT_SCALE JAVA_UPDATE_FONT_SCALE;
  public final int com.lynx.tasm.featurecount.LynxFeatureCounter.JAVA_DISABLE_REUSE_ANIMATION_STATE JAVA_DISABLE_REUSE_ANIMATION_STATE;
  public final int com.lynx.tasm.featurecount.LynxFeatureCounter.JAVA_DISABLE_FOLDVIEW_STOP_TOUCH_STOP_FLING JAVA_DISABLE_FOLDVIEW_STOP_TOUCH_STOP_FLING;
  public final int com.lynx.tasm.featurecount.LynxFeatureCounter.JAVA_ASYNC_REDIRECT JAVA_ASYNC_REDIRECT;
  public final int com.lynx.tasm.featurecount.LynxFeatureCounter.JAVA_ENABLE_ASYNC_REQUEST_IMAGE JAVA_ENABLE_ASYNC_REQUEST_IMAGE;
  public final int com.lynx.tasm.featurecount.LynxFeatureCounter.JAVA_SET_THEME_ANDROID JAVA_SET_THEME_ANDROID;
  public final int com.lynx.tasm.featurecount.LynxFeatureCounter.JAVA_GET_THEME_ANDROID JAVA_GET_THEME_ANDROID;
  public final int com.lynx.tasm.featurecount.LynxFeatureCounter.JAVA_ENABLE_ASYNC_LIST JAVA_ENABLE_ASYNC_LIST;
  public final int com.lynx.tasm.featurecount.LynxFeatureCounter.JAVA_USE_LEGACY_ELEMENTS JAVA_USE_LEGACY_ELEMENTS;
  public final int com.lynx.tasm.featurecount.LynxFeatureCounter.JAVA_ENABLE_FONT_SCALING JAVA_ENABLE_FONT_SCALING;
  public static void com.lynx.tasm.featurecount.LynxFeatureCounter.setEnable(boolean enable);
  public static void com.lynx.tasm.featurecount.LynxFeatureCounter.count(int feature, int instanceId);
  public static native void com.lynx.tasm.featurecount.LynxFeatureCounter.nativeFeatureCount(int feature, int instanceId);
}

public class com::lynx::jsbridge::LynxFetchModule : com.lynx.jsbridge.LynxModule {
  public final String com.lynx.jsbridge.LynxFetchModule.NAME NAME;
  public com.lynx.jsbridge.LynxFetchModule.LynxFetchModule(Context context);
  public void com.lynx.jsbridge.LynxFetchModule.fetch(final ReadableMap request, final Callback resolve, final Callback reject);
}

public class com::lynx::tasm::behavior::ui::LynxFlattenUI : com.lynx.tasm.behavior.ui.LynxBaseUI {
  public Method com.lynx.tasm.behavior.ui.LynxFlattenUI.sSetUsageHint sSetUsageHint;
  public com.lynx.tasm.behavior.ui.LynxFlattenUI.LynxFlattenUI(LynxContext context);
  public com.lynx.tasm.behavior.ui.LynxFlattenUI.LynxFlattenUI(LynxContext context, Object param);
  public boolean com.lynx.tasm.behavior.ui.LynxFlattenUI.isFlatten();
  public void com.lynx.tasm.behavior.ui.LynxFlattenUI.setSign(int sign, String tagName);
  public int com.lynx.tasm.behavior.ui.LynxFlattenUI.getInitialOverflowType();
  public void com.lynx.tasm.behavior.ui.LynxFlattenUI.measure();
  public void com.lynx.tasm.behavior.ui.LynxFlattenUI.layout(int x, int y, Rect bounds);
  public void com.lynx.tasm.behavior.ui.LynxFlattenUI.onDrawingPositionChanged();
  public void com.lynx.tasm.behavior.ui.LynxFlattenUI.requestLayout();
  public void com.lynx.tasm.behavior.ui.LynxFlattenUI.invalidate();
  public float com.lynx.tasm.behavior.ui.LynxFlattenUI.getTranslationX();
  public float com.lynx.tasm.behavior.ui.LynxFlattenUI.getTranslationY();
  public float com.lynx.tasm.behavior.ui.LynxFlattenUI.getTranslationZ();
  public float com.lynx.tasm.behavior.ui.LynxFlattenUI.getRealTimeTranslationZ();
  public void com.lynx.tasm.behavior.ui.LynxFlattenUI.setAlpha(float alpha);
  public void com.lynx.tasm.behavior.ui.LynxFlattenUI.setTransform(@Nullable ReadableArray transform);
  public final RenderNodeCompat com.lynx.tasm.behavior.ui.LynxFlattenUI.updateRenderNode();
  public void com.lynx.tasm.behavior.ui.LynxFlattenUI.onAttach();
  public void com.lynx.tasm.behavior.ui.LynxFlattenUI.draw(Canvas canvas);
  public void com.lynx.tasm.behavior.ui.LynxFlattenUI.onDraw(Canvas canvas);
  public float com.lynx.tasm.behavior.ui.LynxFlattenUI.getAlpha();
}

public class com::lynx::tasm::loader::LynxFontFaceLoader :  {
  public static void com.lynx.tasm.loader.LynxFontFaceLoader.setLoader(Loader loader);
  public static Loader com.lynx.tasm.loader.LynxFontFaceLoader.getLoader(LynxContext lynxContext);
}

public class com::lynx::tasm::fluency::LynxFpsTracer::LynxFpsRawMetrics :  {
  public int com.lynx.tasm.fluency.LynxFpsTracer.LynxFpsRawMetrics.frames frames;
  public int com.lynx.tasm.fluency.LynxFpsTracer.LynxFpsRawMetrics.fps fps;
  public int com.lynx.tasm.fluency.LynxFpsTracer.LynxFpsRawMetrics.maximumFrames maximumFrames;
  public long com.lynx.tasm.fluency.LynxFpsTracer.LynxFpsRawMetrics.duration duration;
  public int com.lynx.tasm.fluency.LynxFpsTracer.LynxFpsRawMetrics.drop1 drop1;
  public long com.lynx.tasm.fluency.LynxFpsTracer.LynxFpsRawMetrics.drop1Duration drop1Duration;
  public int com.lynx.tasm.fluency.LynxFpsTracer.LynxFpsRawMetrics.drop3 drop3;
  public long com.lynx.tasm.fluency.LynxFpsTracer.LynxFpsRawMetrics.drop3Duration drop3Duration;
  public int com.lynx.tasm.fluency.LynxFpsTracer.LynxFpsRawMetrics.drop7 drop7;
  public long com.lynx.tasm.fluency.LynxFpsTracer.LynxFpsRawMetrics.drop7Duration drop7Duration;
  public int com.lynx.tasm.fluency.LynxFpsTracer.LynxFpsRawMetrics.drop25 drop25;
  public long com.lynx.tasm.fluency.LynxFpsTracer.LynxFpsRawMetrics.drop25Duration drop25Duration;
  public com.lynx.tasm.fluency.LynxFpsTracer.LynxFpsRawMetrics.LynxFpsRawMetrics();
}

public class com::lynx::tasm::fluency::LynxFpsTracer :  {
  public com.lynx.tasm.fluency.LynxFpsTracer.LynxFpsTracer(LynxContext context);
  public void com.lynx.tasm.fluency.LynxFpsTracer.setFluencyCallback(IFluencyCallback fluencyCallback);
  public void com.lynx.tasm.fluency.LynxFpsTracer.start();
  public void com.lynx.tasm.fluency.LynxFpsTracer.stop();
}

public class com::lynx::tasm::utils::LynxFrameRateControl :  {
  public com.lynx.tasm.utils.LynxFrameRateControl.LynxFrameRateControl(VSyncListener listener);
  public void com.lynx.tasm.utils.LynxFrameRateControl.start();
  public void com.lynx.tasm.utils.LynxFrameRateControl.stop();
  public void com.lynx.tasm.utils.LynxFrameRateControl.onScreenOff();
  public void com.lynx.tasm.utils.LynxFrameRateControl.onScreenOn();
}

public class com::lynx::tasm::behavior::ui::frame::LynxFrameView : com.lynx.tasm.behavior.ui.UIBody.UIBodyView {
  public com.lynx.tasm.behavior.ui.frame.LynxFrameView.LynxFrameView(Context context);
  public com.lynx.tasm.behavior.ui.frame.LynxFrameView.LynxFrameView(Context context, AttributeSet attrs);
  public void com.lynx.tasm.behavior.ui.frame.LynxFrameView.updateViewport(int widthMeasureSpec, int heightMeasureSpec);
  public void com.lynx.tasm.behavior.ui.frame.LynxFrameView.runOnTasmThread(Runnable runnable);
}

public interface com::lynx::tasm::behavior::LynxGeneratorName {
  public String com.lynx.tasm.behavior.LynxGeneratorName.packageName();
}

public class com::lynx::tasm::LynxGenericInfo :  {
  public com.lynx.tasm.LynxGenericInfo.LynxGenericInfo();
  public JSONObject com.lynx.tasm.LynxGenericInfo.toJSONObject();
  public void com.lynx.tasm.LynxGenericInfo.updateLynxUrl(LynxContext lynxContext, String templateURL);
  public String com.lynx.tasm.LynxGenericInfo.getPropValueRelativePath();
}

public class abstract com::lynx::tasm::resourceprovider::generic::LynxGenericResourceFetcher :  {
  public abstract void com.lynx.tasm.resourceprovider.generic.LynxGenericResourceFetcher.fetchResource(LynxResourceRequest request, LynxResourceCallback< byte[]> callback);
  public abstract void com.lynx.tasm.resourceprovider.generic.LynxGenericResourceFetcher.fetchResourcePath(LynxResourceRequest request, LynxResourceCallback< String > callback);
  public void com.lynx.tasm.resourceprovider.generic.LynxGenericResourceFetcher.fetchStream(LynxResourceRequest request, StreamDelegate delegate);
  public void com.lynx.tasm.resourceprovider.generic.LynxGenericResourceFetcher.cancel(LynxResourceRequest request);
}

public interface com::lynx::tasm::LynxGetDataCallback {
  public void com.lynx.tasm.LynxGetDataCallback.onSuccess(JavaOnlyMap data);
  public void com.lynx.tasm.LynxGetDataCallback.onFail(String msg);
}

public class com::lynx::tasm::LynxGetUIResult :  {
  public boolean com.lynx.tasm.LynxGetUIResult.succeed();
  public ReadableArray com.lynx.tasm.LynxGetUIResult.getUiArray();
  public int com.lynx.tasm.LynxGetUIResult.getErrCode();
  public String com.lynx.tasm.LynxGetUIResult.getErrMsg();
}

public class com::lynx::tasm::LynxGroup :  {
  public String com.lynx.tasm.LynxGroup.SINGNLE_GROUP SINGNLE_GROUP;
  public String com.lynx.tasm.LynxGroup.getID();
  public String[] com.lynx.tasm.LynxGroup.getPreloadJSPaths();
  public boolean com.lynx.tasm.LynxGroup.enableJSGroupThread();
  public boolean com.lynx.tasm.LynxGroup.enableV8();
  public String com.lynx.tasm.LynxGroup.getStringConfig(String key);
  public boolean com.lynx.tasm.LynxGroup.getBoolConfig(String key);
  public void com.lynx.tasm.LynxGroup.destroy();
  public long com.lynx.tasm.LynxGroup.getWhiteBoardPtr();
}

public class com::lynx::tasm::LynxGroup::LynxGroupBuilder :  {
  public com.lynx.tasm.LynxGroup.LynxGroupBuilder.LynxGroupBuilder();
  public LynxGroupBuilder com.lynx.tasm.LynxGroup.LynxGroupBuilder.setGroupName(String groupName);
  public LynxGroupBuilder com.lynx.tasm.LynxGroup.LynxGroupBuilder.setID(String id);
  public LynxGroupBuilder com.lynx.tasm.LynxGroup.LynxGroupBuilder.setPreloadJSPaths(String[] preloadJSPaths);
  public LynxGroupBuilder com.lynx.tasm.LynxGroup.LynxGroupBuilder.setEnableJSGroupThread(Boolean enableJSGroupThread);
  public LynxGroupBuilder com.lynx.tasm.LynxGroup.LynxGroupBuilder.setEnableWhiteBoard(boolean enableWhiteBoard);
  public LynxGroupBuilder com.lynx.tasm.LynxGroup.LynxGroupBuilder.setEnableV8(boolean enableV8);
  public LynxGroupBuilder com.lynx.tasm.LynxGroup.LynxGroupBuilder.setStringConfig(String key, String value);
  public LynxGroupBuilder com.lynx.tasm.LynxGroup.LynxGroupBuilder.setBoolConfig(String key, boolean value);
  public LynxGroup com.lynx.tasm.LynxGroup.LynxGroupBuilder.build();
}

public interface com::lynx::tasm::navigator::LynxHolder {
  public void com.lynx.tasm.navigator.LynxHolder.createLynxView(LynxRoute route, LynxViewCreationListener listener);
  public void com.lynx.tasm.navigator.LynxHolder.showLynxView(LynxView view, String name);
  public void com.lynx.tasm.navigator.LynxHolder.dismissLynxView(LynxView view);
  public void com.lynx.tasm.navigator.LynxHolder.quit();
}

public class abstract com::lynx::tasm::service::LynxHttpRequestCallback :  {
  public void com.lynx.tasm.service.LynxHttpRequestCallback.invoke(@NonNull HttpResponse response);
}

public class com::lynx::jsbridge::network::LynxHttpRunner :  {
  public final int com.lynx.jsbridge.network.LynxHttpRunner.SDK_ERROR_STATUS_CODE SDK_ERROR_STATUS_CODE;
  public static boolean com.lynx.jsbridge.network.LynxHttpRunner.isHttpServiceRegistered();
  public static void com.lynx.jsbridge.network.LynxHttpRunner.request(HttpRequest request, final Callback callback);
}

public interface com::lynx::tasm::image::model::LynxImageFetcher {
  public void com.lynx.tasm.image.model.LynxImageFetcher.loadImage(@NonNull ImageRequestInfo imageRequestInfo, @NonNull ImageLoadListener loadListener, @Nullable AnimationListener animationListener, Context context);
  public void com.lynx.tasm.image.model.LynxImageFetcher.releaseImage(@NonNull ImageRequestInfo imageRequestInfo);
}

public class com::lynx::tasm::service::LynxImageInfo :  {
  public long com.lynx.tasm.service.LynxImageInfo.getStartTimeStamp();
  public long com.lynx.tasm.service.LynxImageInfo.getFinishTimeStamp();
  public boolean com.lynx.tasm.service.LynxImageInfo.getIsSuccess();
  public String com.lynx.tasm.service.LynxImageInfo.getUrl();
  public int com.lynx.tasm.service.LynxImageInfo.getMemoryCost();
  public int com.lynx.tasm.service.LynxImageInfo.getErrorCode();
  public LynxView com.lynx.tasm.service.LynxImageInfo.getLynxView();
  public boolean com.lynx.tasm.service.LynxImageInfo.getHitMemoryCache();
}

public class com::lynx::tasm::behavior::ui::image::LynxImageManager : Drawable.Callback {
  public final String com.lynx.tasm.behavior.ui.image.LynxImageManager.TAG TAG;
  public final String com.lynx.tasm.behavior.ui.image.LynxImageManager.EVENT_LOAD EVENT_LOAD;
  public final String com.lynx.tasm.behavior.ui.image.LynxImageManager.EVENT_ERROR EVENT_ERROR;
  public com.lynx.tasm.behavior.ui.image.LynxImageManager.LynxImageManager(LynxContext context);
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.setSkipRedirection(boolean skipRedirection);
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.setDeferInvalidation(boolean defer);
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.setDisableDefaultPlaceholder(boolean disable);
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.setEnableResourceHint(boolean enable);
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.setEnableCustomGifDecoder(boolean enable);
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.setSrc(String src);
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.setPlaceholder(String placeholder);
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.setCapInsets(String capInsets);
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.setCapInsetsBackUp(String capInsetsBackUp);
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.setMode(@Nullable String mode);
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.setBlurRadius(String radius);
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.setAutoSize(boolean autoSize);
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.setLoopCount(int count);
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.setImageConfig(Bitmap.Config config);
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.setAutoPlay(boolean autoPlay);
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.setTintColor(String color);
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.setExtraLoadInfo(boolean enable);
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.setAsyncRequest(boolean enable);
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.setPreFetchWidth(String width);
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.setCapInsetsScale(String capInsetsScale);
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.setPreFetchHeight(String height);
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.setLocalCache(@Nullable Dynamic localCache);
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.setDisableDefaultResize(boolean disable);
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.setLynxBaseUI(LynxBaseUI ui);
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.setViewInfo(ViewInfo viewInfo);
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.updatePropertiesInterval(ReadableMap props);
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.pauseAnimation(ReadableMap params, Callback callback);
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.resumeAnimation(ReadableMap params, Callback callback);
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.stopAnimation(ReadableMap params, Callback callback);
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.startAnimate(ReadableMap params, Callback callback);
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.onPropsUpdated();
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.onNodeReady();
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.updateNodeProps();
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.tryFetchImageFromService(int width, int height);
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.tryFetchPlaceholderFromService(int width, int height);
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.destroy();
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.onDraw(Canvas canvas);
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.invalidate();
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.setEvents(Map< String, EventsListener > events);
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.onLayoutUpdated(int width, int height, int paddingLeft, int paddingRight, int paddingTop, int paddingBottom);
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.setImageConfig(String config);
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.invalidateDrawable(@NonNull Drawable who);
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.scheduleDrawable(@NonNull Drawable who, @NonNull Runnable what, long when);
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.unscheduleDrawable(@NonNull Drawable who, @NonNull Runnable what);
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.setBorderWidth(RectF borderRect);
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.justSizeIfNeeded();
  public void com.lynx.tasm.behavior.ui.image.LynxImageManager.setBorderRadius(float[] borderRadius);
  public Drawable com.lynx.tasm.behavior.ui.image.LynxImageManager.getSrcImageDrawable();
  public Boolean com.lynx.tasm.behavior.ui.image.LynxImageManager.getHasContent();
}

public class com::lynx::tasm::image::LynxImageMediaFetcherProxy : com.lynx.tasm.resourceprovider.media.LynxMediaResourceFetcher {
  public final String com.lynx.tasm.image.LynxImageMediaFetcherProxy.KEY_WIDTH KEY_WIDTH;
  public final String com.lynx.tasm.image.LynxImageMediaFetcherProxy.KEY_HEIGHT KEY_HEIGHT;
  public com.lynx.tasm.image.LynxImageMediaFetcherProxy.LynxImageMediaFetcherProxy(LynxContext context);
  public String com.lynx.tasm.image.LynxImageMediaFetcherProxy.shouldRedirectUrl(LynxResourceRequest request);
  public OptionalBool com.lynx.tasm.image.LynxImageMediaFetcherProxy.isLocalResource(String url);
  public void com.lynx.tasm.image.LynxImageMediaFetcherProxy.fetchImage(LynxResourceRequest request, LynxResourceCallback< Closeable > callback);
}

public class com::lynx::tasm::event::LynxImpressionEvent : com.lynx.tasm.event.LynxCustomEvent {
  public final String com.lynx.tasm.event.LynxImpressionEvent.EVENT_ATTACH EVENT_ATTACH;
  public final String com.lynx.tasm.event.LynxImpressionEvent.EVENT_DETACH EVENT_DETACH;
  public com.lynx.tasm.event.LynxImpressionEvent.LynxImpressionEvent(int tag, String type);
  public void com.lynx.tasm.event.LynxImpressionEvent.setParmas(String key, HashMap< String, Object > params);
  public Map< String, Object > com.lynx.tasm.event.LynxImpressionEvent.eventParams();
  public String com.lynx.tasm.event.LynxImpressionEvent.paramsName();
  public static LynxImpressionEvent com.lynx.tasm.event.LynxImpressionEvent.createAttachEvent(int tag);
  public static LynxImpressionEvent com.lynx.tasm.event.LynxImpressionEvent.createDetachEvent(int tag);
  public static LynxImpressionEvent com.lynx.tasm.event.LynxImpressionEvent.createImpressionEvent(int tag, String type);
}

public class com::lynx::tasm::LynxInfoReportHelper :  {
  public final String com.lynx.tasm.LynxInfoReportHelper.KEY_LAST_LYNX_URL KEY_LAST_LYNX_URL;
  public final String com.lynx.tasm.LynxInfoReportHelper.KEY_ASYNC_COMPONENT_URL KEY_ASYNC_COMPONENT_URL;
  public void com.lynx.tasm.LynxInfoReportHelper.reportLynxCrashContext(String tagName, String tagValue);
}

public class com::lynx::tasm::event::LynxInternalEvent :  {
  public final int com.lynx.tasm.event.LynxInternalEvent.NEED_VALIDATE NEED_VALIDATE;
  public com.lynx.tasm.event.LynxInternalEvent.LynxInternalEvent(int tag, int id);
  public int com.lynx.tasm.event.LynxInternalEvent.getTag();
  public int com.lynx.tasm.event.LynxInternalEvent.getEventId();
  public Map< String, Object > com.lynx.tasm.event.LynxInternalEvent.getParams();
}

public class com::lynx::tasm::behavior::LynxIntersectionObserver :  {
  public com.lynx.tasm.behavior.LynxIntersectionObserver.LynxIntersectionObserver(LynxIntersectionObserverManager manager, int observerId, String componentId, ReadableMap options);
  public com.lynx.tasm.behavior.LynxIntersectionObserver.LynxIntersectionObserver(LynxIntersectionObserverManager manager, ReadableMap options, LynxBaseUI attachedUI);
  public LynxBaseUI com.lynx.tasm.behavior.LynxIntersectionObserver.getAttachedUI();
  public int com.lynx.tasm.behavior.LynxIntersectionObserver.getObserverId();
  public LynxContext com.lynx.tasm.behavior.LynxIntersectionObserver.getContext();
  public void com.lynx.tasm.behavior.LynxIntersectionObserver.relativeTo(String selector, final ReadableMap margins);
  public void com.lynx.tasm.behavior.LynxIntersectionObserver.relativeToViewport(final ReadableMap margins);
  public void com.lynx.tasm.behavior.LynxIntersectionObserver.relativeToScreen(final ReadableMap margins);
  public void com.lynx.tasm.behavior.LynxIntersectionObserver.observe(String selector, int callbackId);
  public void com.lynx.tasm.behavior.LynxIntersectionObserver.disconnect();
  public void com.lynx.tasm.behavior.LynxIntersectionObserver.checkForIntersections();
}

public class com::lynx::tasm::behavior::LynxIntersectionObserverManager : com.lynx.tasm.behavior.LynxObserverManager, com.lynx.tasm.EventEmitter.LynxEventObserver {
  public com.lynx.tasm.behavior.LynxIntersectionObserverManager.LynxIntersectionObserverManager(LynxContext context, JSProxy proxy);
  public LynxContext com.lynx.tasm.behavior.LynxIntersectionObserverManager.getContext();
  public void com.lynx.tasm.behavior.LynxIntersectionObserverManager.sendIntersectionObserverEvent(final int componentSign, final JavaOnlyMap args);
  public void com.lynx.tasm.behavior.LynxIntersectionObserverManager.callIntersectionObserver(final int observerId, final int callbackId, final JavaOnlyMap args);
  public void com.lynx.tasm.behavior.LynxIntersectionObserverManager.addIntersectionObserver(final LynxIntersectionObserver observer);
  public void com.lynx.tasm.behavior.LynxIntersectionObserverManager.removeIntersectionObserver(final int observerId);
  public void com.lynx.tasm.behavior.LynxIntersectionObserverManager.removeAttachedIntersectionObserver(final LynxBaseUI ui);
  public LynxIntersectionObserver com.lynx.tasm.behavior.LynxIntersectionObserverManager.getObserverById(int observerId);
  public void com.lynx.tasm.behavior.LynxIntersectionObserverManager.onLynxEvent(EventEmitter.LynxEventType type, LynxEvent event);
  public void com.lynx.tasm.behavior.LynxIntersectionObserverManager.notifyObservers();
  public void com.lynx.tasm.behavior.LynxIntersectionObserverManager.clear();
}

public class com::lynx::jsbridge::LynxIntersectionObserverModule : com.lynx.jsbridge.LynxContextModule {
  public final String com.lynx.jsbridge.LynxIntersectionObserverModule.NAME NAME;
  public com.lynx.jsbridge.LynxIntersectionObserverModule.LynxIntersectionObserverModule(LynxContext context);
}

public class com::lynx::jsbridge::jsi::LynxJSIObjectHub :  {
  public static LynxJSIObjectHub com.lynx.jsbridge.jsi.LynxJSIObjectHub.inst();
  public ILynxJSIObjectDescriptor com.lynx.jsbridge.jsi.LynxJSIObjectHub.getLynxJSIObjectDescriptor(String className);
  public void com.lynx.jsbridge.jsi.LynxJSIObjectHub.warmUpLynxJSIObject(Class<? extends ILynxJSIObject > jsiObjectClass);
}

public class com::lynx::jsbridge::jsi::LynxJSPropertyDescriptor :  {
  public final String com.lynx.jsbridge.jsi.LynxJSPropertyDescriptor.fieldName fieldName;
  public final String com.lynx.jsbridge.jsi.LynxJSPropertyDescriptor.fieldJNIDescriptor fieldJNIDescriptor;
  public com.lynx.jsbridge.jsi.LynxJSPropertyDescriptor.LynxJSPropertyDescriptor(String name, String jniDescriptor);
}

public class com::lynx::tasm::event::LynxKeyboardEvent : com.lynx.tasm.event.LynxCustomEvent {
  public final String com.lynx.tasm.event.LynxKeyboardEvent.KEYBOARD_STATUS_CHANGED KEYBOARD_STATUS_CHANGED;
  public com.lynx.tasm.event.LynxKeyboardEvent.LynxKeyboardEvent(int tag, String type, Map< String, Object > params);
}

public class com::lynx::tasm::animation::keyframe::LynxKeyframeAnimator :  {
  public final String com.lynx.tasm.animation.keyframe.LynxKeyframeAnimator.sAlphaStr sAlphaStr;
  public final String com.lynx.tasm.animation.keyframe.LynxKeyframeAnimator.sTransformStr sTransformStr;
  public final String com.lynx.tasm.animation.keyframe.LynxKeyframeAnimator.sBackgroundColorStr sBackgroundColorStr;
  public com.lynx.tasm.animation.keyframe.LynxKeyframeAnimator.LynxKeyframeAnimator(View view, LynxUI ui);
  public void com.lynx.tasm.animation.keyframe.LynxKeyframeAnimator.apply(AnimationInfo info);
  public void com.lynx.tasm.animation.keyframe.LynxKeyframeAnimator.destroy();
  public void com.lynx.tasm.animation.keyframe.LynxKeyframeAnimator.notifyPropertyUpdated(String name, Object value);
  public void com.lynx.tasm.animation.keyframe.LynxKeyframeAnimator.onAttach();
  public void com.lynx.tasm.animation.keyframe.LynxKeyframeAnimator.onDetach();
  public void com.lynx.tasm.animation.keyframe.LynxKeyframeAnimator.detachFromUI();
  public void com.lynx.tasm.animation.keyframe.LynxKeyframeAnimator.attachToUI(LynxUI ui);
  public boolean com.lynx.tasm.animation.keyframe.LynxKeyframeAnimator.isRunning();
  public AnimationInfo com.lynx.tasm.animation.keyframe.LynxKeyframeAnimator.getAnimationInfo();
}

public enum com::lynx::tasm::animation::keyframe::LynxKeyframeAnimator::LynxKFAnimatorState {
  public com.lynx.tasm.animation.keyframe.LynxKeyframeAnimator.LynxKFAnimatorState.IDLE IDLE;
  public com.lynx.tasm.animation.keyframe.LynxKeyframeAnimator.LynxKFAnimatorState.RUNNING RUNNING;
  public com.lynx.tasm.animation.keyframe.LynxKeyframeAnimator.LynxKFAnimatorState.PAUSED PAUSED;
  public com.lynx.tasm.animation.keyframe.LynxKeyframeAnimator.LynxKFAnimatorState.CANCELED CANCELED;
  public com.lynx.tasm.animation.keyframe.LynxKeyframeAnimator.LynxKFAnimatorState.DESTROYED DESTROYED;
}

public class com::lynx::tasm::core::LynxLayoutProxy :  {
  public com.lynx.tasm.core.LynxLayoutProxy.LynxLayoutProxy(long lynxShellPtr);
  public void com.lynx.tasm.core.LynxLayoutProxy.runOnLayoutThread(Runnable runnable);
  public void com.lynx.tasm.core.LynxLayoutProxy.destroy();
}

public class abstract com::lynx::tasm::service::LynxLazyInitializer :  {
  public void com.lynx.tasm.service.LynxLazyInitializer.initialize();
  public boolean com.lynx.tasm.service.LynxLazyInitializer.ensureInitialized();
}

public class com::lynx::lepus::LynxLepusModule :  {
  public static void com.lynx.lepus.LynxLepusModule.triggerLepusBridgeAsync(String methodName, Object args, final LynxEngineProxy actor, final LynxModuleFactory mModuleFactory);
  public static Object com.lynx.lepus.LynxLepusModule.triggerLepusBridge(String methodName, Object args, final LynxModuleFactory mModuleFactory);
}

public class com::lynx::tasm::event::LynxListEvent : com.lynx.tasm.event.LynxDetailEvent {
  public final String com.lynx.tasm.event.LynxListEvent.EVENT_SCROLL EVENT_SCROLL;
  public final String com.lynx.tasm.event.LynxListEvent.EVENT_SCROLL_TOUPPER EVENT_SCROLL_TOUPPER;
  public final String com.lynx.tasm.event.LynxListEvent.EVENT_SCROLL_TOLOWER EVENT_SCROLL_TOLOWER;
  public final String com.lynx.tasm.event.LynxListEvent.EVENT_NODE_APPEAR EVENT_NODE_APPEAR;
  public final String com.lynx.tasm.event.LynxListEvent.EVENT_NODE_DISAPPEAR EVENT_NODE_DISAPPEAR;
  public final String com.lynx.tasm.event.LynxListEvent.EVENT_SCROLL_STATE_CHANGE EVENT_SCROLL_STATE_CHANGE;
  public final String com.lynx.tasm.event.LynxListEvent.EVENT_LAYOUT_COMPLETE EVENT_LAYOUT_COMPLETE;
  public final int com.lynx.tasm.event.LynxListEvent.SCROLL_STATE_IDLE SCROLL_STATE_IDLE;
  public final int com.lynx.tasm.event.LynxListEvent.SCROLL_STATE_DRAGGING SCROLL_STATE_DRAGGING;
  public final int com.lynx.tasm.event.LynxListEvent.SCROLL_STATE_SETTLING SCROLL_STATE_SETTLING;
  public com.lynx.tasm.event.LynxListEvent.LynxListEvent(int tag, String type);
  public void com.lynx.tasm.event.LynxListEvent.setCellParams(int position);
  public void com.lynx.tasm.event.LynxListEvent.setScrollParams(int left, int top, int dx, int dy, @Nullable JavaOnlyArray attachedCells);
  public void com.lynx.tasm.event.LynxListEvent.setListScrollStateChangeParams(int state, @Nullable JavaOnlyArray attachedCells);
  public static LynxListEvent com.lynx.tasm.event.LynxListEvent.createListEvent(int tag, String type);
}

public class com::lynx::config::LynxLiteConfigs :  {
  public static boolean com.lynx.config.LynxLiteConfigs.supportCustomEmojiInInput();
  public static boolean com.lynx.config.LynxLiteConfigs.supportCustomEmojiInText();
  public static boolean com.lynx.config.LynxLiteConfigs.enablePrimJSTrail();
  public static boolean com.lynx.config.LynxLiteConfigs.enableNewGesture();
  public static boolean com.lynx.config.LynxLiteConfigs.requireQuickSharedLibrary();
  public static boolean com.lynx.config.LynxLiteConfigs.enableNewFresco();
}

public class com::lynx::tasm::LynxLoadMeta :  {
  public String com.lynx.tasm.LynxLoadMeta.getUrl();
  public boolean com.lynx.tasm.LynxLoadMeta.isBundleValid();
  public boolean com.lynx.tasm.LynxLoadMeta.isBinaryValid();
  public byte[] com.lynx.tasm.LynxLoadMeta.getTemplateBinary();
  public TemplateBundle com.lynx.tasm.LynxLoadMeta.getTemplateBundle();
  public TemplateData com.lynx.tasm.LynxLoadMeta.getInitialData();
  public TemplateData com.lynx.tasm.LynxLoadMeta.getGlobalProps();
  public Map< String, String > com.lynx.tasm.LynxLoadMeta.getLynxViewConfig();
  public LynxLoadMode com.lynx.tasm.LynxLoadMeta.getLoadMode();
  public EnumSet< LynxLoadOption > com.lynx.tasm.LynxLoadMeta.getLoadOption();
  public boolean com.lynx.tasm.LynxLoadMeta.enableDumpElementTree();
  public boolean com.lynx.tasm.LynxLoadMeta.enableRecycleTemplateBundle();
  public boolean com.lynx.tasm.LynxLoadMeta.enableProcessLayout();
}

public enum com::lynx::tasm::LynxLoadMode {
  public com.lynx.tasm.LynxLoadMode.NORMAL NORMAL;
  public com.lynx.tasm.LynxLoadMode.PRE_PAINTING PRE_PAINTING;
  public com.lynx.tasm.LynxLoadMode.PRE_PAINTING_DRAW PRE_PAINTING_DRAW;
  public com.lynx.tasm.LynxLoadMode.LynxLoadMode(int id);
  public int com.lynx.tasm.LynxLoadMode.id();
}

public enum com::lynx::tasm::LynxLoadOption {
  public com.lynx.tasm.LynxLoadOption.DUMP_ELEMENT DUMP_ELEMENT;
  public com.lynx.tasm.LynxLoadOption.RECYCLE_TEMPLATE_BUNDLE RECYCLE_TEMPLATE_BUNDLE;
  public com.lynx.tasm.LynxLoadOption.PROCESS_LAYOUT_WITHOUT_UI_FLUSH PROCESS_LAYOUT_WITHOUT_UI_FLUSH;
  public com.lynx.tasm.LynxLoadOption.LynxLoadOption(int id);
  public int com.lynx.tasm.LynxLoadOption.id();
}

public class com::lynx::tasm::performance::longtasktiming::LynxLongTaskMonitor :  {
  public final String com.lynx.tasm.performance.longtasktiming.LynxLongTaskMonitor.PLATFORM_FUNC_TASK PLATFORM_FUNC_TASK;
  public static boolean com.lynx.tasm.performance.longtasktiming.LynxLongTaskMonitor.willProcessTask(String name, int instanceId, LynxBooleanOption enabled);
  public static boolean com.lynx.tasm.performance.longtasktiming.LynxLongTaskMonitor.willProcessTask(String type, String name, String taskInfo, int instanceId, LynxBooleanOption enabled);
  public static void com.lynx.tasm.performance.longtasktiming.LynxLongTaskMonitor.updateLongTaskTimingIfNeed(String type, String name, String taskInfo);
  public static void com.lynx.tasm.performance.longtasktiming.LynxLongTaskMonitor.didProcessTask();
}

public class com::lynx::tasm::behavior::ui::utils::LynxMask : LynxDrawableManager< MaskDrawable > {
  public com.lynx.tasm.behavior.ui.utils.LynxMask.LynxMask(LynxContext context);
}

public class abstract com::lynx::tasm::resourceprovider::media::LynxMediaResourceFetcher :  {
  public abstract String com.lynx.tasm.resourceprovider.media.LynxMediaResourceFetcher.shouldRedirectUrl(LynxResourceRequest request);
  public OptionalBool com.lynx.tasm.resourceprovider.media.LynxMediaResourceFetcher.isLocalResource(String url);
  public void com.lynx.tasm.resourceprovider.media.LynxMediaResourceFetcher.fetchImage(LynxResourceRequest request, LynxResourceCallback< Closeable > callback);
}

public class com::lynx::tasm::service::LynxMemoryInfo :  {
  public final String com.lynx.tasm.service.LynxMemoryInfo.TYPE_IMAGE TYPE_IMAGE;
  public long com.lynx.tasm.service.LynxMemoryInfo.getFetchDuration();
  public long com.lynx.tasm.service.LynxMemoryInfo.getFinishTimeStamp();
  public long com.lynx.tasm.service.LynxMemoryInfo.getCompleteDuration();
  public long com.lynx.tasm.service.LynxMemoryInfo.getStartTimeStamp();
  public String com.lynx.tasm.service.LynxMemoryInfo.getSessionId();
  public String com.lynx.tasm.service.LynxMemoryInfo.getPhase();
  public String com.lynx.tasm.service.LynxMemoryInfo.getTemplateURL();
  public String com.lynx.tasm.service.LynxMemoryInfo.getType();
  public float com.lynx.tasm.service.LynxMemoryInfo.getMemoryCost();
  public long com.lynx.tasm.service.LynxMemoryInfo.getViewWidth();
  public long com.lynx.tasm.service.LynxMemoryInfo.getViewHeight();
  public String com.lynx.tasm.service.LynxMemoryInfo.getAddress();
  public String com.lynx.tasm.service.LynxMemoryInfo.getParentAddress();
  public long com.lynx.tasm.service.LynxMemoryInfo.getWidth();
  public long com.lynx.tasm.service.LynxMemoryInfo.getHeight();
  public String com.lynx.tasm.service.LynxMemoryInfo.getConfig();
  public String com.lynx.tasm.service.LynxMemoryInfo.getResourceURL();
  public int com.lynx.tasm.service.LynxMemoryInfo.getIsSuccess();
  public int com.lynx.tasm.service.LynxMemoryInfo.getIsFlattenAnim();
}

public interface com::lynx::tasm::service::LynxMemoryInfo::LynxMemoryType {
}

public interface com::lynx::jsbridge::LynxMethod {
}

public class com::lynx::jsbridge::LynxMethodWrapper :  {
  public Method com.lynx.jsbridge.LynxMethodWrapper.getMethod();
  public String com.lynx.jsbridge.LynxMethodWrapper.getSignature();
}

public class abstract com::lynx::jsbridge::LynxModule :  {
  public com.lynx.jsbridge.LynxModule.LynxModule(Context context);
  public com.lynx.jsbridge.LynxModule.LynxModule(Context context, Object param);
  public void com.lynx.jsbridge.LynxModule.setExtraData(Object data);
  public void com.lynx.jsbridge.LynxModule.destroy();
}

public class com::lynx::jsbridge::LynxModuleFactory :  {
  public com.lynx.jsbridge.LynxModuleFactory.LynxModuleFactory(@NonNull Context context);
  public void com.lynx.jsbridge.LynxModuleFactory.setContext(@NonNull Context context);
  public void com.lynx.jsbridge.LynxModuleFactory.setLynxModuleExtraData(Object data);
  public void com.lynx.jsbridge.LynxModuleFactory.registerModule( @NonNull String name, @NonNull Class<? extends LynxModule > module, @Nullable Object param);
  public void com.lynx.jsbridge.LynxModuleFactory.addModuleParamWrapper(List< ParamWrapper > wrappers);
  public void com.lynx.jsbridge.LynxModuleFactory.addModuleParamWrapperIfAbsent(List< ParamWrapper > wrappers);
  public LynxModuleWrapper com.lynx.jsbridge.LynxModuleFactory.getModule(String name);
  public void com.lynx.jsbridge.LynxModuleFactory.markLynxViewIsDestroying();
  public void com.lynx.jsbridge.LynxModuleFactory.retainJniObject();
  public long com.lynx.jsbridge.LynxModuleFactory.getNativePtr();
  public void com.lynx.jsbridge.LynxModuleFactory.destroy();
}

public class com::lynx::jsbridge::LynxModuleWrapper :  {
  public com.lynx.jsbridge.LynxModuleWrapper.LynxModuleWrapper(String name, LynxModule module);
  public LynxModule com.lynx.jsbridge.LynxModuleWrapper.getModule();
  public String com.lynx.jsbridge.LynxModuleWrapper.getName();
  public Collection< MethodDescriptor > com.lynx.jsbridge.LynxModuleWrapper.getMethodDescriptors();
  public Collection< AttributeDescriptor > com.lynx.jsbridge.LynxModuleWrapper.getAttributeDescriptor();
  public void com.lynx.jsbridge.LynxModuleWrapper.destroy();
}

public class com::lynx::tasm::base::LynxNativeMemoryTracer :  {
  public static void com.lynx.tasm.base.LynxNativeMemoryTracer.setup(Context context, int minWatchedSize);
  public static void com.lynx.tasm.base.LynxNativeMemoryTracer.setup(Context context);
  public static void com.lynx.tasm.base.LynxNativeMemoryTracer.writeMemoryRecordsToFile(String reportsDir);
  public static void com.lynx.tasm.base.LynxNativeMemoryTracer.startTracing(int minWatchedSize);
  public static void com.lynx.tasm.base.LynxNativeMemoryTracer.startTracing();
  public static void com.lynx.tasm.base.LynxNativeMemoryTracer.stopTracing();
}

public class com::lynx::tasm::navigator::LynxNavigator :  {
  public static LynxNavigator com.lynx.tasm.navigator.LynxNavigator.inst();
  public LynxNavigator com.lynx.tasm.navigator.LynxNavigator.setSchemaInterceptor(LynxSchemaInterceptor interceptor);
  public LynxNavigator com.lynx.tasm.navigator.LynxNavigator.setMaxCapacity(int opacity);
  public void com.lynx.tasm.navigator.LynxNavigator.registerLynxHolder(LynxHolder holder);
  public void com.lynx.tasm.navigator.LynxNavigator.registerLynxHolder(LynxHolder holder, LynxView initLynxView);
  public void com.lynx.tasm.navigator.LynxNavigator.unRegisterLynxHolder(LynxHolder holder);
  public void com.lynx.tasm.navigator.LynxNavigator.navigate(@NonNull String name, Map< String, Object > param);
  public void com.lynx.tasm.navigator.LynxNavigator.replace(@NonNull String name, Map< String, Object > param);
  public void com.lynx.tasm.navigator.LynxNavigator.goBack();
  public void com.lynx.tasm.navigator.LynxNavigator.registerRoute(ReadableMap routeTable);
  public boolean com.lynx.tasm.navigator.LynxNavigator.onBackPressed(LynxHolder lynxHolder);
  public LynxCardManager com.lynx.tasm.navigator.LynxNavigator.getCurrentCardManager();
  public void com.lynx.tasm.navigator.LynxNavigator.onEnterForeground(LynxHolder lynxHolder);
  public void com.lynx.tasm.navigator.LynxNavigator.onEnterBackground(LynxHolder lynxHolder);
}

public interface com::lynx::tasm::gesture::LynxNewGestureDelegate {
  public int com.lynx.tasm.gesture.LynxNewGestureDelegate.STATE_ACTIVE STATE_ACTIVE;
  public int com.lynx.tasm.gesture.LynxNewGestureDelegate.STATE_FAIL STATE_FAIL;
  public int com.lynx.tasm.gesture.LynxNewGestureDelegate.STATE_END STATE_END;
  public void com.lynx.tasm.gesture.LynxNewGestureDelegate.setGestureDetectorState(int gestureId, int state);
  public void com.lynx.tasm.gesture.LynxNewGestureDelegate.consumeGesture(int gestureId, ReadableMap params);
  public float[] com.lynx.tasm.gesture.LynxNewGestureDelegate.scrollBy(float deltaX, float deltaY);
}

public class com::lynx::tasm::behavior::ui::accessibility::LynxNodeProvider : AccessibilityNodeProviderCompat {
  public final int com.lynx.tasm.behavior.ui.accessibility.LynxNodeProvider.SECTION_COUNT SECTION_COUNT;
  public com.lynx.tasm.behavior.ui.accessibility.LynxNodeProvider.LynxNodeProvider(LynxAccessibilityDelegate delegate);
  public AccessibilityNodeInfoCompat com.lynx.tasm.behavior.ui.accessibility.LynxNodeProvider.createAccessibilityNodeInfo(int virtualViewId);
  public boolean com.lynx.tasm.behavior.ui.accessibility.LynxNodeProvider.performAction(int virtualViewId, int action, Bundle arguments);
  public List< AccessibilityNodeInfoCompat > com.lynx.tasm.behavior.ui.accessibility.LynxNodeProvider.findAccessibilityNodeInfosByText(String text, int virtualViewId);
}

public class abstract com::lynx::tasm::behavior::LynxObserverManager :  {
  public com.lynx.tasm.behavior.LynxObserverManager.LynxObserverManager(String tag);
  public void com.lynx.tasm.behavior.LynxObserverManager.observerHandler();
  public void com.lynx.tasm.behavior.LynxObserverManager.onAttachedToWindow();
  public void com.lynx.tasm.behavior.LynxObserverManager.addToObserverTree();
  public void com.lynx.tasm.behavior.LynxObserverManager.isLynxViewChanged();
  public void com.lynx.tasm.behavior.LynxObserverManager.setObserverFrameRate(ReadableMap options);
  public void com.lynx.tasm.behavior.LynxObserverManager.onRootViewDraw(Canvas canvas);
  public void com.lynx.tasm.behavior.LynxObserverManager.requestCheckUI();
  public void com.lynx.tasm.behavior.LynxObserverManager.destroy();
  public void com.lynx.tasm.behavior.LynxObserverManager.updateWindowSize(LynxContext context);
}

public class com::lynx::tasm::behavior::ui::shapes::LynxOffsetCalculator :  {
  public static float[] com.lynx.tasm.behavior.ui.shapes.LynxOffsetCalculator.pointAtProgress(Path path, float progress);
}

public interface com::lynx::tasm::base::LynxPageLoadListener {
  public void com.lynx.tasm.base.LynxPageLoadListener.onFirstScreen();
  public void com.lynx.tasm.base.LynxPageLoadListener.onPageUpdate();
  public void com.lynx.tasm.base.LynxPageLoadListener.onUpdateDataWithoutChange();
}

public class com::lynx::tasm::LynxPerfMetric :  {
  public com.lynx.tasm.LynxPerfMetric.LynxPerfMetric(ReadableMap metric, ReadableMap timingMetric, String url, String pageType, String reactVersion);
  public JSONObject com.lynx.tasm.LynxPerfMetric.toJSONObject();
  public double com.lynx.tasm.LynxPerfMetric.getTasmEndDecodeFinishLoadTemplate();
  public double com.lynx.tasm.LynxPerfMetric.getCoreJSSize();
  public double com.lynx.tasm.LynxPerfMetric.getRenderPage();
  public double com.lynx.tasm.LynxPerfMetric.getTasmBinaryDecode();
  public double com.lynx.tasm.LynxPerfMetric.getDiffSameRoot();
  public double com.lynx.tasm.LynxPerfMetric.getJsAndTasmAllReady();
  public double com.lynx.tasm.LynxPerfMetric.getJsFinishLoadCore();
  public double com.lynx.tasm.LynxPerfMetric.getJsRuntimeType();
  public double com.lynx.tasm.LynxPerfMetric.getDiffRootCreate();
  public double com.lynx.tasm.LynxPerfMetric.getLayout();
  public double com.lynx.tasm.LynxPerfMetric.getTasmFinishLoadTemplate();
  public double com.lynx.tasm.LynxPerfMetric.getJsFinishLoadApp();
  public double com.lynx.tasm.LynxPerfMetric.getTti();
  public double com.lynx.tasm.LynxPerfMetric.getFirsPageLayout();
  public boolean com.lynx.tasm.LynxPerfMetric.isHasActualFMP();
  public double com.lynx.tasm.LynxPerfMetric.getActualFMPDuration();
  public double com.lynx.tasm.LynxPerfMetric.getActualFirstScreenEndTimeStamp();
  public double com.lynx.tasm.LynxPerfMetric.getSsrFmp();
  public double com.lynx.tasm.LynxPerfMetric.getSsrDispatch();
  public double com.lynx.tasm.LynxPerfMetric.getSsrGenerateDom();
  public double com.lynx.tasm.LynxPerfMetric.getSsrSourceSize();
  public boolean com.lynx.tasm.LynxPerfMetric.getIsSsrHydrate();
  public void com.lynx.tasm.LynxPerfMetric.setIsColdBoot(boolean is);
  public void com.lynx.tasm.LynxPerfMetric.correctFirstPageLayout(long timestamp);
  public void com.lynx.tasm.LynxPerfMetric.setInitTiming(long start, long end);
  public String com.lynx.tasm.LynxPerfMetric.toString();
}

public class com::lynx::tasm::LynxViewClientV2::LynxPipelineInfo :  {
  public com.lynx.tasm.LynxViewClientV2.LynxPipelineInfo.LynxPipelineInfo(String url);
  public String com.lynx.tasm.LynxViewClientV2.LynxPipelineInfo.getUrl();
  public boolean com.lynx.tasm.LynxViewClientV2.LynxPipelineInfo.isFromFirstScreen();
  public boolean com.lynx.tasm.LynxViewClientV2.LynxPipelineInfo.isFromReload();
  public void com.lynx.tasm.LynxViewClientV2.LynxPipelineInfo.addPipelineOrigin(LynxPipelineOrigin pipelineOrigin);
}

public enum com::lynx::tasm::LynxViewClientV2::LynxPipelineInfo::LynxPipelineOrigin {
  public com.lynx.tasm.LynxViewClientV2.LynxPipelineInfo.LynxPipelineOrigin.LYNX_FIRST_SCREEN LYNX_FIRST_SCREEN;
  public com.lynx.tasm.LynxViewClientV2.LynxPipelineInfo.LynxPipelineOrigin.LYNX_RELOAD LYNX_RELOAD;
  public com.lynx.tasm.LynxViewClientV2.LynxPipelineInfo.LynxPipelineOrigin.LynxPipelineOrigin(int origin);
  public int com.lynx.tasm.LynxViewClientV2.LynxPipelineInfo.LynxPipelineOrigin.getValue();
}

public interface com::lynx::tasm::behavior::LynxProp {
  public String com.lynx.tasm.behavior.LynxProp.USE_DEFAULT_TYPE USE_DEFAULT_TYPE;
  public String com.lynx.tasm.behavior.LynxProp.name();
  public String com.lynx.tasm.behavior.LynxProp.customType() default USE_DEFAULT_TYPE;
  public double com.lynx.tasm.behavior.LynxProp.defaultDouble() default 0.0;
  public float com.lynx.tasm.behavior.LynxProp.defaultFloat() default 0.0f;
  public int com.lynx.tasm.behavior.LynxProp.defaultInt() default 0;
  public boolean com.lynx.tasm.behavior.LynxProp.defaultBoolean() default false;
}

public interface com::lynx::tasm::behavior::LynxPropGroup {
  public String com.lynx.tasm.behavior.LynxPropGroup.USE_DEFAULT_TYPE USE_DEFAULT_TYPE;
  public String[] com.lynx.tasm.behavior.LynxPropGroup.names();
  public String com.lynx.tasm.behavior.LynxPropGroup.customType() default USE_DEFAULT_TYPE;
  public float com.lynx.tasm.behavior.LynxPropGroup.defaultFloat() default 0.0f;
  public double com.lynx.tasm.behavior.LynxPropGroup.defaultDouble() default 0.0;
  public int com.lynx.tasm.behavior.LynxPropGroup.defaultInt() default 0;
}

public interface com::lynx::tasm::behavior::LynxPropsHolder {
}

public class com::lynx::tasm::provider::LynxProviderRegistry :  {
  public final String com.lynx.tasm.provider.LynxProviderRegistry.LYNX_PROVIDER_TYPE_IMAGE LYNX_PROVIDER_TYPE_IMAGE;
  public final String com.lynx.tasm.provider.LynxProviderRegistry.LYNX_PROVIDER_TYPE_FONT LYNX_PROVIDER_TYPE_FONT;
  public final String com.lynx.tasm.provider.LynxProviderRegistry.LYNX_PROVIDER_TYPE_LOTTIE LYNX_PROVIDER_TYPE_LOTTIE;
  public final String com.lynx.tasm.provider.LynxProviderRegistry.LYNX_PROVIDER_TYPE_VIDEO LYNX_PROVIDER_TYPE_VIDEO;
  public final String com.lynx.tasm.provider.LynxProviderRegistry.LYNX_PROVIDER_TYPE_SVG LYNX_PROVIDER_TYPE_SVG;
  public final String com.lynx.tasm.provider.LynxProviderRegistry.LYNX_PROVIDER_TYPE_TEMPLATE LYNX_PROVIDER_TYPE_TEMPLATE;
  public final String com.lynx.tasm.provider.LynxProviderRegistry.LYNX_PROVIDER_TYPE_LYNX_CORE_JS LYNX_PROVIDER_TYPE_LYNX_CORE_JS;
  public final String com.lynx.tasm.provider.LynxProviderRegistry.LYNX_PROVIDER_TYPE_DYNAMIC_COMPONENT LYNX_PROVIDER_TYPE_DYNAMIC_COMPONENT;
  public final String com.lynx.tasm.provider.LynxProviderRegistry.LYNX_PROVIDER_TYPE_I18N_TEXT LYNX_PROVIDER_TYPE_I18N_TEXT;
  public final String com.lynx.tasm.provider.LynxProviderRegistry.LYNX_PROVIDER_TYPE_THEME LYNX_PROVIDER_TYPE_THEME;
  public final String com.lynx.tasm.provider.LynxProviderRegistry.LYNX_PROVIDER_TYPE_EXTERNAL_JS LYNX_PROVIDER_TYPE_EXTERNAL_JS;
  public void com.lynx.tasm.provider.LynxProviderRegistry.addLynxResourceProvider(String key, LynxResourceProvider provider);
  public LynxResourceProvider com.lynx.tasm.provider.LynxProviderRegistry.getProviderByKey(String key);
  public void com.lynx.tasm.provider.LynxProviderRegistry.clear();
}

public interface com::lynx::tasm::provider::LynxResCallback {
  public void com.lynx.tasm.provider.LynxResCallback.onSuccess(@NonNull LynxResResponse response);
  public void com.lynx.tasm.provider.LynxResCallback.onFailed(@NonNull LynxResResponse response);
}

public class abstract com::lynx::tasm::provider::LynxResourceCallback :  {
  public void com.lynx.tasm.provider.LynxResourceCallback< C >.onResponse(@NonNull LynxResourceResponse< C > response);
}

public interface com::lynx::tasm::resourceprovider::LynxResourceCallback {
  public void com.lynx.tasm.resourceprovider.LynxResourceCallback< T >.onResponse(LynxResourceResponse< T > response);
}

public class abstract com::lynx::tasm::provider::LynxResourceFetcher :  {
  public abstract ILynxResourceRequestOperation com.lynx.tasm.provider.LynxResourceFetcher< T >.request( @NonNull final LynxResourceRequest< T > request, @NonNull final LynxResourceCallback< ILynxResourceResponseDataInfo > callback);
  public abstract LynxResourceResponse< ILynxResourceResponseDataInfo > com.lynx.tasm.provider.LynxResourceFetcher< T >.requestSync( @NonNull final LynxResourceRequest< T > request);
}

public class com::lynx::tasm::core::resource::LynxResourceLoader :  {
  public com.lynx.tasm.core.resource.LynxResourceLoader.LynxResourceLoader(LynxBackgroundRuntimeOptions runtimeOptions, DynamicComponentFetcher fetcher, ILynxErrorReceiver errorReceiver, LynxTemplateResourceFetcher templateFetcher, LynxGenericResourceFetcher genericResourceFetcher);
  public byte[] com.lynx.tasm.core.resource.LynxResourceLoader.loadLynxJSAsset(String name);
}

public class com::lynx::jsbridge::LynxResourceModule : com.lynx.jsbridge.LynxContextModule {
  public final String com.lynx.jsbridge.LynxResourceModule.NAME NAME;
  public final String com.lynx.jsbridge.LynxResourceModule.DATA_KEY DATA_KEY;
  public final String com.lynx.jsbridge.LynxResourceModule.URI_KEY URI_KEY;
  public final String com.lynx.jsbridge.LynxResourceModule.TYPE_KEY TYPE_KEY;
  public final String com.lynx.jsbridge.LynxResourceModule.PARAMS_KEY PARAMS_KEY;
  public final String com.lynx.jsbridge.LynxResourceModule.CODE_KEY CODE_KEY;
  public final String com.lynx.jsbridge.LynxResourceModule.MSG_KEY MSG_KEY;
  public final String com.lynx.jsbridge.LynxResourceModule.DETAIL_KEY DETAIL_KEY;
  public final String com.lynx.jsbridge.LynxResourceModule.IMAGE_TYPE IMAGE_TYPE;
  public final String com.lynx.jsbridge.LynxResourceModule.VIDEO_TYPE VIDEO_TYPE;
  public final String com.lynx.jsbridge.LynxResourceModule.AUDIO_TYPE AUDIO_TYPE;
  public final long com.lynx.jsbridge.LynxResourceModule.DEFAULT_MEDIA_SIZE DEFAULT_MEDIA_SIZE;
  public com.lynx.jsbridge.LynxResourceModule.LynxResourceModule(LynxContext context);
}

public class abstract com::lynx::tasm::provider::LynxResourceProvider :  {
  public void com.lynx.tasm.provider.LynxResourceProvider< T, C >.request(@NonNull final LynxResourceRequest< T > request, @NonNull final LynxResourceCallback< C > callback);
  public void com.lynx.tasm.provider.LynxResourceProvider< T, C >.request(@NonNull final LynxResourceRequest< T > request, @NonNull final LynxResourceCallback< C > callback, LynxContext contetx);
  public void com.lynx.tasm.provider.LynxResourceProvider< T, C >.cancel(@NonNull final LynxResourceRequest< T > request);
}

public class com::lynx::tasm::provider::LynxResourceRequest :  {
  public com.lynx.tasm.provider.LynxResourceRequest< T >.LynxResourceRequest(String url);
  public com.lynx.tasm.provider.LynxResourceRequest< T >.LynxResourceRequest(String url, T requestParams);
  public com.lynx.tasm.provider.LynxResourceRequest< T >.LynxResourceRequest(String url, T requestParams, LynxResourceType resourceType);
  public String com.lynx.tasm.provider.LynxResourceRequest< T >.getUrl();
  public T com.lynx.tasm.provider.LynxResourceRequest< T >.getRequestParams();
  public LynxResourceServiceRequestParams com.lynx.tasm.provider.LynxResourceRequest< T >.getLynxResourceServiceRequestParams();
  public LynxResourceType com.lynx.tasm.provider.LynxResourceRequest< T >.getRequestResourceType();
}

public class com::lynx::tasm::resourceprovider::LynxResourceRequest :  {
  public com.lynx.tasm.resourceprovider.LynxResourceRequest.LynxResourceRequest(String url, LynxResourceType type);
  public String com.lynx.tasm.resourceprovider.LynxResourceRequest.getUrl();
  public LynxResourceType com.lynx.tasm.resourceprovider.LynxResourceRequest.getResourceType();
  public void com.lynx.tasm.resourceprovider.LynxResourceRequest.setAsyncMode(AsyncMode mode);
  public AsyncMode com.lynx.tasm.resourceprovider.LynxResourceRequest.getAsyncMode();
  public void com.lynx.tasm.resourceprovider.LynxResourceRequest.setParams(Map< String, Object > params);
  public Map< String, Object > com.lynx.tasm.resourceprovider.LynxResourceRequest.getParams();
}

public class com::lynx::tasm::provider::LynxResourceResponse :  {
  public final int com.lynx.tasm.provider.LynxResourceResponse< T >.FAILED FAILED;
  public final int com.lynx.tasm.provider.LynxResourceResponse< T >.SUCCESS SUCCESS;
  public Throwable com.lynx.tasm.provider.LynxResourceResponse< T >.getError();
  public T com.lynx.tasm.provider.LynxResourceResponse< T >.getData();
  public boolean com.lynx.tasm.provider.LynxResourceResponse< T >.success();
  public int com.lynx.tasm.provider.LynxResourceResponse< T >.getCode();
  public static LynxResourceResponse com.lynx.tasm.provider.LynxResourceResponse< T >.failed(int code, Throwable error);
  public static< T > LynxResourceResponse< T > com.lynx.tasm.provider.LynxResourceResponse< T >.success(T data);
}

public class com::lynx::tasm::resourceprovider::LynxResourceResponse :  {
  public ResponseState com.lynx.tasm.resourceprovider.LynxResourceResponse< T >.getState();
  public Throwable com.lynx.tasm.resourceprovider.LynxResourceResponse< T >.getError();
  public T com.lynx.tasm.resourceprovider.LynxResourceResponse< T >.getData();
  public static LynxResourceResponse com.lynx.tasm.resourceprovider.LynxResourceResponse< T >.onFailed(Throwable error);
  public static< T > LynxResourceResponse< T > com.lynx.tasm.resourceprovider.LynxResourceResponse< T >.onSuccess(T data);
}

public class abstract com::lynx::tasm::service::LynxResourceServiceCallback :  {
  public void com.lynx.tasm.service.LynxResourceServiceCallback.onResponse(@NonNull ILynxResourceServiceResponse response);
}

public class com::lynx::tasm::provider::LynxResourceServiceProvider : com::lynx::tasm::provider::LynxResourceFetcher< T > {
  public static synchronized boolean com.lynx.tasm.provider.LynxResourceServiceProvider< T >.ensureLynxService();
  public ILynxResourceRequestOperation com.lynx.tasm.provider.LynxResourceServiceProvider< T >.request(@NonNull final LynxResourceRequest< T > request, @NonNull final LynxResourceCallback< ILynxResourceResponseDataInfo > callback);
  public LynxResourceResponse< ILynxResourceResponseDataInfo > com.lynx.tasm.provider.LynxResourceServiceProvider< T >.requestSync( @NonNull final LynxResourceRequest< T > request);
}

public class com::lynx::tasm::service::LynxResourceServiceRequestParams :  {
  public LynxServiceScene com.lynx.tasm.service.LynxResourceServiceRequestParams.getResourceScene();
  public void com.lynx.tasm.service.LynxResourceServiceRequestParams.setResourceScene(LynxServiceScene resourceScene);
  public Boolean com.lynx.tasm.service.LynxResourceServiceRequestParams.getEnableMemoryCache();
  public void com.lynx.tasm.service.LynxResourceServiceRequestParams.setEnableMemoryCache(Boolean enableMemoryCache);
  public Boolean com.lynx.tasm.service.LynxResourceServiceRequestParams.getEnableRequestReuse();
  public void com.lynx.tasm.service.LynxResourceServiceRequestParams.setEnableRequestReuse(Boolean enableRequestReuse);
  public String com.lynx.tasm.service.LynxResourceServiceRequestParams.getTemplateUrl();
  public void com.lynx.tasm.service.LynxResourceServiceRequestParams.setTemplateUrl(String templateUrl);
}

public enum com::lynx::tasm::provider::LynxResourceRequest::LynxResourceType {
  public com.lynx.tasm.provider.LynxResourceRequest< T >.LynxResourceType.LynxResourceTypeImage LynxResourceTypeImage;
  public com.lynx.tasm.provider.LynxResourceRequest< T >.LynxResourceType.LynxResourceTypeFont LynxResourceTypeFont;
  public com.lynx.tasm.provider.LynxResourceRequest< T >.LynxResourceType.LynxResourceTypeLottie LynxResourceTypeLottie;
  public com.lynx.tasm.provider.LynxResourceRequest< T >.LynxResourceType.LynxResourceTypeVideo LynxResourceTypeVideo;
  public com.lynx.tasm.provider.LynxResourceRequest< T >.LynxResourceType.LynxResourceTypeSVG LynxResourceTypeSVG;
  public com.lynx.tasm.provider.LynxResourceRequest< T >.LynxResourceType.LynxResourceTypeTemplate LynxResourceTypeTemplate;
  public com.lynx.tasm.provider.LynxResourceRequest< T >.LynxResourceType.LynxResourceTypeLynxCoreJS LynxResourceTypeLynxCoreJS;
  public com.lynx.tasm.provider.LynxResourceRequest< T >.LynxResourceType.LynxResourceTypeDynamicComponent LynxResourceTypeDynamicComponent;
  public com.lynx.tasm.provider.LynxResourceRequest< T >.LynxResourceType.LynxResourceTypeI18NText LynxResourceTypeI18NText;
  public com.lynx.tasm.provider.LynxResourceRequest< T >.LynxResourceType.LynxResourceTypeTheme LynxResourceTypeTheme;
  public com.lynx.tasm.provider.LynxResourceRequest< T >.LynxResourceType.LynxResourceTypeExternalJSSource LynxResourceTypeExternalJSSource;
}

public enum com::lynx::tasm::resourceprovider::LynxResourceRequest::LynxResourceType {
  public com.lynx.tasm.resourceprovider.LynxResourceRequest.LynxResourceType.LynxResourceTypeGeneric LynxResourceTypeGeneric;
  public com.lynx.tasm.resourceprovider.LynxResourceRequest.LynxResourceType.LynxResourceTypeImage LynxResourceTypeImage;
  public com.lynx.tasm.resourceprovider.LynxResourceRequest.LynxResourceType.LynxResourceTypeFont LynxResourceTypeFont;
  public com.lynx.tasm.resourceprovider.LynxResourceRequest.LynxResourceType.LynxResourceTypeLottie LynxResourceTypeLottie;
  public com.lynx.tasm.resourceprovider.LynxResourceRequest.LynxResourceType.LynxResourceTypeVideo LynxResourceTypeVideo;
  public com.lynx.tasm.resourceprovider.LynxResourceRequest.LynxResourceType.LynxResourceTypeSVG LynxResourceTypeSVG;
  public com.lynx.tasm.resourceprovider.LynxResourceRequest.LynxResourceType.LynxResourceTypeTemplate LynxResourceTypeTemplate;
  public com.lynx.tasm.resourceprovider.LynxResourceRequest.LynxResourceType.LynxResourceTypeLynxCoreJS LynxResourceTypeLynxCoreJS;
  public com.lynx.tasm.resourceprovider.LynxResourceRequest.LynxResourceType.LynxResourceTypeDynamicComponent LynxResourceTypeDynamicComponent;
  public com.lynx.tasm.resourceprovider.LynxResourceRequest.LynxResourceType.LynxResourceTypeI18NText LynxResourceTypeI18NText;
  public com.lynx.tasm.resourceprovider.LynxResourceRequest.LynxResourceType.LynxResourceTypeTheme LynxResourceTypeTheme;
  public com.lynx.tasm.resourceprovider.LynxResourceRequest.LynxResourceType.LynxResourceTypeExternalJSSource LynxResourceTypeExternalJSSource;
  public com.lynx.tasm.resourceprovider.LynxResourceRequest.LynxResourceType.LynxResourceTypeExternalByteCode LynxResourceTypeExternalByteCode;
}

public class com::lynx::tasm::provider::LynxResRequest :  {
  public final String com.lynx.tasm.provider.LynxResRequest.METHOD_GET METHOD_GET;
  public final String com.lynx.tasm.provider.LynxResRequest.METHOD_POST METHOD_POST;
  public com.lynx.tasm.provider.LynxResRequest.LynxResRequest(@NonNull String url, @Nullable Object lynxExtraData);
  public String com.lynx.tasm.provider.LynxResRequest.getUrl();
  public void com.lynx.tasm.provider.LynxResRequest.setUrl(@NonNull String url);
  public String com.lynx.tasm.provider.LynxResRequest.getMethod();
  public void com.lynx.tasm.provider.LynxResRequest.setMethod(@ReqMethod String method);
  public Map< String, String > com.lynx.tasm.provider.LynxResRequest.getHeaders();
  public void com.lynx.tasm.provider.LynxResRequest.setHeaders(@Nullable Map< String, String > header);
  public String com.lynx.tasm.provider.LynxResRequest.getMineType();
  public void com.lynx.tasm.provider.LynxResRequest.setMineType(@Nullable String mimeType);
  public String com.lynx.tasm.provider.LynxResRequest.getResponseType();
  public void com.lynx.tasm.provider.LynxResRequest.setResponseType(@Nullable String responseType);
  public String com.lynx.tasm.provider.LynxResRequest.getExtraData();
  public void com.lynx.tasm.provider.LynxResRequest.setExtraData(@Nullable String extraData);
  public Object com.lynx.tasm.provider.LynxResRequest.getLynxExtraData();
}

public class com::lynx::tasm::provider::LynxResResponse :  {
  public String com.lynx.tasm.provider.LynxResResponse.getMimeType();
  public void com.lynx.tasm.provider.LynxResResponse.setMimeType(String mimeType);
  public String com.lynx.tasm.provider.LynxResResponse.getEncoding();
  public void com.lynx.tasm.provider.LynxResResponse.setEncoding(String encoding);
  public int com.lynx.tasm.provider.LynxResResponse.getStatusCode();
  public void com.lynx.tasm.provider.LynxResResponse.setStatusCode(int statusCode);
  public String com.lynx.tasm.provider.LynxResResponse.getReasonPhrase();
  public void com.lynx.tasm.provider.LynxResResponse.setReasonPhrase(String reasonPhrase);
  public Map< String, List< String > > com.lynx.tasm.provider.LynxResResponse.getResponseHeaders();
  public void com.lynx.tasm.provider.LynxResResponse.setResponseHeaders(Map< String, List< String > > responseHeaders);
  public InputStream com.lynx.tasm.provider.LynxResResponse.getInputStream();
  public void com.lynx.tasm.provider.LynxResResponse.setInputStream(InputStream inputStream);
}

public class com::lynx::tasm::navigator::LynxRoute :  {
  public com.lynx.tasm.navigator.LynxRoute.LynxRoute(String templateUrl, Map< String, Object > param);
  public com.lynx.tasm.navigator.LynxRoute.LynxRoute(String templateUrl, String routeName, Map< String, Object > param);
  public String com.lynx.tasm.navigator.LynxRoute.getTemplateUrl();
  public String com.lynx.tasm.navigator.LynxRoute.getRouteName();
  public Map< String, Object > com.lynx.tasm.navigator.LynxRoute.getParam();
}

public interface com::lynx::tasm::navigator::LynxRouteLruCache::LynxRouteCacheListener {
  public void com.lynx.tasm.navigator.LynxRouteLruCache.LynxRouteCacheListener.onLynxViewEvicted(LynxView view);
  public void com.lynx.tasm.navigator.LynxRouteLruCache.LynxRouteCacheListener.onLynxViewRecreated(LynxRoute key, LynxViewCreationListener listener);
}

public class com::lynx::tasm::navigator::LynxRouteLruCache : LruCache< LynxRoute, LynxView > {
  public com.lynx.tasm.navigator.LynxRouteLruCache.LynxRouteLruCache(int maxSize, LynxRouteCacheListener listener);
}

public class com::lynx::tasm::image::LynxScaleTypeDrawable : Drawable {
  public com.lynx.tasm.image.LynxScaleTypeDrawable.LynxScaleTypeDrawable(ImageContent drawDelegate, ScalingUtils.ScaleType scaleType);
  public Drawable com.lynx.tasm.image.LynxScaleTypeDrawable.getAnimDrawable();
  public void com.lynx.tasm.image.LynxScaleTypeDrawable.setCurrent(ImageContent newDelegate);
  public void com.lynx.tasm.image.LynxScaleTypeDrawable.setCurrent(ImageContent newDelegate, boolean needUpdateBounds);
  public void com.lynx.tasm.image.LynxScaleTypeDrawable.setCapInsets(String capInsets, String capInsetsScale);
  public ScalingUtils.ScaleType com.lynx.tasm.image.LynxScaleTypeDrawable.getScaleType();
  public void com.lynx.tasm.image.LynxScaleTypeDrawable.setScaleType(ScalingUtils.ScaleType scaleType);
  public void com.lynx.tasm.image.LynxScaleTypeDrawable.draw(Canvas canvas);
  public void com.lynx.tasm.image.LynxScaleTypeDrawable.setAlpha(int alpha);
  public void com.lynx.tasm.image.LynxScaleTypeDrawable.setColorFilter(@Nullable ColorFilter colorFilter);
  public int com.lynx.tasm.image.LynxScaleTypeDrawable.getOpacity();
  public ImageContent com.lynx.tasm.image.LynxScaleTypeDrawable.getContent();
}

public interface com::lynx::tasm::navigator::LynxSchemaInterceptor {
  public boolean com.lynx.tasm.navigator.LynxSchemaInterceptor.intercept(String schema, Map< String, Object > map);
}

public class com::lynx::tasm::event::LynxScrollEvent : com.lynx.tasm.event.LynxDetailEvent {
  public final String com.lynx.tasm.event.LynxScrollEvent.EVENT_SCROLL EVENT_SCROLL;
  public final String com.lynx.tasm.event.LynxScrollEvent.EVENT_SCROLL_TOUPPER EVENT_SCROLL_TOUPPER;
  public final String com.lynx.tasm.event.LynxScrollEvent.EVENT_SCROLL_TO_UPPER_EDGE EVENT_SCROLL_TO_UPPER_EDGE;
  public final String com.lynx.tasm.event.LynxScrollEvent.EVENT_SCROLL_TOLOWER EVENT_SCROLL_TOLOWER;
  public final String com.lynx.tasm.event.LynxScrollEvent.EVENT_SCROLL_TO_LOWER_EDGE EVENT_SCROLL_TO_LOWER_EDGE;
  public final String com.lynx.tasm.event.LynxScrollEvent.EVENT_SCROLL_TO_NORMAL_STATE EVENT_SCROLL_TO_NORMAL_STATE;
  public final String com.lynx.tasm.event.LynxScrollEvent.EVENT_SCROLL_START EVENT_SCROLL_START;
  public final String com.lynx.tasm.event.LynxScrollEvent.EVENT_SCROLL_END EVENT_SCROLL_END;
  public final String com.lynx.tasm.event.LynxScrollEvent.EVENT_SCROLL_STATE_CHANGE EVENT_SCROLL_STATE_CHANGE;
  public com.lynx.tasm.event.LynxScrollEvent.LynxScrollEvent(int tag, String type);
  public void com.lynx.tasm.event.LynxScrollEvent.setScrollParams(int left, int top, int contentHeight, int contentWidth, int x, int y);
  public static LynxScrollEvent com.lynx.tasm.event.LynxScrollEvent.createScrollEvent(int tag, String type);
}

public class com::lynx::tasm::service::LynxServiceCenter : com.lynx.tasm.service.LynxLazyInitializer {
  public static LynxServiceCenter com.lynx.tasm.service.LynxServiceCenter.inst();
  public void com.lynx.tasm.service.LynxServiceCenter.registerService(@NonNull IServiceProvider instance);
  public void com.lynx.tasm.service.LynxServiceCenter.registerService(Class<? extends IServiceProvider > clazz, @NonNull IServiceProvider instance);
  public void com.lynx.tasm.service.LynxServiceCenter.unregisterService(Class<? extends IServiceProvider > clazz);
  public void com.lynx.tasm.service.LynxServiceCenter.unregisterAllService();
}

public enum com::lynx::tasm::service::LynxResourceServiceRequestParams::LynxServiceScene {
  public com.lynx.tasm.service.LynxResourceServiceRequestParams.LynxServiceScene.LYNX_TEMPLATE LYNX_TEMPLATE;
  public com.lynx.tasm.service.LynxResourceServiceRequestParams.LynxServiceScene.LYNX_EXTERNAL_JS LYNX_EXTERNAL_JS;
  public com.lynx.tasm.service.LynxResourceServiceRequestParams.LynxServiceScene.LYNX_COMPONENT LYNX_COMPONENT;
  public com.lynx.tasm.service.LynxResourceServiceRequestParams.LynxServiceScene.LYNX_FONT LYNX_FONT;
  public com.lynx.tasm.service.LynxResourceServiceRequestParams.LynxServiceScene.LYNX_I18N LYNX_I18N;
  public com.lynx.tasm.service.LynxResourceServiceRequestParams.LynxServiceScene.LYNX_IMAGE LYNX_IMAGE;
  public com.lynx.tasm.service.LynxResourceServiceRequestParams.LynxServiceScene.LYNX_LOTTIE LYNX_LOTTIE;
  public com.lynx.tasm.service.LynxResourceServiceRequestParams.LynxServiceScene.LYNX_VIDEO LYNX_VIDEO;
  public com.lynx.tasm.service.LynxResourceServiceRequestParams.LynxServiceScene.LYNX_SVG LYNX_SVG;
  public com.lynx.tasm.service.LynxResourceServiceRequestParams.LynxServiceScene.LYNX_CHILD_RESOURCE LYNX_CHILD_RESOURCE;
  public com.lynx.tasm.service.LynxResourceServiceRequestParams.LynxServiceScene.WEB_MAIN_RESOURCE WEB_MAIN_RESOURCE;
  public com.lynx.tasm.service.LynxResourceServiceRequestParams.LynxServiceScene.WEB_CHILD_RESOURCE WEB_CHILD_RESOURCE;
  public com.lynx.tasm.service.LynxResourceServiceRequestParams.LynxServiceScene.PRELOAD_CONFIG PRELOAD_CONFIG;
  public com.lynx.tasm.service.LynxResourceServiceRequestParams.LynxServiceScene.OTHER OTHER;
}

public class com::lynx::jsbridge::LynxSetModule : com.lynx.jsbridge.LynxContextModule {
  public final String com.lynx.jsbridge.LynxSetModule.NAME NAME;
  public com.lynx.jsbridge.LynxSetModule.LynxSetModule(LynxContext context);
  public void com.lynx.jsbridge.LynxSetModule.switchKeyBoardDetect(boolean arg);
  public void com.lynx.jsbridge.LynxSetModule.switchLogToSystem(boolean arg);
  public boolean com.lynx.jsbridge.LynxSetModule.getLogToSystemStatus();
  public void com.lynx.jsbridge.LynxSetModule.switchEnableLayoutOnly(Boolean arg);
  public boolean com.lynx.jsbridge.LynxSetModule.getEnableLayoutOnly();
  public void com.lynx.jsbridge.LynxSetModule.switchIsCreateViewAsync(Boolean arg);
  public boolean com.lynx.jsbridge.LynxSetModule.getIsCreateViewAsync();
  public void com.lynx.jsbridge.LynxSetModule.switchEnableVsyncAlignedFlush(Boolean arg);
  public boolean com.lynx.jsbridge.LynxSetModule.getEnableVsyncAlignedFlush();
}

public interface com::lynx::tasm::behavior::LynxShadowNode {
  public String com.lynx.tasm.behavior.LynxShadowNode.tagName();
}

public class com::lynx::tasm::behavior::ui::list::LynxSnapHelper :  {
  public double com.lynx.tasm.behavior.ui.list.LynxSnapHelper.mSnapAlignmentMillisecondsPerPx mSnapAlignmentMillisecondsPerPx;
  public com.lynx.tasm.behavior.ui.list.LynxSnapHelper.LynxSnapHelper(double snapAlignmentFactor, int snapAlignmentOffset, double snapAlignmentMillisecondsPerPx, LynxSnapHooks snapHooks);
  public int[] com.lynx.tasm.behavior.ui.list.LynxSnapHelper.findTargetSnapOffset(int velocityX, int velocityY, boolean isVertical, boolean isRtl);
}

public interface com::lynx::tasm::behavior::ui::list::LynxSnapHelper::LynxSnapHooks {
  public int com.lynx.tasm.behavior.ui.list.LynxSnapHelper.LynxSnapHooks.getScrollX();
  public int com.lynx.tasm.behavior.ui.list.LynxSnapHelper.LynxSnapHooks.getScrollY();
  public int com.lynx.tasm.behavior.ui.list.LynxSnapHelper.LynxSnapHooks.getScrollHeight();
  public int com.lynx.tasm.behavior.ui.list.LynxSnapHelper.LynxSnapHooks.getScrollWidth();
  public int com.lynx.tasm.behavior.ui.list.LynxSnapHelper.LynxSnapHooks.getChildrenCount();
  public int com.lynx.tasm.behavior.ui.list.LynxSnapHelper.LynxSnapHooks.getVirtualChildrenCount();
  public View com.lynx.tasm.behavior.ui.list.LynxSnapHelper.LynxSnapHooks.getChildAtIndex(int index);
  public View com.lynx.tasm.behavior.ui.list.LynxSnapHelper.LynxSnapHooks.getViewAtPosition(int position);
  public int com.lynx.tasm.behavior.ui.list.LynxSnapHelper.LynxSnapHooks.getIndexFromView(View view);
  public void com.lynx.tasm.behavior.ui.list.LynxSnapHelper.LynxSnapHooks.willSnapTo(int position, int currentOffsetX, int currentOffsetY, int targetOffsetX, int targetOffsetY);
}

public class com::lynx::tasm::LynxSSRHelper :  {
  public void com.lynx.tasm.LynxSSRHelper.onLoadSSRDataBegan(String url);
  public void com.lynx.tasm.LynxSSRHelper.onHydrateBegan();
  public void com.lynx.tasm.LynxSSRHelper.onHydrateFinished();
  public void com.lynx.tasm.LynxSSRHelper.onErrorOccurred(int type, LynxError lynxError);
  public boolean com.lynx.tasm.LynxSSRHelper.isHydratePending();
  public JavaOnlyArray com.lynx.tasm.LynxSSRHelper.processEventParams(JavaOnlyArray params);
  public boolean com.lynx.tasm.LynxSSRHelper.shouldSendEventToSSR();
}

public class com::lynx::tasm::behavior::shadow::text::LynxStrikethroughSpan : StrikethroughSpan {
  public boolean com.lynx.tasm.behavior.shadow.text.LynxStrikethroughSpan.equals(Object o);
  public int com.lynx.tasm.behavior.shadow.text.LynxStrikethroughSpan.hashCode();
}

public class com::lynx::tasm::LynxSubErrorCode :  {
  public final int com.lynx.tasm.LynxSubErrorCode.E_SUCCESS E_SUCCESS;
  public final int com.lynx.tasm.LynxSubErrorCode.E_APP_BUNDLE_LOAD_RENDER_FAILED E_APP_BUNDLE_LOAD_RENDER_FAILED;
  public final int com.lynx.tasm.LynxSubErrorCode.E_APP_BUNDLE_LOAD_ENV_NOT_READY E_APP_BUNDLE_LOAD_ENV_NOT_READY;
  public final int com.lynx.tasm.LynxSubErrorCode.E_APP_BUNDLE_LOAD_BAD_RESPONSE E_APP_BUNDLE_LOAD_BAD_RESPONSE;
  public final int com.lynx.tasm.LynxSubErrorCode.E_APP_BUNDLE_LOAD_PARSE_FAILED E_APP_BUNDLE_LOAD_PARSE_FAILED;
  public final int com.lynx.tasm.LynxSubErrorCode.E_APP_BUNDLE_LOAD_BAD_BUNDLE E_APP_BUNDLE_LOAD_BAD_BUNDLE;
  public final int com.lynx.tasm.LynxSubErrorCode.E_APP_BUNDLE_LOAD_EXCEPTION E_APP_BUNDLE_LOAD_EXCEPTION;
  public final int com.lynx.tasm.LynxSubErrorCode.E_APP_BUNDLE_RELOAD_EARLY_RELOAD E_APP_BUNDLE_RELOAD_EARLY_RELOAD;
  public final int com.lynx.tasm.LynxSubErrorCode.E_APP_BUNDLE_VERIFY_INVALID_SIGNATURE E_APP_BUNDLE_VERIFY_INVALID_SIGNATURE;
  public final int com.lynx.tasm.LynxSubErrorCode.E_BTS_RUNTIME_ERROR E_BTS_RUNTIME_ERROR;
  public final int com.lynx.tasm.LynxSubErrorCode.E_BTS_RUNTIME_ERROR_SCRIPT_ERROR E_BTS_RUNTIME_ERROR_SCRIPT_ERROR;
  public final int com.lynx.tasm.LynxSubErrorCode.E_BTS_RUNTIME_ERROR_BYTECODE_SCRIPT_ERROR E_BTS_RUNTIME_ERROR_BYTECODE_SCRIPT_ERROR;
  public final int com.lynx.tasm.LynxSubErrorCode.E_BTS_RUNTIME_ERROR_BINDINGS_ERROR E_BTS_RUNTIME_ERROR_BINDINGS_ERROR;
  public final int com.lynx.tasm.LynxSubErrorCode.E_BTS_PLATFORM_CALL_JS_FUNCTION_TOO_FREQUENCY E_BTS_PLATFORM_CALL_JS_FUNCTION_TOO_FREQUENCY;
  public final int com.lynx.tasm.LynxSubErrorCode.E_BTS_LIFECYCLE_LISTENER_ERROR_EXCEPTION E_BTS_LIFECYCLE_LISTENER_ERROR_EXCEPTION;
  public final int com.lynx.tasm.LynxSubErrorCode.E_RESOURCE_IMAGE_BIG_IMAGE E_RESOURCE_IMAGE_BIG_IMAGE;
  public final int com.lynx.tasm.LynxSubErrorCode.E_RESOURCE_IMAGE_PIC_SOURCE E_RESOURCE_IMAGE_PIC_SOURCE;
  public final int com.lynx.tasm.LynxSubErrorCode.E_RESOURCE_IMAGE_FROM_USER_OR_DESIGN E_RESOURCE_IMAGE_FROM_USER_OR_DESIGN;
  public final int com.lynx.tasm.LynxSubErrorCode.E_RESOURCE_IMAGE_FROM_NETWORK_OR_OTHERS E_RESOURCE_IMAGE_FROM_NETWORK_OR_OTHERS;
  public final int com.lynx.tasm.LynxSubErrorCode.E_RESOURCE_IMAGE_EXCEPTION E_RESOURCE_IMAGE_EXCEPTION;
  public final int com.lynx.tasm.LynxSubErrorCode.E_RESOURCE_FONT E_RESOURCE_FONT;
  public final int com.lynx.tasm.LynxSubErrorCode.E_RESOURCE_FONT_SRC_FORMAT_ERROR E_RESOURCE_FONT_SRC_FORMAT_ERROR;
  public final int com.lynx.tasm.LynxSubErrorCode.E_RESOURCE_FONT_RESOURCE_LOAD_ERROR E_RESOURCE_FONT_RESOURCE_LOAD_ERROR;
  public final int com.lynx.tasm.LynxSubErrorCode.E_RESOURCE_FONT_BASE64_PARSING_ERROR E_RESOURCE_FONT_BASE64_PARSING_ERROR;
  public final int com.lynx.tasm.LynxSubErrorCode.E_RESOURCE_FONT_FILE_FORMAT_NOT_SUPPORTED E_RESOURCE_FONT_FILE_FORMAT_NOT_SUPPORTED;
  public final int com.lynx.tasm.LynxSubErrorCode.E_RESOURCE_FONT_REGISTER_FAILED E_RESOURCE_FONT_REGISTER_FAILED;
  public final int com.lynx.tasm.LynxSubErrorCode.E_RESOURCE_EXTERNAL_RESOURCE_REQUEST_FAILED E_RESOURCE_EXTERNAL_RESOURCE_REQUEST_FAILED;
  public final int com.lynx.tasm.LynxSubErrorCode.E_RESOURCE_EXTERNAL_RESOURCE_LOCAL_RESOURCE_LOAD_FAIL E_RESOURCE_EXTERNAL_RESOURCE_LOCAL_RESOURCE_LOAD_FAIL;
  public final int com.lynx.tasm.LynxSubErrorCode.E_RESOURCE_I18N E_RESOURCE_I18N;
  public final int com.lynx.tasm.LynxSubErrorCode.E_RESOURCE_MODULE_PARAMS_ERROR E_RESOURCE_MODULE_PARAMS_ERROR;
  public final int com.lynx.tasm.LynxSubErrorCode.E_RESOURCE_MODULE_IMG_PREFETCH_HELPER_NOT_EXIST E_RESOURCE_MODULE_IMG_PREFETCH_HELPER_NOT_EXIST;
  public final int com.lynx.tasm.LynxSubErrorCode.E_RESOURCE_MODULE_RESOURCE_SERVICE_NOT_EXIST E_RESOURCE_MODULE_RESOURCE_SERVICE_NOT_EXIST;
  public final int com.lynx.tasm.LynxSubErrorCode.E_RESOURCE_CUSTOM E_RESOURCE_CUSTOM;
  public final int com.lynx.tasm.LynxSubErrorCode.E_RESOURCE_EXCEPTION E_RESOURCE_EXCEPTION;
  public final int com.lynx.tasm.LynxSubErrorCode.E_DATA_FLOW_UPDATE_INVALID_PROCESSOR E_DATA_FLOW_UPDATE_INVALID_PROCESSOR;
  public final int com.lynx.tasm.LynxSubErrorCode.E_DATA_FLOW_UPDATE_INVALID_TYPE E_DATA_FLOW_UPDATE_INVALID_TYPE;
  public final int com.lynx.tasm.LynxSubErrorCode.E_DATA_FLOW_UPDATE_EXCEPTION E_DATA_FLOW_UPDATE_EXCEPTION;
  public final int com.lynx.tasm.LynxSubErrorCode.E_ELEMENT_API_FATAL E_ELEMENT_API_FATAL;
  public final int com.lynx.tasm.LynxSubErrorCode.E_ELEMENT_API_ERROR E_ELEMENT_API_ERROR;
  public final int com.lynx.tasm.LynxSubErrorCode.E_ELEMENT_UPDATE_NODE_IS_NULL E_ELEMENT_UPDATE_NODE_IS_NULL;
  public final int com.lynx.tasm.LynxSubErrorCode.E_LAYOUT_INTERNAL E_LAYOUT_INTERNAL;
  public final int com.lynx.tasm.LynxSubErrorCode.E_LAYOUT_PERF_INFINITE_LOOP E_LAYOUT_PERF_INFINITE_LOOP;
  public final int com.lynx.tasm.LynxSubErrorCode.E_LAYOUT_UPDATE_UI_NOT_FOUND E_LAYOUT_UPDATE_UI_NOT_FOUND;
  public final int com.lynx.tasm.LynxSubErrorCode.E_LAYOUT_PLATFORM_NODE_NULL E_LAYOUT_PLATFORM_NODE_NULL;
  public final int com.lynx.tasm.LynxSubErrorCode.E_NATIVE_MODULES_COMMON_MODULE_NOT_FOUND E_NATIVE_MODULES_COMMON_MODULE_NOT_FOUND;
  public final int com.lynx.tasm.LynxSubErrorCode.E_NATIVE_MODULES_COMMON_FUNCTION_NOT_FOUND E_NATIVE_MODULES_COMMON_FUNCTION_NOT_FOUND;
  public final int com.lynx.tasm.LynxSubErrorCode.E_NATIVE_MODULES_COMMON_WRONG_PARAM_NUM E_NATIVE_MODULES_COMMON_WRONG_PARAM_NUM;
  public final int com.lynx.tasm.LynxSubErrorCode.E_NATIVE_MODULES_COMMON_WRONG_PARAM_TYPE E_NATIVE_MODULES_COMMON_WRONG_PARAM_TYPE;
  public final int com.lynx.tasm.LynxSubErrorCode.E_NATIVE_MODULES_COMMON_AUTHORIZATION_ERROR E_NATIVE_MODULES_COMMON_AUTHORIZATION_ERROR;
  public final int com.lynx.tasm.LynxSubErrorCode.E_NATIVE_MODULES_COMMON_SYSTEM_AUTHORIZATION_ERROR E_NATIVE_MODULES_COMMON_SYSTEM_AUTHORIZATION_ERROR;
  public final int com.lynx.tasm.LynxSubErrorCode.E_NATIVE_MODULES_COMMON_RETURN_ERROR E_NATIVE_MODULES_COMMON_RETURN_ERROR;
  public final int com.lynx.tasm.LynxSubErrorCode.E_NATIVE_MODULES_COMMON_DEPRECATED E_NATIVE_MODULES_COMMON_DEPRECATED;
  public final int com.lynx.tasm.LynxSubErrorCode.E_NATIVE_MODULES_NETWORK_BAD_RESPONSE E_NATIVE_MODULES_NETWORK_BAD_RESPONSE;
  public final int com.lynx.tasm.LynxSubErrorCode.E_NATIVE_MODULES_CUSTOM_ERROR E_NATIVE_MODULES_CUSTOM_ERROR;
  public final int com.lynx.tasm.LynxSubErrorCode.E_NATIVE_MODULES_EXCEPTION E_NATIVE_MODULES_EXCEPTION;
  public final int com.lynx.tasm.LynxSubErrorCode.E_EVENT_EXCEPTION E_EVENT_EXCEPTION;
  public final int com.lynx.tasm.LynxSubErrorCode.E_MTS_RUNTIME_ERROR E_MTS_RUNTIME_ERROR;
  public final int com.lynx.tasm.LynxSubErrorCode.E_MTS_RENDERER_FUNCTION_FATAL E_MTS_RENDERER_FUNCTION_FATAL;
  public final int com.lynx.tasm.LynxSubErrorCode.E_MTS_RENDERER_FUNCTION_ERROR E_MTS_RENDERER_FUNCTION_ERROR;
  public final int com.lynx.tasm.LynxSubErrorCode.E_THREAD_WRONG_THREAD_DESTROY_ERROR E_THREAD_WRONG_THREAD_DESTROY_ERROR;
  public final int com.lynx.tasm.LynxSubErrorCode.E_THREAD_WRONG_THREAD_SYNC_FLUSH_ERROR E_THREAD_WRONG_THREAD_SYNC_FLUSH_ERROR;
  public final int com.lynx.tasm.LynxSubErrorCode.E_CSS E_CSS;
  public final int com.lynx.tasm.LynxSubErrorCode.E_CSS_UNKNOWN_PROPERTY E_CSS_UNKNOWN_PROPERTY;
  public final int com.lynx.tasm.LynxSubErrorCode.E_CSS_UNSUPPORTED_VALUE E_CSS_UNSUPPORTED_VALUE;
  public final int com.lynx.tasm.LynxSubErrorCode.E_CSS_COMPUTED_CSS_VALUE_UNKNOWN_SETTER E_CSS_COMPUTED_CSS_VALUE_UNKNOWN_SETTER;
  public final int com.lynx.tasm.LynxSubErrorCode.E_CSS_COMPUTED_CSS_VALUE_UNKNOWN_GETTER E_CSS_COMPUTED_CSS_VALUE_UNKNOWN_GETTER;
  public final int com.lynx.tasm.LynxSubErrorCode.E_CSS_COMPUTED_CSS_VALUE_UNSUPPORTED_INHERITANCE E_CSS_COMPUTED_CSS_VALUE_UNSUPPORTED_INHERITANCE;
  public final int com.lynx.tasm.LynxSubErrorCode.E_CSS_PARSER E_CSS_PARSER;
  public final int com.lynx.tasm.LynxSubErrorCode.E_SSR_DECODE E_SSR_DECODE;
  public final int com.lynx.tasm.LynxSubErrorCode.E_SSR_DECODE_API_VERSION_NOT_SUPPORTED E_SSR_DECODE_API_VERSION_NOT_SUPPORTED;
  public final int com.lynx.tasm.LynxSubErrorCode.E_SSR_DECODE_SCRIPT E_SSR_DECODE_SCRIPT;
  public final int com.lynx.tasm.LynxSubErrorCode.E_SSR_LOAD_UNINITIALIZED E_SSR_LOAD_UNINITIALIZED;
  public final int com.lynx.tasm.LynxSubErrorCode.E_SSR_HYDRATE_DOM_DEVIATE_FROM_SSR_RESULT E_SSR_HYDRATE_DOM_DEVIATE_FROM_SSR_RESULT;
  public final int com.lynx.tasm.LynxSubErrorCode.E_LAZY_BUNDLE_LOAD_BAD_RESPONSE E_LAZY_BUNDLE_LOAD_BAD_RESPONSE;
  public final int com.lynx.tasm.LynxSubErrorCode.E_LAZY_BUNDLE_LOAD_EMPTY_FILE E_LAZY_BUNDLE_LOAD_EMPTY_FILE;
  public final int com.lynx.tasm.LynxSubErrorCode.E_LAZY_BUNDLE_LOAD_DECODE_FAILED E_LAZY_BUNDLE_LOAD_DECODE_FAILED;
  public final int com.lynx.tasm.LynxSubErrorCode.E_LAZY_BUNDLE_LOAD_BAD_BUNDLE E_LAZY_BUNDLE_LOAD_BAD_BUNDLE;
  public final int com.lynx.tasm.LynxSubErrorCode.E_WORKLET_MTS_CALL_EXCEPTION E_WORKLET_MTS_CALL_EXCEPTION;
  public final int com.lynx.tasm.LynxSubErrorCode.E_WORKLET_RAF_CALL_EXCEPTION E_WORKLET_RAF_CALL_EXCEPTION;
  public final int com.lynx.tasm.LynxSubErrorCode.E_WORKLET_MODULE_EXCEPTION E_WORKLET_MODULE_EXCEPTION;
  public final int com.lynx.tasm.LynxSubErrorCode.E_MTS_BRIDGE_MODULE_WRONG_PARAM E_MTS_BRIDGE_MODULE_WRONG_PARAM;
  public final int com.lynx.tasm.LynxSubErrorCode.E_COMPONENT_API_DEPRECATED E_COMPONENT_API_DEPRECATED;
  public final int com.lynx.tasm.LynxSubErrorCode.E_COMPONENT_LIST_ILLEGAL_ITEM_KEY E_COMPONENT_LIST_ILLEGAL_ITEM_KEY;
  public final int com.lynx.tasm.LynxSubErrorCode.E_COMPONENT_LIST_DUPLICATED_CELL E_COMPONENT_LIST_DUPLICATED_CELL;
  public final int com.lynx.tasm.LynxSubErrorCode.E_COMPONENT_LIST_CELL_NOT_FOUND E_COMPONENT_LIST_CELL_NOT_FOUND;
  public final int com.lynx.tasm.LynxSubErrorCode.E_COMPONENT_LIST_DYNAMIC_CHANGE_ORIENTATION E_COMPONENT_LIST_DYNAMIC_CHANGE_ORIENTATION;
  public final int com.lynx.tasm.LynxSubErrorCode.E_COMPONENT_LIST_INVALID_PROPS_ARG E_COMPONENT_LIST_INVALID_PROPS_ARG;
  public final int com.lynx.tasm.LynxSubErrorCode.E_COMPONENT_LIST_CHILD_COMPONENT_NOT_EXIST E_COMPONENT_LIST_CHILD_COMPONENT_NOT_EXIST;
  public final int com.lynx.tasm.LynxSubErrorCode.E_COMPONENT_LIST_UNSUPPORTED_THREAD_STRATEGY E_COMPONENT_LIST_UNSUPPORTED_THREAD_STRATEGY;
  public final int com.lynx.tasm.LynxSubErrorCode.E_COMPONENT_LIST_DUPLICATE_ITEM_KEY E_COMPONENT_LIST_DUPLICATE_ITEM_KEY;
  public final int com.lynx.tasm.LynxSubErrorCode.E_COMPONENT_IMAGE_UNSUPPORTED_PROP E_COMPONENT_IMAGE_UNSUPPORTED_PROP;
  public final int com.lynx.tasm.LynxSubErrorCode.E_COMPONENT_CUSTOM E_COMPONENT_CUSTOM;
  public final int com.lynx.tasm.LynxSubErrorCode.E_EXCEPTION_PLATFORM E_EXCEPTION_PLATFORM;
  public final int com.lynx.tasm.LynxSubErrorCode.E_EXCEPTION_JNI E_EXCEPTION_JNI;
}

public class com::lynx::tasm::event::LynxSwiperEvent : com.lynx.tasm.event.LynxDetailEvent {
  public final String com.lynx.tasm.event.LynxSwiperEvent.EVENT_CHANGE EVENT_CHANGE;
  public com.lynx.tasm.event.LynxSwiperEvent.LynxSwiperEvent(int tag, String type);
  public void com.lynx.tasm.event.LynxSwiperEvent.setScrollParmas(int current);
  public static LynxSwiperEvent com.lynx.tasm.event.LynxSwiperEvent.createSwiperEvent(int tag, String type);
}

public enum com::lynx::tasm::service::security::ILynxSecurityService::LynxTasmType {
  public com.lynx.tasm.service.security.ILynxSecurityService.LynxTasmType.TYPE_TEMPLATE TYPE_TEMPLATE;
  public com.lynx.tasm.service.security.ILynxSecurityService.LynxTasmType.TYPE_DYNAMIC_COMPONENT TYPE_DYNAMIC_COMPONENT;
}

public class com::lynx::tasm::LynxTemplateRender : com.lynx.tasm.ILynxEngine, com.lynx.tasm.ILynxErrorReceiver {
  public final String com.lynx.tasm.LynxTemplateRender.RENDER_PHASE_SETUP RENDER_PHASE_SETUP;
  public final String com.lynx.tasm.LynxTemplateRender.RENDER_PHASE_UPDATE RENDER_PHASE_UPDATE;
  public com.lynx.tasm.LynxTemplateRender.LynxTemplateRender(Context context, UIBodyView bodyView, LynxViewBuilder builder);
  public boolean com.lynx.tasm.LynxTemplateRender.enableAirStrictMode();
  public LynxContext com.lynx.tasm.LynxTemplateRender.getLynxContext();
  public PerformanceController com.lynx.tasm.LynxTemplateRender.getPerformanceController();
  public UIGroup< UIBody.UIBodyView > com.lynx.tasm.LynxTemplateRender.getLynxRootUI();
  public LynxDevtool com.lynx.tasm.LynxTemplateRender.getDevTool();
  public void com.lynx.tasm.LynxTemplateRender.onEnterForeground();
  public void com.lynx.tasm.LynxTemplateRender.onEnterBackground();
  public void com.lynx.tasm.LynxTemplateRender.updateScreenMetrics(int width, int height);
  public void com.lynx.tasm.LynxTemplateRender.addLynxViewClient(LynxViewClient client);
  public void com.lynx.tasm.LynxTemplateRender.addLynxViewClientV2(LynxViewClientV2 client);
  public void com.lynx.tasm.LynxTemplateRender.removeLynxViewClient(LynxViewClient client);
  public void com.lynx.tasm.LynxTemplateRender.removeLynxViewClientV2(LynxViewClientV2 client);
  public void com.lynx.tasm.LynxTemplateRender.setExtraTiming(TimingHandler.ExtraTimingInfo extraTiming);
  public void com.lynx.tasm.LynxTemplateRender.setFluencyTracerEnabled(LynxBooleanOption enabled);
  public void com.lynx.tasm.LynxTemplateRender.setLongTaskMonitorEnabled(LynxBooleanOption enabled);
  public void com.lynx.tasm.LynxTemplateRender.putExtraParamsForReportingEvents(final Map< String, Object > params);
  public HashMap< String, Object > com.lynx.tasm.LynxTemplateRender.getAllTimingInfo();
  public String com.lynx.tasm.LynxTemplateRender.getRenderPhase();
  public void com.lynx.tasm.LynxTemplateRender.setImageInterceptor(ImageInterceptor interceptor);
  public void com.lynx.tasm.LynxTemplateRender.setAsyncImageInterceptor(ImageInterceptor interceptor);
  public String com.lynx.tasm.LynxTemplateRender.getPageVersion();
  public void com.lynx.tasm.LynxTemplateRender.pauseRootLayoutAnimation();
  public void com.lynx.tasm.LynxTemplateRender.resumeRootLayoutAnimation();
  public void com.lynx.tasm.LynxTemplateRender.renderTemplateUrl(@NonNull String templateUrl, final TemplateData templateData);
  public void com.lynx.tasm.LynxTemplateRender.renderTemplateUrl(@NonNull String templateUrl, final String jsonData);
  public void com.lynx.tasm.LynxTemplateRender.renderTemplateUrl(@NonNull String templateUrl, final Map< String, Object > data);
  public void com.lynx.tasm.LynxTemplateRender.renderSSRUrl(@NonNull String ssrUrl, final Map< String, Object > injectedData);
  public void com.lynx.tasm.LynxTemplateRender.renderSSRUrl(@NonNull String ssrUrl, final TemplateData templateData);
  public void com.lynx.tasm.LynxTemplateRender.ssrHydrateUrl(@NonNull String hydrateUrl, final Map< String, Object > data);
  public void com.lynx.tasm.LynxTemplateRender.ssrHydrateUrl(@NonNull String hydrateUrl, final TemplateData data);
  public JSModule com.lynx.tasm.LynxTemplateRender.getJSModule(String module);
  public void com.lynx.tasm.LynxTemplateRender.sendGlobalEvent(String name, JavaOnlyArray params);
  public void com.lynx.tasm.LynxTemplateRender.sendGlobalEventToLepus(String name, List< Object > params);
  public void com.lynx.tasm.LynxTemplateRender.triggerEventBus(String name, List< Object > params);
  public void com.lynx.tasm.LynxTemplateRender.updateGlobalProps(TemplateData props);
  public void com.lynx.tasm.LynxTemplateRender.renderTemplateWithBaseUrl(byte[] template, TemplateData templateData, String baseUrl);
  public void com.lynx.tasm.LynxTemplateRender.renderTemplateWithBaseUrl(byte[] template, Map< String, Object > data, String baseUrl);
  public void com.lynx.tasm.LynxTemplateRender.renderTemplateWithBaseUrl(byte[] template, String stringData, String baseUrl);
  public void com.lynx.tasm.LynxTemplateRender.ssrHydrateWithBaseUrl( @NonNull byte[] template, final Map< String, Object > data, @NonNull String hydrateUrl);
  public void com.lynx.tasm.LynxTemplateRender.ssrHydrateWithBaseUrl( @NonNull byte[] template, final TemplateData data, @NonNull String hydrateUrl);
  public void com.lynx.tasm.LynxTemplateRender.renderTemplate(final byte[] template, final Map< String, Object > initData);
  public void com.lynx.tasm.LynxTemplateRender.renderTemplate(final byte[] template, final TemplateData templateData);
  public void com.lynx.tasm.LynxTemplateRender.renderTemplateBundle(final TemplateBundle bundle, final TemplateData templateData, String baseUrl);
  public void com.lynx.tasm.LynxTemplateRender.loadTemplate(final LynxLoadMeta metaData);
  public void com.lynx.tasm.LynxTemplateRender.renderSSR(final byte[] ssr, final String url, final TemplateData templateData);
  public void com.lynx.tasm.LynxTemplateRender.renderSSR(final byte[] ssr, final String url, final Map< String, Object > data);
  public void com.lynx.tasm.LynxTemplateRender.prepareForRenderSSR(final byte[] ssr, final String url);
  public String com.lynx.tasm.LynxTemplateRender.getTemplateUrl();
  public void com.lynx.tasm.LynxTemplateRender.setTheme(LynxTheme theme);
  public void com.lynx.tasm.LynxTemplateRender.setTheme(@NonNull ByteBuffer rawTheme);
  public LynxTheme com.lynx.tasm.LynxTemplateRender.getTheme();
  public void com.lynx.tasm.LynxTemplateRender.updateData(String json, String processorName);
  public void com.lynx.tasm.LynxTemplateRender.updateMetaData(LynxUpdateMeta meta);
  public void com.lynx.tasm.LynxTemplateRender.updateData(TemplateData data);
  public void com.lynx.tasm.LynxTemplateRender.resetData(TemplateData data);
  public void com.lynx.tasm.LynxTemplateRender.reloadTemplate(TemplateData data, TemplateData newGlobalProps);
  public void com.lynx.tasm.LynxTemplateRender.preloadLazyBundles(String[] urls);
  public void com.lynx.tasm.LynxTemplateRender.getCurrentData(LynxGetDataCallback callback);
  public Map< String, Object > com.lynx.tasm.LynxTemplateRender.getPageDataByKey(String[] keys);
  public void com.lynx.tasm.LynxTemplateRender.updateData(Map< String, Object > data, String processorName);
  public void com.lynx.tasm.LynxTemplateRender.onMeasure(int widthMeasureSpec, int heightMeasureSpec);
  public void com.lynx.tasm.LynxTemplateRender.onLayout(boolean changed, int left, int top, int right, int bottom);
  public void com.lynx.tasm.LynxTemplateRender.updateViewport(int widthMeasureSpec, int heightMeasureSpec);
  public void com.lynx.tasm.LynxTemplateRender.updateFontScale(float scale);
  public void com.lynx.tasm.LynxTemplateRender.destroy();
  public final ThreadStrategyForRendering com.lynx.tasm.LynxTemplateRender.getThreadStrategyForRendering();
  public void com.lynx.tasm.LynxTemplateRender.onErrorOccurred(int errCode, String errorMsg);
  public void com.lynx.tasm.LynxTemplateRender.onErrorOccurred(final LynxError error);
  public boolean com.lynx.tasm.LynxTemplateRender.dispatchTouchEvent(MotionEvent ev);
  public boolean com.lynx.tasm.LynxTemplateRender.consumeSlideEvent(MotionEvent ev);
  public boolean com.lynx.tasm.LynxTemplateRender.blockNativeEvent(MotionEvent ev);
  public void com.lynx.tasm.LynxTemplateRender.onInterceptTouchEvent(MotionEvent ev);
  public void com.lynx.tasm.LynxTemplateRender.onTouchEvent(MotionEvent ev);
  public void com.lynx.tasm.LynxTemplateRender.onRootViewDraw(Canvas canvas);
  public void com.lynx.tasm.LynxTemplateRender.onAttachedToWindow();
  public void com.lynx.tasm.LynxTemplateRender.onDetachedFromWindow();
  public View com.lynx.tasm.LynxTemplateRender.findViewByName(String name);
  public LynxBaseUI com.lynx.tasm.LynxTemplateRender.findUIByName(String name);
  public View com.lynx.tasm.LynxTemplateRender.findViewByIdSelector(String id);
  public LynxBaseUI com.lynx.tasm.LynxTemplateRender.findUIByIdSelector(String id);
  public boolean com.lynx.tasm.LynxTemplateRender.attachLynxView(@NonNull final LynxView lynxView);
  public long com.lynx.tasm.LynxTemplateRender.getFirstMeasureTime();
  public LynxBaseUI com.lynx.tasm.LynxTemplateRender.findUIByIndex(int index);
  public void com.lynx.tasm.LynxTemplateRender.onDispatchInputEvent(InputEvent ev);
  public Map< String, Object > com.lynx.tasm.LynxTemplateRender.getAllJsSource();
  public boolean com.lynx.tasm.LynxTemplateRender.enableJSRuntime();
  public void com.lynx.tasm.LynxTemplateRender.syncFlush();
  public void com.lynx.tasm.LynxTemplateRender.runOnTasmThread(Runnable runnable);
  public void com.lynx.tasm.LynxTemplateRender.startLynxRuntime();
  public void com.lynx.tasm.LynxTemplateRender.processLayout(@NonNull String templateUrl, final TemplateData templateData);
  public void com.lynx.tasm.LynxTemplateRender.processLayoutWithSSRUrl(@NonNull String ssrUrl, final TemplateData templateData);
  public void com.lynx.tasm.LynxTemplateRender.processLayoutWithTemplateBundle(final TemplateBundle bundle, final TemplateData templateData, String baseUrl);
  public void com.lynx.tasm.LynxTemplateRender.setEnableUIFlush(boolean enableUIFlush);
  public void com.lynx.tasm.LynxTemplateRender.processRender();
  public void com.lynx.tasm.LynxTemplateRender.setEnableBytecode(boolean enableUserBytecode, String url);
  public void com.lynx.tasm.LynxTemplateRender.setSessionStorageItem(String key, TemplateData data);
  public void com.lynx.tasm.LynxTemplateRender.getSessionStorageItem(String key, PlatformCallBack callback);
  public double com.lynx.tasm.LynxTemplateRender.subscribeSessionStorage(String key, PlatformCallBack callBack);
  public void com.lynx.tasm.LynxTemplateRender.unsubscribeSessionStorage(String key, double id);
  public void com.lynx.tasm.LynxTemplateRender.attachEngineToUIThread();
  public void com.lynx.tasm.LynxTemplateRender.detachEngineFromUIThread();
  public boolean com.lynx.tasm.LynxTemplateRender.registerLazyBundle(String url, TemplateBundle bundle);
  public synchronized void com.lynx.tasm.LynxTemplateRender.updateGlobalPropsInternal(TemplateData globalProps);
  public LynxEngineProxy com.lynx.tasm.LynxTemplateRender.getEngineProxy();
  public void com.lynx.tasm.LynxTemplateRender.sendCustomEvent(@NonNull LynxCustomEvent event);
  public JavaOnlyMap com.lynx.tasm.LynxTemplateRender.getListPlatformInfo(int listSign);
  public void com.lynx.tasm.LynxTemplateRender.renderChild(int listSign, int index, long operationId);
  public void com.lynx.tasm.LynxTemplateRender.updateChild(int listSign, int oldSign, int newIndex, long operationId);
  public void com.lynx.tasm.LynxTemplateRender.removeChild(int listSign, int childSign);
  public int com.lynx.tasm.LynxTemplateRender.obtainChild(int listSign, int index, long operationId, boolean enableReuseNotification);
  public void com.lynx.tasm.LynxTemplateRender.recycleChild(int listSign, int childSign);
  public void com.lynx.tasm.LynxTemplateRender.obtainChildAsync(int listSign, int index, long operationId);
  public void com.lynx.tasm.LynxTemplateRender.recycleChildAsync(int listSign, int childSign);
  public void com.lynx.tasm.LynxTemplateRender.scrollByListContainer(int containerSign, float x, float y, float originalX, float originalY);
  public void com.lynx.tasm.LynxTemplateRender.scrollToPosition(int containerSign, int position, float offset, int align, boolean smooth);
  public void com.lynx.tasm.LynxTemplateRender.scrollStopped(int containerSign);
  public ILynxUIRenderer com.lynx.tasm.LynxTemplateRender.lynxUIRenderer();
  public void com.lynx.tasm.LynxTemplateRender.setAttachLynxPageUICallback(UIBody.UIBodyView.attachLynxPageUICallback callback);
  public void com.lynx.tasm.LynxTemplateRender.addRuntimeLifecycleListener(@NonNull RuntimeLifecycleListener listener);
  public native void com.lynx.tasm.LynxTemplateRender.nativeDetachLynxEngineWrapper(long ptr, long lifecycle);
}

public class abstract com::lynx::tasm::resourceprovider::template::LynxTemplateResourceFetcher :  {
  public abstract void com.lynx.tasm.resourceprovider.template.LynxTemplateResourceFetcher.fetchTemplate(LynxResourceRequest request, LynxResourceCallback< TemplateProviderResult > callback);
  public abstract void com.lynx.tasm.resourceprovider.template.LynxTemplateResourceFetcher.fetchSSRData(LynxResourceRequest request, LynxResourceCallback< byte[]> callback);
}

public class com::lynx::tasm::behavior::shadow::text::LynxTextBackgroundSpan : LineBackgroundSpan {
  public void com.lynx.tasm.behavior.shadow.text.LynxTextBackgroundSpan.drawBackground(@NonNull Canvas canvas, @NonNull Paint paint, int left, int right, int top, int baseline, int bottom, @NonNull CharSequence text, int start, int end, int lineNumber);
  public com.lynx.tasm.behavior.shadow.text.LynxTextBackgroundSpan.LynxTextBackgroundSpan(int spanStart, int spanEnd, LynxBackground background);
  public void com.lynx.tasm.behavior.shadow.text.LynxTextBackgroundSpan.updateSpanPosition(Layout layout);
  public void com.lynx.tasm.behavior.shadow.text.LynxTextBackgroundSpan.updateBackgroundStartEndIndex(int addLength);
  public void com.lynx.tasm.behavior.shadow.text.LynxTextBackgroundSpan.updateBackgroundEndIndex(int endIndex);
}

public class com::lynx::tasm::behavior::shadow::text::LynxTextGradientSpan : MetricAffectingSpan {
  public com.lynx.tasm.behavior.shadow.text.LynxTextGradientSpan.LynxTextGradientSpan(BackgroundGradientLayer gradient);
  public void com.lynx.tasm.behavior.shadow.text.LynxTextGradientSpan.updateBounds(Rect bounds);
  public void com.lynx.tasm.behavior.shadow.text.LynxTextGradientSpan.updateMeasureState(@NonNull TextPaint textPaint);
  public void com.lynx.tasm.behavior.shadow.text.LynxTextGradientSpan.updateDrawState(TextPaint tp);
}

public class com::lynx::jsbridge::LynxTextInfoModule : com.lynx.jsbridge.LynxContextModule {
  public final String com.lynx.jsbridge.LynxTextInfoModule.NAME NAME;
  public com.lynx.jsbridge.LynxTextInfoModule.LynxTextInfoModule(LynxContext context);
  public com.lynx.jsbridge.LynxTextInfoModule.LynxTextInfoModule(LynxContext context, Object param);
}

public class com::lynx::tasm::theme::LynxTheme :  {
  public boolean com.lynx.tasm.theme.LynxTheme.update(String key, String value);
  public String com.lynx.tasm.theme.LynxTheme.get(String key);
  public Set< String > com.lynx.tasm.theme.LynxTheme.keySet();
  public int com.lynx.tasm.theme.LynxTheme.changeCount();
  public com.lynx.tasm.theme.LynxTheme.LynxTheme();
  public boolean com.lynx.tasm.theme.LynxTheme.replaceWithTheme(LynxTheme theme);
  public void com.lynx.tasm.theme.LynxTheme.addToHashMap(HashMap dst, String key);
}

public class com::lynx::tasm::core::LynxThreadPool :  {
  public static Executor com.lynx.tasm.core.LynxThreadPool.getBriefIOExecutor();
  public static Executor com.lynx.tasm.core.LynxThreadPool.getAsyncServiceExecutor();
  public static Future< Runnable > com.lynx.tasm.core.LynxThreadPool.postUIOperationTask(Callable< Runnable > callable);
  public static void com.lynx.tasm.core.LynxThreadPool.postUIOperationTask(Runnable callable);
  public static Executor com.lynx.tasm.core.LynxThreadPool.getImageRequestExecutor();
  public static Executor com.lynx.tasm.core.LynxThreadPool.getSvgRenderExecutor();
  public static Executor com.lynx.tasm.core.LynxThreadPool.getAsyncLepusBridgeExecutor();
}

public class com::lynx::tasm::event::LynxTouchEvent : com.lynx.tasm.event.LynxEvent {
  public final String com.lynx.tasm.event.LynxTouchEvent.EVENT_TOUCH_START EVENT_TOUCH_START;
  public final String com.lynx.tasm.event.LynxTouchEvent.EVENT_TOUCH_MOVE EVENT_TOUCH_MOVE;
  public final String com.lynx.tasm.event.LynxTouchEvent.EVENT_TOUCH_CANCEL EVENT_TOUCH_CANCEL;
  public final String com.lynx.tasm.event.LynxTouchEvent.EVENT_TOUCH_END EVENT_TOUCH_END;
  public final String com.lynx.tasm.event.LynxTouchEvent.EVENT_TAP EVENT_TAP;
  public final String com.lynx.tasm.event.LynxTouchEvent.EVENT_LONG_PRESS EVENT_LONG_PRESS;
  public final String com.lynx.tasm.event.LynxTouchEvent.EVENT_CLICK EVENT_CLICK;
  public final int com.lynx.tasm.event.LynxTouchEvent.kPseudoStateNone kPseudoStateNone;
  public final int com.lynx.tasm.event.LynxTouchEvent.kPseudoStateHover kPseudoStateHover;
  public final int com.lynx.tasm.event.LynxTouchEvent.kPseudoStateHoverTransition kPseudoStateHoverTransition;
  public final int com.lynx.tasm.event.LynxTouchEvent.kPseudoStateActive kPseudoStateActive;
  public final int com.lynx.tasm.event.LynxTouchEvent.kPseudoStateActiveTransition kPseudoStateActiveTransition;
  public final int com.lynx.tasm.event.LynxTouchEvent.kPseudoStateFocus kPseudoStateFocus;
  public final int com.lynx.tasm.event.LynxTouchEvent.kPseudoStateFocusTransition kPseudoStateFocusTransition;
  public final int com.lynx.tasm.event.LynxTouchEvent.kPseudoStateAll kPseudoStateAll;
  public com.lynx.tasm.event.LynxTouchEvent.LynxTouchEvent(int tag, String name);
  public com.lynx.tasm.event.LynxTouchEvent.LynxTouchEvent(int tag, String name, float x, float y);
  public com.lynx.tasm.event.LynxTouchEvent.LynxTouchEvent(int tag, String name, Point clientPoint, Point pagePoint, Point viewPoint);
  public com.lynx.tasm.event.LynxTouchEvent.LynxTouchEvent(int tag, String name, Map< Integer, Point > touchMap);
  public com.lynx.tasm.event.LynxTouchEvent.LynxTouchEvent(String name, JavaOnlyMap uiTouchMap);
  public Point com.lynx.tasm.event.LynxTouchEvent.getClientPoint();
  public Point com.lynx.tasm.event.LynxTouchEvent.getPagePoint();
  public Point com.lynx.tasm.event.LynxTouchEvent.getViewPoint();
  public boolean com.lynx.tasm.event.LynxTouchEvent.getIsMultiTouch();
  public Map< Integer, Point > com.lynx.tasm.event.LynxTouchEvent.getTouchMap();
  public JavaOnlyMap com.lynx.tasm.event.LynxTouchEvent.getUITouchMap();
  public void com.lynx.tasm.event.LynxTouchEvent.setMotionEvent(MotionEvent motionEvent);
  public MotionEvent com.lynx.tasm.event.LynxTouchEvent.getMotionEvent();
  public void com.lynx.tasm.event.LynxTouchEvent.setActiveTargetMap(HashMap< Integer, EventTargetBase > activeTargetMap);
  public HashMap< Integer, EventTargetBase > com.lynx.tasm.event.LynxTouchEvent.getActiveTargetMap();
  public ArrayList< Object > com.lynx.tasm.event.LynxTouchEvent.getEventParams();
}

public class abstract com::lynx::tasm::behavior::ui::LynxUI : com.lynx.tasm.behavior.ui.LynxBaseUI, com.lynx.tasm.behavior.ui.IProcessViewInfoHook {
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.setDrawHead(LynxBaseUI ui);
  public LynxBaseUI com.lynx.tasm.behavior.ui.LynxUI< T extends View >.getDrawHead();
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.insertDrawList(LynxBaseUI pre, LynxBaseUI child);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.onDrawingPositionChanged();
  public com.lynx.tasm.behavior.ui.LynxUI< T extends View >.LynxUI(Context context);
  public com.lynx.tasm.behavior.ui.LynxUI< T extends View >.LynxUI(LynxContext context);
  public com.lynx.tasm.behavior.ui.LynxUI< T extends View >.LynxUI(LynxContext context, Object param);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.initialize();
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.onDetach();
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.onAttach();
  public T com.lynx.tasm.behavior.ui.LynxUI< T extends View >.getView();
  public ViewInfo com.lynx.tasm.behavior.ui.LynxUI< T extends View >.getViewInfo();
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.processViewInfo();
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.dispatchProcessViewInfo();
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.processChildViewInfo(IProcessViewInfoHook child);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.beforeProcessViewInfo(ViewInfo info);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.beforeDispatchProcessViewInfo(ViewInfo info);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.beforeProcessChildViewInfo(ViewInfo info, View child, long drawingTime);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.afterProcessChildViewInfo(ViewInfo info, View child, long drawingTime);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.afterDispatchProcessViewInfo(ViewInfo info);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.afterProcessViewInfo(ViewInfo info);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.processLayoutChildren();
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.processMeasureChildren();
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.setSign(int sign, String tagName);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.setAlpha(float alpha);
  public float com.lynx.tasm.behavior.ui.LynxUI< T extends View >.getTranslationX();
  public float com.lynx.tasm.behavior.ui.LynxUI< T extends View >.getTranslationY();
  public float com.lynx.tasm.behavior.ui.LynxUI< T extends View >.getRealTimeTranslationZ();
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.onFocusChanged(boolean hasFocus, boolean isFocusTransition);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.setVisibility(int visibility);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.setVisibilityForView(int visibility);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.setAnimation(@Nullable ReadableArray animationInfos);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.setAnimation(@NonNull AnimationInfo animation);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.setTransform(@Nullable ReadableArray transform);
  public Matrix com.lynx.tasm.behavior.ui.LynxUI< T extends View >.getTransformMatrix();
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.setTestID(@Nullable String tag);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.setRenderToHardwareTexture(boolean useHWTexture);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.setShareElement(@Nullable final String name);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.setEnterTransitionName(@Nullable ReadableArray name);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.setExitTransitionName(@Nullable ReadableArray name);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.setPauseTransitionName(@Nullable ReadableArray name);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.setResumeTransitionName(@Nullable ReadableArray name);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.setOverlap(@Nullable Dynamic overlap);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.setTransformOrder(@Nullable Dynamic transformOrder);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.setEnableReuseAnimationState(boolean enableReuseAnimationState);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.setAccessibilityElementsHidden(boolean value);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.setAccessibilityValue(String value);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.setAccessibilityHeading(boolean value);
  public boolean com.lynx.tasm.behavior.ui.LynxUI< T extends View >.hasOverlappingRenderingEnabled();
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.takeScreenshot(ReadableMap params, Callback callback);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.requestLayout();
  public KeyframeManager com.lynx.tasm.behavior.ui.LynxUI< T extends View >.getKeyframeManager();
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.invalidate();
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.onLayoutUpdated();
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.measure();
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.updateLayoutParams(ViewGroup.LayoutParams params);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.handleLayout();
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.layout();
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.onAnimationNodeReady();
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.applyOffsetAndRotate(float offsetX, float offsetY, float rotate);
  public int com.lynx.tasm.behavior.ui.LynxUI< T extends View >.getBackgroundColor();
  public BackgroundManager com.lynx.tasm.behavior.ui.LynxUI< T extends View >.getBackgroundManager();
  public ReadableMap com.lynx.tasm.behavior.ui.LynxUI< T extends View >.getKeyframes(String name);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.initTransitionAnimator(ReadableMap map);
  public TransitionAnimationManager com.lynx.tasm.behavior.ui.LynxUI< T extends View >.getTransitionAnimator();
  public LynxUI com.lynx.tasm.behavior.ui.LynxUI< T extends View >.getTransitionUI();
  public boolean com.lynx.tasm.behavior.ui.LynxUI< T extends View >.getVisibility();
  public boolean com.lynx.tasm.behavior.ui.LynxUI< T extends View >.isVisible();
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.setAccessibilityLabel(@Nullable Dynamic value);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.setAccessibilityElement(@Nullable Dynamic value);
  public HeroAnimOwner com.lynx.tasm.behavior.ui.LynxUI< T extends View >.getFakeSharedElementManager();
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.execEnterAnim(HeroTransitionManager.LynxViewEnterFinishListener listener);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.execExitAnim(HeroTransitionManager.LynxViewExitFinishListener listener);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.execPauseAnim();
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.execResumeAnim();
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.setEnterAnim(AnimationInfo enterAnim);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.setExitAnim(AnimationInfo exitAnim);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.setPauseAnim(AnimationInfo pauseAnim);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.setResumeAnim(AnimationInfo resumeAnim);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.onAnimationEnd(String animName);
  public boolean com.lynx.tasm.behavior.ui.LynxUI< T extends View >.enableLayoutAnimation();
  public LayoutAnimationManager com.lynx.tasm.behavior.ui.LynxUI< T extends View >.getLayoutAnimator();
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.setLayoutAnimationCreateDuration(@Nullable double duration);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.setLayoutAnimationCreateProperty(@Nullable int property);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.setLayoutAnimationCreateTimingFunc(@Nullable String timingFunc);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.setLayoutAnimationCreateTimingFunc(@Nullable ReadableArray timingFunc);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.setLayoutAnimationCreateDelay(@Nullable double delay);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.setLayoutAnimationUpdateDuration(@Nullable double duration);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.setLayoutAnimationUpdateProperty(@Nullable int property);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.setLayoutAnimationUpdateTimingFunc(@Nullable ReadableArray timingFunc);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.setLayoutAnimationUpdateDelay(@Nullable double delay);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.setLayoutAnimationDeleteDuration(@Nullable double duration);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.setLayoutAnimationDeleteProperty(@Nullable int property);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.setLayoutAnimationDeleteTimingFunc(@Nullable ReadableArray timingFunc);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.setLayoutAnimationDeleteDelay(@Nullable double delay);
  public boolean com.lynx.tasm.behavior.ui.LynxUI< T extends View >.checkStickyOnParentScroll(int l, int t);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.setFilter(@Nullable ReadableArray filter);
  public boolean com.lynx.tasm.behavior.ui.LynxUI< T extends View >.hasAnimationRunning();
  public boolean com.lynx.tasm.behavior.ui.LynxUI< T extends View >.hasTranslateDiff(@Nullable ReadableArray transform);
  public boolean com.lynx.tasm.behavior.ui.LynxUI< T extends View >.isRtl();
  public boolean com.lynx.tasm.behavior.ui.LynxUI< T extends View >.isUserInteractionEnabled();
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.updatePerspectiveToView();
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.setClipPath(@Nullable ReadableArray basicShape);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.setOffsetPath(@Nullable ReadableArray basicShape);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.setOffsetDistance(float offsetDistance);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.setOffsetRotate(float offsetRotate);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.destroy();
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.onListCellDisAppear(String itemKey, LynxBaseUI list, boolean isExist);
  public void com.lynx.tasm.behavior.ui.LynxUI< T extends View >.onListCellAppear(String itemKey, UIList list);
}

public class com::lynx::tasm::behavior::ui::utils::LynxUIHelper :  {
  public static PointF com.lynx.tasm.behavior.ui.utils.LynxUIHelper.convertPointFromUIToRootUI(final LynxBaseUI descendant, PointF point);
  public static PointF com.lynx.tasm.behavior.ui.utils.LynxUIHelper.convertPointFromUIToScreen(final LynxBaseUI ui, PointF point);
  public static RectF com.lynx.tasm.behavior.ui.utils.LynxUIHelper.convertRectFromUIToRootUI(final LynxBaseUI descendant, RectF rect);
  public static RectF com.lynx.tasm.behavior.ui.utils.LynxUIHelper.convertRectFromUIToAnotherUI(final LynxBaseUI ui, final LynxBaseUI another, RectF rect);
  public static RectF com.lynx.tasm.behavior.ui.utils.LynxUIHelper.convertRectFromUIToScreen(final LynxBaseUI ui, RectF rect);
  public static int com.lynx.tasm.behavior.ui.utils.LynxUIHelper.px2dip(Context context, float pxValue);
  public static LynxBaseUI com.lynx.tasm.behavior.ui.utils.LynxUIHelper.getRelativeUI(final LynxBaseUI ui, String relativeID);
  public static RectF com.lynx.tasm.behavior.ui.utils.LynxUIHelper.getRelativePositionInfo(final LynxBaseUI ui, ReadableMap params);
}

public interface com::lynx::tasm::behavior::LynxUIMethod {
}

public class com::lynx::tasm::behavior::LynxUIMethodConstants :  {
  public final int com.lynx.tasm.behavior.LynxUIMethodConstants.SUCCESS SUCCESS;
  public final int com.lynx.tasm.behavior.LynxUIMethodConstants.UNKNOWN UNKNOWN;
  public final int com.lynx.tasm.behavior.LynxUIMethodConstants.NODE_NOT_FOUND NODE_NOT_FOUND;
  public final int com.lynx.tasm.behavior.LynxUIMethodConstants.METHOD_NOT_FOUND METHOD_NOT_FOUND;
  public final int com.lynx.tasm.behavior.LynxUIMethodConstants.PARAM_INVALID PARAM_INVALID;
  public final int com.lynx.tasm.behavior.LynxUIMethodConstants.SELECTOR_NOT_SUPPORTED SELECTOR_NOT_SUPPORTED;
  public final int com.lynx.tasm.behavior.LynxUIMethodConstants.NO_UI_FOR_NODE NO_UI_FOR_NODE;
  public final int com.lynx.tasm.behavior.LynxUIMethodConstants.INVALID_STATE_ERROR INVALID_STATE_ERROR;
  public final int com.lynx.tasm.behavior.LynxUIMethodConstants.OPERATION_ERROR OPERATION_ERROR;
}

public interface com::lynx::tasm::behavior::utils::LynxUIMethodInvoker {
  public void com.lynx.tasm.behavior.utils.LynxUIMethodInvoker< T extends LynxBaseUI >.invoke(T ui, String methodName, ReadableMap params, Callback callback);
}

public class com::lynx::jsbridge::LynxUIMethodModule : com.lynx.jsbridge.LynxContextModule {
  public final String com.lynx.jsbridge.LynxUIMethodModule.NAME NAME;
  public com.lynx.jsbridge.LynxUIMethodModule.LynxUIMethodModule(LynxContext context);
}

public class com::lynx::tasm::behavior::utils::LynxUIMethodsCache :  {
  public static HashMap< String, Method > com.lynx.tasm.behavior.utils.LynxUIMethodsCache.getNativeMethodsForLynxUIClass(Class<? extends LynxBaseUI > cls);
}

public class com::lynx::tasm::behavior::utils::LynxUIMethodsExecutor :  {
  public static void com.lynx.tasm.behavior.utils.LynxUIMethodsExecutor.invokeMethod(LynxBaseUI ui, String methodName, ReadableMap params, Callback callback);
  public static void com.lynx.tasm.behavior.utils.LynxUIMethodsExecutor.registerMethodInvoker(LynxUIMethodInvoker methodInvoker);
}

public interface com::lynx::tasm::behavior::LynxUIMethodsHolder {
}

public class com::lynx::tasm::behavior::utils::LynxUIMethodsHolderAutoRegister :  {
  public boolean com.lynx.tasm.behavior.utils.LynxUIMethodsHolderAutoRegister.sHasRegistered sHasRegistered;
  public static void com.lynx.tasm.behavior.utils.LynxUIMethodsHolderAutoRegister.registerLynxUIMethodInvoker(LynxUIMethodInvoker methodInvoker);
  public static void com.lynx.tasm.behavior.utils.LynxUIMethodsHolderAutoRegister.init();
}

public class com::lynx::tasm::behavior::LynxUIOwner :  {
  public com.lynx.tasm.behavior.LynxUIOwner.LynxUIOwner(LynxContext context, BehaviorRegistry behaviorRegistry, @Nullable UIBodyView body);
  public void com.lynx.tasm.behavior.LynxUIOwner.attachUIBodyView(@Nullable UIBodyView view);
  public void com.lynx.tasm.behavior.LynxUIOwner.attachLynxContext(LynxContext context);
  public void com.lynx.tasm.behavior.LynxUIOwner.attachNativeFacade(NativeFacade nativeFacade);
  public void com.lynx.tasm.behavior.LynxUIOwner.updateProperties(int tag, boolean tendToFlatten, StylesDiffMap props, @Nullable Map< String, EventsListener > eventsListenerMap, @Nullable Map< Integer, GestureDetector > gestureDetectors);
  public void com.lynx.tasm.behavior.LynxUIOwner.initGestureArenaManager(LynxContext context);
  public void com.lynx.tasm.behavior.LynxUIOwner.updateViewExtraData(int tag, Object extraData);
  public void com.lynx.tasm.behavior.LynxUIOwner.pauseRootLayoutAnimation();
  public void com.lynx.tasm.behavior.LynxUIOwner.resumeRootLayoutAnimation();
  public void com.lynx.tasm.behavior.LynxUIOwner.rebuildViewTree();
  public void com.lynx.tasm.behavior.LynxUIOwner.updateLayout(int tag, int x, int y, int width, int height, int paddingLeft, int paddingTop, int paddingRight, int paddingBottom, int marginLeft, int marginTop, int marginRight, int marginBottom, int borderLeftWidth, int borderTopWidth, int borderRightWidth, int borderBottomWidth, final Rect bound, float[] sticky, float maxHeight, int nodeIndex);
  public void com.lynx.tasm.behavior.LynxUIOwner.setFirstLayout();
  public void com.lynx.tasm.behavior.LynxUIOwner.onNodeReady(int tag);
  public void com.lynx.tasm.behavior.LynxUIOwner.onNodeReload(int tag);
  public void com.lynx.tasm.behavior.LynxUIOwner.onNodeRemoved(int tag);
  public synchronized void com.lynx.tasm.behavior.LynxUIOwner.createViewInternal(int sign, String tagName, @Nullable StylesDiffMap initialProps, @Nullable Map< String, EventsListener > eventsListenerMap, boolean flatten, int nodeIndex, @Nullable Map< Integer, GestureDetector > gestureDetectors);
  public void com.lynx.tasm.behavior.LynxUIOwner.createView(int sign, String tagName, ReadableMap initialProps, ReadableMapBuffer initialStyles, ReadableArray eventListeners, boolean isFlatten, int nodeIndex, ReadableArray gestureDetectors);
  public Runnable com.lynx.tasm.behavior.LynxUIOwner.createViewAsyncRunnable(final int sign, final String tagName, final ReadableMap initialProps, final ReadableMapBuffer initialStyles, final ReadableArray eventListeners, final boolean isFlatten, int nodeIndex, final ReadableArray gestureDetectors);
  public Future< Runnable > com.lynx.tasm.behavior.LynxUIOwner.createViewAsync(final int sign, final String tagName, @Nullable final StylesDiffMap initialProps, @Nullable final Map< String, EventsListener > eventsListenerMap, final boolean flatten, int nodeIndex, @Nullable final Map< Integer, GestureDetector > gestureDetectors);
  public void com.lynx.tasm.behavior.LynxUIOwner.updateFlatten(int tag, boolean flatten);
  public void com.lynx.tasm.behavior.LynxUIOwner.insert(int parentTag, int childTag, int index);
  public void com.lynx.tasm.behavior.LynxUIOwner.remove(int parentTag, int childTag);
  public void com.lynx.tasm.behavior.LynxUIOwner.destroy(int parentTag, int childTag);
  public void com.lynx.tasm.behavior.LynxUIOwner.reuseListNode(int tag, String itemKey);
  public void com.lynx.tasm.behavior.LynxUIOwner.listCellDisappear(int tag, Boolean isExist, String itemKey);
  public void com.lynx.tasm.behavior.LynxUIOwner.listCellAppear(int tag, String itemKey);
  public GestureArenaManager com.lynx.tasm.behavior.LynxUIOwner.getGestureArenaManager();
  public void com.lynx.tasm.behavior.LynxUIOwner.destroy();
  public void com.lynx.tasm.behavior.LynxUIOwner.onTasmFinish(long operationId);
  public void com.lynx.tasm.behavior.LynxUIOwner.onLayoutFinish(int componentID, long operationId);
  public void com.lynx.tasm.behavior.LynxUIOwner.performMeasure();
  public void com.lynx.tasm.behavior.LynxUIOwner.performLayout();
  public void com.lynx.tasm.behavior.LynxUIOwner.setHasTouchPseudo(boolean hasTouchPseudo);
  public boolean com.lynx.tasm.behavior.LynxUIOwner.getHasTouchPseudo();
  public int com.lynx.tasm.behavior.LynxUIOwner.getRootWidth();
  public int com.lynx.tasm.behavior.LynxUIOwner.getRootHeight();
  public UIBody com.lynx.tasm.behavior.LynxUIOwner.getRootUI();
  public LynxBaseUI com.lynx.tasm.behavior.LynxUIOwner.getNode(int sign);
  public LynxBaseUI com.lynx.tasm.behavior.LynxUIOwner.findLynxUIByComponentId(String componentId);
  public LynxBaseUI com.lynx.tasm.behavior.LynxUIOwner.findLynxUIBySign(int sign);
  public LynxBaseUI com.lynx.tasm.behavior.LynxUIOwner.findLynxUIById(String id, LynxBaseUI ui);
  public LynxContext com.lynx.tasm.behavior.LynxUIOwner.getContext();
  public void com.lynx.tasm.behavior.LynxUIOwner.reset();
  public LynxBaseUI com.lynx.tasm.behavior.LynxUIOwner.findLynxUIByName(@NonNull String name);
  public LynxBaseUI com.lynx.tasm.behavior.LynxUIOwner.findLynxUIByIdSelector(@NonNull String id);
  public LynxBaseUI com.lynx.tasm.behavior.LynxUIOwner.findLynxUIByA11yId(@NonNull String a11yIdStr);
  public void com.lynx.tasm.behavior.LynxUIOwner.invokeUIMethod(String componentId, ReadableArray nodes, String method, ReadableMap params, Callback callback);
  public void com.lynx.tasm.behavior.LynxUIOwner.invokeUIMethodForSelectorQuery(int sign, String method, ReadableMap params, Callback callback);
  public LynxBaseUI com.lynx.tasm.behavior.LynxUIOwner.findLynxUIByIndex(@NonNull int index);
  public LynxBaseUI com.lynx.tasm.behavior.LynxUIOwner.findLynxUIByIdSelectorSearchUp(String idSelector, LynxBaseUI ui);
  public LynxBaseUI com.lynx.tasm.behavior.LynxUIOwner.findLynxUIByIdSelector(String idSelector, LynxBaseUI ui);
  public void com.lynx.tasm.behavior.LynxUIOwner.setGestureDetectorState(int sign, int gestureId, int state);
  public void com.lynx.tasm.behavior.LynxUIOwner.consumeGesture(int sign, int gestureId, ReadableMap params);
  public void com.lynx.tasm.behavior.LynxUIOwner.validate(int tag);
  public Set< String > com.lynx.tasm.behavior.LynxUIOwner.getComponentSet();
  public void com.lynx.tasm.behavior.LynxUIOwner.reportStatistic(String componentName);
  public void com.lynx.tasm.behavior.LynxUIOwner.componentStatistic(String componentName);
  public LynxBaseUI com.lynx.tasm.behavior.LynxUIOwner.createUI(String tag, boolean flatten);
  public LynxBaseUI com.lynx.tasm.behavior.LynxUIOwner.findLynxUIByRefId(String refId, LynxBaseUI ui);
  public boolean com.lynx.tasm.behavior.LynxUIOwner.getEnableCreateViewAsync();
  public void com.lynx.tasm.behavior.LynxUIOwner.setContextFree(boolean isContextFree);
  public boolean com.lynx.tasm.behavior.LynxUIOwner.isContextFree();
  public boolean com.lynx.tasm.behavior.LynxUIOwner.behaviorSupportCreateAsync(String tagName);
  public void com.lynx.tasm.behavior.LynxUIOwner.registerBoundingClientRectUI(LynxBaseUI ui);
  public void com.lynx.tasm.behavior.LynxUIOwner.onEnterForeground();
  public void com.lynx.tasm.behavior.LynxUIOwner.onEnterBackground();
  public void com.lynx.tasm.behavior.LynxUIOwner.unregisterForegroundListener(@NonNull ForegroundListener listener);
  public int com.lynx.tasm.behavior.LynxUIOwner.getTagInfo(String tagName);
  public int com.lynx.tasm.behavior.LynxUIOwner.getRootSign();
  public void com.lynx.tasm.behavior.LynxUIOwner.reportCreateAsyncSuccessEvent(int sign, String tagName, boolean isSuccess, int status);
  public void com.lynx.tasm.behavior.LynxUIOwner.reportCreateViewConfig(int sign, String tagName, boolean createAsync);
  public void com.lynx.tasm.behavior.LynxUIOwner.setAttachLynxPageUICallback(UIBodyView.attachLynxPageUICallback callback);
  public float[] com.lynx.tasm.behavior.LynxUIOwner.measureText(int sign, ReadableCompactArrayBuffer valueArray, float width, int widthMode, float height, int heightMode);
  public Object com.lynx.tasm.behavior.LynxUIOwner.takeTextLayout(int sign);
}

public class com::lynx::tasm::behavior::LynxUIRenderer : com.lynx.tasm.behavior.ILynxUIRenderer {
  public static synchronized void com.lynx.tasm.behavior.LynxUIRenderer.startPixelCopyHandlerThreadIfNecessary();
  public void com.lynx.tasm.behavior.LynxUIRenderer.onInitBodyView(UIBodyView bodyView, Context context, LynxGroup group);
  public void com.lynx.tasm.behavior.LynxUIRenderer.onInitLynxTemplateRender(LynxContext lynxContext, BehaviorRegistry behaviorRegistry, @Nullable UIBodyView body, LynxBooleanOption longTaskMonitorEnabled);
  public void com.lynx.tasm.behavior.LynxUIRenderer.attachBodyView(UIBodyView bodyView, LynxContext lynxContext, Context context);
  public void com.lynx.tasm.behavior.LynxUIRenderer.attachNativeFacade(NativeFacade nativeFacade);
  public void com.lynx.tasm.behavior.LynxUIRenderer.onCreateTemplateRenderer(LynxContext context, LynxPageLoadListener pageLoadListener, ThreadStrategyForRendering threadStrategy, BehaviorRegistry behaviorRegistry, LayoutTick layoutTick);
  public long com.lynx.tasm.behavior.LynxUIRenderer.getUIDelegatePtr();
  public DisplayMetrics com.lynx.tasm.behavior.LynxUIRenderer.getScreenMetrics();
  public void com.lynx.tasm.behavior.LynxUIRenderer.onReloadAndInitUIThreadPart();
  public void com.lynx.tasm.behavior.LynxUIRenderer.onReloadAndInitAnyThreadPart();
  public void com.lynx.tasm.behavior.LynxUIRenderer.onPageConfigDecoded(PageConfig config);
  public void com.lynx.tasm.behavior.LynxUIRenderer.onEnterForeground();
  public void com.lynx.tasm.behavior.LynxUIRenderer.onEnterBackground();
  public void com.lynx.tasm.behavior.LynxUIRenderer.onDestroyTemplateRenderer();
  public void com.lynx.tasm.behavior.LynxUIRenderer.onDestroy();
  public LynxUIOwner com.lynx.tasm.behavior.LynxUIRenderer.lynxUIOwner();
  public UIGroup< UIBody.UIBodyView > com.lynx.tasm.behavior.LynxUIRenderer.getLynxRootUI();
  public void com.lynx.tasm.behavior.LynxUIRenderer.pauseRootLayoutAnimation();
  public void com.lynx.tasm.behavior.LynxUIRenderer.resumeRootLayoutAnimation();
  public void com.lynx.tasm.behavior.LynxUIRenderer.onAttach();
  public void com.lynx.tasm.behavior.LynxUIRenderer.onDetach();
  public void com.lynx.tasm.behavior.LynxUIRenderer.onEnterForegroundInternal();
  public void com.lynx.tasm.behavior.LynxUIRenderer.onEnterBackgroundInternal();
  public void com.lynx.tasm.behavior.LynxUIRenderer.setContextFree(boolean isContextFree);
  public void com.lynx.tasm.behavior.LynxUIRenderer.setFirstLayout();
  public LynxBaseUI com.lynx.tasm.behavior.LynxUIRenderer.findLynxUIByName(@NonNull String name);
  public LynxBaseUI com.lynx.tasm.behavior.LynxUIRenderer.findLynxUIByIdSelector(@NonNull String id);
  public LynxBaseUI com.lynx.tasm.behavior.LynxUIRenderer.findLynxUIByIndex(@NonNull int index);
  public boolean com.lynx.tasm.behavior.LynxUIRenderer.onTouchEvent(MotionEvent ev, UIGroup rootUi);
  public void com.lynx.tasm.behavior.LynxUIRenderer.EnsureEventDispatcher();
  public boolean com.lynx.tasm.behavior.LynxUIRenderer.consumeSlideEvent(MotionEvent ev);
  public boolean com.lynx.tasm.behavior.LynxUIRenderer.blockNativeEvent(MotionEvent ev);
  public ThreadStrategyForRendering com.lynx.tasm.behavior.LynxUIRenderer.getSupportedThreadStrategy(ThreadStrategyForRendering threadStrategy);
  public void com.lynx.tasm.behavior.LynxUIRenderer.performInnerMeasure(int widthMeasureSpec, int heightMeasureSpec);
  public void com.lynx.tasm.behavior.LynxUIRenderer.onLayout(boolean changed, int left, int top, int right, int bottom);
  public boolean com.lynx.tasm.behavior.LynxUIRenderer.useInvokeUIMethod();
  public boolean com.lynx.tasm.behavior.LynxUIRenderer.isAccessibilityDisabled();
  public boolean com.lynx.tasm.behavior.LynxUIRenderer.enableTimingCollector();
  public boolean com.lynx.tasm.behavior.LynxUIRenderer.shouldInvokeNativeViewMethod();
  public boolean com.lynx.tasm.behavior.LynxUIRenderer.disableBindDrawChildHook();
  public boolean com.lynx.tasm.behavior.LynxUIRenderer.needHandleDispatchKeyEvent();
  public boolean com.lynx.tasm.behavior.LynxUIRenderer.dispatchKeyEvent(KeyEvent event);
  public void com.lynx.tasm.behavior.LynxUIRenderer.scrollIntoViewFromUI(int nodeId);
  public String com.lynx.tasm.behavior.LynxUIRenderer.getActualScreenshotMode();
  public void com.lynx.tasm.behavior.LynxUIRenderer.takeScreenshot(ScreenshotBitmapHandler handler, String screenShotMode);
  public Bitmap com.lynx.tasm.behavior.LynxUIRenderer.getBitmapOfView();
  public float[] com.lynx.tasm.behavior.LynxUIRenderer.convertPointFromScreenToGivenUI(float x, float y, @NonNull LynxBaseUI ui);
  public int com.lynx.tasm.behavior.LynxUIRenderer.findNodeIdForLocationFromUI(float x, float y, int uiSign, String mode);
  public int com.lynx.tasm.behavior.LynxUIRenderer.getNodeForLocation(float x, float y, String mode);
  public float[] com.lynx.tasm.behavior.LynxUIRenderer.getTransformValue(int sign, float[] padBorderMarginLayout);
}

public class com::lynx::tasm::behavior::LynxUIRendererCreator : com.lynx.tasm.IUIRendererCreator {
  public ILynxUIRenderer com.lynx.tasm.behavior.LynxUIRendererCreator.createLynxUIRender();
}

public interface com::lynx::tasm::behavior::utils::LynxUISetter {
  public void com.lynx.tasm.behavior.utils.LynxUISetter< T extends LynxBaseUI >.setProperty(LynxBaseUI ui, String name, StylesDiffMap props);
}

public class com::lynx::tasm::behavior::shadow::text::LynxUnderlineSpan : UnderlineSpan {
  public boolean com.lynx.tasm.behavior.shadow.text.LynxUnderlineSpan.equals(Object o);
  public int com.lynx.tasm.behavior.shadow.text.LynxUnderlineSpan.hashCode();
}

public class com::lynx::tasm::LynxUpdateMeta :  {
  public TemplateData com.lynx.tasm.LynxUpdateMeta.getUpdatedData();
  public TemplateData com.lynx.tasm.LynxUpdateMeta.getUpdatedGlobalProps();
}

public class com::lynx::tasm::LynxView : com.lynx.tasm.behavior.ui.UIBody.UIBodyView {
  public com.lynx.tasm.LynxView.LynxView(Context context);
  public com.lynx.tasm.LynxView.LynxView(Context context, AttributeSet attrs);
  public com.lynx.tasm.LynxView.LynxView(Context context, LynxViewBuilder builder);
  public com.lynx.tasm.LynxView.LynxView(Context context, @NonNull ILynxEngine templateRender);
  public void com.lynx.tasm.LynxView.initWithLynxViewBuilder(LynxViewBuilder builder);
  public LynxContext com.lynx.tasm.LynxView.getLynxContext();
  public void com.lynx.tasm.LynxView.reloadAndInit();
  public Object com.lynx.tasm.LynxView.getTag();
  public boolean com.lynx.tasm.LynxView.isAccessibilityDisabled();
  public LynxBaseInspectorOwner com.lynx.tasm.LynxView.getBaseInspectorOwner();
  public void com.lynx.tasm.LynxView.setExtraTiming(TimingHandler.ExtraTimingInfo extraTiming);
  public void com.lynx.tasm.LynxView.setLongTaskMonitorEnabled(LynxBooleanOption enabled);
  public void com.lynx.tasm.LynxView.setFluencyTracerEnabled(LynxBooleanOption enabled);
  public void com.lynx.tasm.LynxView.putParamsForReportingEvents(final Map< String, Object > params);
  public String com.lynx.tasm.LynxView.getRenderPhase();
  public HashMap< String, Object > com.lynx.tasm.LynxView.getAllTimingInfo();
  public void com.lynx.tasm.LynxView.setExtraTiming(Map< String, Long > extraTiming);
  public void com.lynx.tasm.LynxView.bindDrawChildHook(IDrawChildHook hook);
  public void com.lynx.tasm.LynxView.onEnterForeground();
  public void com.lynx.tasm.LynxView.onEnterBackground();
  public void com.lynx.tasm.LynxView.addLynxViewClient(LynxViewClient client);
  public void com.lynx.tasm.LynxView.addLynxViewClientV2(LynxViewClientV2 client);
  public void com.lynx.tasm.LynxView.updateScreenMetrics(int width, int height);
  public void com.lynx.tasm.LynxView.removeLynxViewClient(LynxViewClient client);
  public void com.lynx.tasm.LynxView.removeLynxViewClientV2(LynxViewClientV2 client);
  public void com.lynx.tasm.LynxView.setImageInterceptor(ImageInterceptor interceptor);
  public void com.lynx.tasm.LynxView.setAsyncImageInterceptor(ImageInterceptor interceptor);
  public void com.lynx.tasm.LynxView.pauseRootLayoutAnimation();
  public void com.lynx.tasm.LynxView.resumeRootLayoutAnimation();
  public void com.lynx.tasm.LynxView.renderTemplateUrl(@NonNull String templateUrl, final TemplateData templateData);
  public void com.lynx.tasm.LynxView.renderTemplateUrl(@NonNull String templateUrl, final String jsonData);
  public void com.lynx.tasm.LynxView.renderTemplateUrl(@NonNull String templateUrl, final Map< String, Object > data);
  public JSModule com.lynx.tasm.LynxView.getJSModule(String module);
  public void com.lynx.tasm.LynxView.sendGlobalEvent(String name, JavaOnlyArray params);
  public void com.lynx.tasm.LynxView.sendGlobalEventToLepus(String name, List< Object > params);
  public void com.lynx.tasm.LynxView.renderTemplateWithBaseUrl(byte[] template, TemplateData templateData, String baseUrl);
  public void com.lynx.tasm.LynxView.renderTemplateWithBaseUrl(byte[] template, Map< String, Object > data, String baseUrl);
  public void com.lynx.tasm.LynxView.renderTemplateWithBaseUrl(byte[] template, String templateData, String baseUrl);
  public void com.lynx.tasm.LynxView.renderTemplate(byte[] template, Map< String, Object > initData);
  public void com.lynx.tasm.LynxView.renderTemplate(byte[] template, TemplateData templateData);
  public void com.lynx.tasm.LynxView.renderTemplateBundle( @NonNull TemplateBundle bundle, TemplateData templateData, String baseUrl);
  public void com.lynx.tasm.LynxView.loadTemplate(@NonNull LynxLoadMeta meta);
  public void com.lynx.tasm.LynxView.renderSSR( @NonNull byte[] data, @NonNull String ssrUrl, final Map< String, Object > injectedData);
  public void com.lynx.tasm.LynxView.renderSSR( @NonNull byte[] data, @NonNull String ssrUrl, final TemplateData templateData);
  public void com.lynx.tasm.LynxView.renderSSRUrl(@NonNull String ssrUrl, final TemplateData templateData);
  public void com.lynx.tasm.LynxView.renderSSRUrl(@NonNull String ssrUrl, final Map< String, Object > injectedData);
  public void com.lynx.tasm.LynxView.ssrHydrate( @NonNull byte[] template, @NonNull String hydrateUrl, final Map< String, Object > data);
  public void com.lynx.tasm.LynxView.ssrHydrate( @NonNull byte[] template, @NonNull String hydrateUrl, final TemplateData data);
  public void com.lynx.tasm.LynxView.ssrHydrateUrl(@NonNull String hydrateUrl, final Map< String, Object > data);
  public void com.lynx.tasm.LynxView.ssrHydrateUrl(@NonNull String hydrateUrl, final TemplateData data);
  public String com.lynx.tasm.LynxView.getTemplateUrl();
  public void com.lynx.tasm.LynxView.updateData(String json);
  public void com.lynx.tasm.LynxView.updateData(String json, String processorName);
  public void com.lynx.tasm.LynxView.updateData(TemplateData data);
  public void com.lynx.tasm.LynxView.updateMetaData(LynxUpdateMeta meta);
  public void com.lynx.tasm.LynxView.resetData(TemplateData data);
  public void com.lynx.tasm.LynxView.reloadTemplate(TemplateData data);
  public void com.lynx.tasm.LynxView.reloadTemplate(TemplateData data, TemplateData globalProps);
  public boolean com.lynx.tasm.LynxView.registerDynamicComponent(@NonNull String url, @NonNull TemplateBundle bundle);
  public Map< String, Object > com.lynx.tasm.LynxView.getPageDataByKey(String[] keys);
  public void com.lynx.tasm.LynxView.updateGlobalProps(@NonNull Map< String, Object > props);
  public void com.lynx.tasm.LynxView.updateGlobalProps(@NonNull TemplateData props);
  public void com.lynx.tasm.LynxView.updateData(Map< String, Object > data);
  public void com.lynx.tasm.LynxView.updateData(Map< String, Object > data, String processorName);
  public void com.lynx.tasm.LynxView.updateViewport(int widthMeasureSpec, int heightMeasureSpec);
  public void com.lynx.tasm.LynxView.updateFontScale(float scale);
  public void com.lynx.tasm.LynxView.destroy();
  public ThreadStrategyForRendering com.lynx.tasm.LynxView.getThreadStrategyForRendering();
  public boolean com.lynx.tasm.LynxView.dispatchKeyEvent(KeyEvent event);
  public boolean com.lynx.tasm.LynxView.dispatchTouchEvent(MotionEvent ev);
  public boolean com.lynx.tasm.LynxView.onInterceptTouchEvent(MotionEvent ev);
  public boolean com.lynx.tasm.LynxView.onTouchEvent(MotionEvent ev);
  public View com.lynx.tasm.LynxView.findViewByName(String name);
  public LynxBaseUI com.lynx.tasm.LynxView.findUIByName(String name);
  public View com.lynx.tasm.LynxView.findViewByIdSelector(String id);
  public LynxBaseUI com.lynx.tasm.LynxView.findUIByIdSelector(String id);
  public UIGroup< UIBodyView > com.lynx.tasm.LynxView.getLynxUIRoot();
  public void com.lynx.tasm.LynxView.syncFlush();
  public LynxBaseUI com.lynx.tasm.LynxView.findUIByIndex(int index);
  public void com.lynx.tasm.LynxView.setOnClickListener(@Nullable OnClickListener listener);
  public void com.lynx.tasm.LynxView.setVisibility(int visibility);
  public void com.lynx.tasm.LynxView.runOnTasmThread(Runnable runnable);
  public void com.lynx.tasm.LynxView.startLynxRuntime();
  public void com.lynx.tasm.LynxView.setEnableUIFlush(boolean enableUIFlush);
  public void com.lynx.tasm.LynxView.processRender();
  public boolean com.lynx.tasm.LynxView.enableJSRuntime();
  public void com.lynx.tasm.LynxView.triggerEventBus(String name, List< Object > params);
  public boolean com.lynx.tasm.LynxView.enableAirStrictMode();
  public KeyboardEvent com.lynx.tasm.LynxView.getKeyboardEvent();
  public void com.lynx.tasm.LynxView.setEnableUserBytecode(boolean enableUserBytecode, String url);
  public void com.lynx.tasm.LynxView.setSessionStorageItem(String key, TemplateData value);
  public void com.lynx.tasm.LynxView.getSessionStorageItem(String key, PlatformCallBack callback);
  public double com.lynx.tasm.LynxView.subscribeSessionStorage(String key, PlatformCallBack callBack);
  public void com.lynx.tasm.LynxView.unsubscribeSessionStorage(String key, double id);
  public void com.lynx.tasm.LynxView.attachEngineToUIThread();
  public void com.lynx.tasm.LynxView.detachEngineFromUIThread();
  public ILynxUIRenderer com.lynx.tasm.LynxView.lynxUIRenderer();
  public void com.lynx.tasm.LynxView.setTheme(LynxTheme theme);
  public void com.lynx.tasm.LynxView.setTheme(ByteBuffer rawTheme);
  public LynxTheme com.lynx.tasm.LynxView.getTheme();
  public void com.lynx.tasm.LynxView.preloadDynamicComponents(@NonNull String[] urls);
  public String com.lynx.tasm.LynxView.getPageVersion();
  public void com.lynx.tasm.LynxView.getCurrentData(LynxGetDataCallback callback);
  public void com.lynx.tasm.LynxView.setGlobalProps(Map< String, Object > props);
  public void com.lynx.tasm.LynxView.setGlobalProps(TemplateData props);
  public LynxPerfMetric com.lynx.tasm.LynxView.forceGetPerf();
  public long com.lynx.tasm.LynxView.getFirstMeasureTime();
  public void com.lynx.tasm.LynxView.processLayout(@NonNull String templateUrl, final TemplateData templateData);
  public void com.lynx.tasm.LynxView.processLayoutWithSSRUrl(@NonNull String ssrUrl, final TemplateData templateData);
  public void com.lynx.tasm.LynxView.processLayoutWithTemplateBundle( @NonNull final TemplateBundle bundle, final TemplateData templateData, String baseUrl);
  public void com.lynx.tasm.LynxView.updateFontScacle(float scale);
  public LynxConfigInfo com.lynx.tasm.LynxView.getLynxConfigInfo();
  public void com.lynx.tasm.LynxView.setEnableUserCodeCache(boolean enableUserCodeCache, String url);
  public void com.lynx.tasm.LynxView.setAttachLynxPageUICallback(attachLynxPageUICallback callback);
  public void com.lynx.tasm.LynxView.addRuntimeLifecycleListener(@NonNull RuntimeLifecycleListener listener);
  public static LynxViewBuilder com.lynx.tasm.LynxView.builder();
  public static LynxViewBuilder com.lynx.tasm.LynxView.builder(Context context);
}

public class com::lynx::tasm::LynxViewBuilder :  {
  public com.lynx.tasm.LynxViewBuilder.LynxViewBuilder();
  public com.lynx.tasm.LynxViewBuilder.LynxViewBuilder(Context context);
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.setTemplateProvider(@Nullable AbsTemplateProvider provider);
  public ILynxUIRenderer com.lynx.tasm.LynxViewBuilder.createLynxUIRenderer();
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.setUri(@Nullable Uri uri);
  public Uri com.lynx.tasm.LynxViewBuilder.getUri();
  public void com.lynx.tasm.LynxViewBuilder.setCustomBehaviorRegistry(@Nullable BehaviorRegistry registry);
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.setBehaviors(@Nullable List< Behavior > bundle);
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.addBehaviors(@NonNull List< Behavior > bundle);
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.addBehavior(@NonNull Behavior bundle);
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.setUIRendererCreator(@NonNull IUIRendererCreator uiRendererCreator);
  public IUIRendererCreator com.lynx.tasm.LynxViewBuilder.getUIRenderCreator();
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.setUIRunningMode(boolean ui);
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.setPresetMeasuredSpec(int widthMeasureSpec, int heightMeasureSpec);
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.setScreenSize(int width, int height);
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.enableAutoExpose(boolean enableAutoExpose);
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.setEnableUserBytecode(boolean enableUserBytecode);
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.setBytecodeSourceUrl(String url);
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.setEnableUserCodeCache(boolean enableUserBytecode);
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.setCodeCacheSourceUrl(String url);
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.setDensity(float density);
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.setThreadStrategyForRendering(ThreadStrategyForRendering strategy);
  public ThreadStrategyForRendering com.lynx.tasm.LynxViewBuilder.getThreadStrategy();
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.setLynxGroup(@Nullable LynxGroup group);
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.setLynxModuleExtraData(Object data);
  public void com.lynx.tasm.LynxViewBuilder.registerModule(String name, Class<? extends LynxModule > module);
  public void com.lynx.tasm.LynxViewBuilder.registerModule(String name, Class<? extends LynxModule > module, Object param);
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.setEnableLayoutSafepoint(boolean enable);
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.setEnableCreateViewAsync(boolean enable);
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.setEnableAutoConcurrency(boolean enable);
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.setEnableVSyncAlignedMessageLoop(boolean enable);
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.setEnableMultiAsyncThread(boolean enableMultiAsyncThread);
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.setEnableUnifiedPipeline(boolean enableUnifiedPipeline);
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.setEnableSyncFlush(boolean enable);
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.setEnableAsyncHydration(boolean enable);
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.setEnablePendingJsTask(boolean enablePendingJsTask);
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.setEnableJSRuntime(boolean enable);
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.setEnableAirStrictMode(boolean enable);
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.setDynamicComponentFetcher(DynamicComponentFetcher fetcher);
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.setResourceProvider(String key, LynxResourceProvider provider);
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.setForceDarkAllowed(boolean allowed);
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.setResourceFetcher(LynxResourceFetcher resourceFetcher);
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.setFontLoader(LynxFontFaceLoader.Loader fontLoader);
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.setFontScale(float scale);
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.setImageFetcher(LynxImageFetcher imageFetcher);
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.setImageCustomParam(Map< String, String > imageCustomParams);
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.setLynxBackgroundRuntime(LynxBackgroundRuntime runtime);
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.setDebuggable(boolean enable);
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.setEnableRadonCompatible(boolean enableRadonCompatible);
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.setEnableLayoutOnly(boolean enableLayoutOnly);
  public LynxView com.lynx.tasm.LynxViewBuilder.build(@NonNull Context context);
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.registerContextData(String key, Object value);
  public HashMap com.lynx.tasm.LynxViewBuilder.getContextData();
  public Map< String, String > com.lynx.tasm.LynxViewBuilder.getImageCustomParam();
  public Boolean com.lynx.tasm.LynxViewBuilder.enableJSRuntime();
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.setEnablePreUpdateData(boolean enable);
  public void com.lynx.tasm.LynxViewBuilder.setGenericResourceFetcher(@NonNull LynxGenericResourceFetcher fetcher);
  public void com.lynx.tasm.LynxViewBuilder.setMediaResourceFetcher(@NonNull LynxMediaResourceFetcher fetcher);
  public void com.lynx.tasm.LynxViewBuilder.setTemplateResourceFetcher(@NonNull LynxTemplateResourceFetcher fetcher);
  public void com.lynx.tasm.LynxViewBuilder.setEnableGenericResourceFetcher(LynxBooleanOption enabled);
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.setLynxViewConfig(Map< String, String > map);
  public Map< String, String > com.lynx.tasm.LynxViewBuilder.getLynxViewConfig();
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.insertLynxViewConfig(String key, String value);
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.setEmbeddedMode(@EmbeddedMode.Mode int embeddedMode);
  public TemplateBundle com.lynx.tasm.LynxViewBuilder.getTemplateBundle();
  public LynxViewBuilder com.lynx.tasm.LynxViewBuilder.setTemplateBundle(TemplateBundle templateBundle);
  public static void com.lynx.tasm.LynxViewBuilder.setDefaultDensity(Float density);
}

public enum com::lynx::tasm::utils::LynxViewBuilderProperty {
  public com.lynx.tasm.utils.LynxViewBuilderProperty.PLATFORM_CONFIG PLATFORM_CONFIG;
  public com.lynx.tasm.utils.LynxViewBuilderProperty.LynxViewBuilderProperty(String key);
  public String com.lynx.tasm.utils.LynxViewBuilderProperty.getKey();
}

public class abstract com::lynx::tasm::LynxViewClient : com.lynx.tasm.LynxBackgroundRuntimeClient, com.lynx.tasm.behavior.ImageInterceptor {
  public void com.lynx.tasm.LynxViewClient.onModuleMethodInvoked(String module, String method, int error_code);
  public void com.lynx.tasm.LynxViewClient.onPageStart(@Nullable String url);
  public void com.lynx.tasm.LynxViewClient.onLoadSuccess();
  public void com.lynx.tasm.LynxViewClient.onReportLynxConfigInfo(LynxConfigInfo info);
  public void com.lynx.tasm.LynxViewClient.onFirstScreen();
  public void com.lynx.tasm.LynxViewClient.onPageUpdate();
  public void com.lynx.tasm.LynxViewClient.onDataUpdated();
  public void com.lynx.tasm.LynxViewClient.onLoadFailed(String message);
  public void com.lynx.tasm.LynxViewClient.onRuntimeReady();
  public void com.lynx.tasm.LynxViewClient.onReceivedError(String info);
  public void com.lynx.tasm.LynxViewClient.onReceivedError(LynxError error);
  public void com.lynx.tasm.LynxViewClient.onReceivedJavaError(LynxError error);
  public void com.lynx.tasm.LynxViewClient.onReceivedJSError(LynxError jsError);
  public void com.lynx.tasm.LynxViewClient.onReceivedNativeError(LynxError nativeError);
  public void com.lynx.tasm.LynxViewClient.onFirstLoadPerfReady(LynxPerfMetric metric);
  public void com.lynx.tasm.LynxViewClient.onUpdatePerfReady(LynxPerfMetric metric);
  public void com.lynx.tasm.LynxViewClient.onDynamicComponentPerfReady(HashMap< String, Object > perf);
  public void com.lynx.tasm.LynxViewClient.onReportComponentInfo(Set< String > mComponentSet);
  public void com.lynx.tasm.LynxViewClient.onDestroy();
  public void com.lynx.tasm.LynxViewClient.onUpdateDataWithoutChange();
  public void com.lynx.tasm.LynxViewClient.onScrollStart(ScrollInfo info);
  public void com.lynx.tasm.LynxViewClient.onScrollStop(ScrollInfo info);
  public void com.lynx.tasm.LynxViewClient.onFling(ScrollInfo info);
  public void com.lynx.tasm.LynxViewClient.onFlushFinish(FlushInfo flushInfo);
  public void com.lynx.tasm.LynxViewClient.onTASMFinishedByNative();
  public void com.lynx.tasm.LynxViewClient.onPiperInvoked(Map< String, Object > info);
  public void com.lynx.tasm.LynxViewClient.onLynxViewAndJSRuntimeDestroy();
  public void com.lynx.tasm.LynxViewClient.onKeyEvent(KeyEvent event, boolean handled);
  public void com.lynx.tasm.LynxViewClient.onTimingSetup(Map< String, Object > timingInfo);
  public void com.lynx.tasm.LynxViewClient.onTimingUpdate(Map< String, Object > timingInfo, Map< String, Long > updateTiming, String flag);
  public void com.lynx.tasm.LynxViewClient.onJSBInvoked(Map< String, Object > jsbInfo);
  public void com.lynx.tasm.LynxViewClient.onCallJSBFinished(Map< String, Object > jsbTiming);
  public void com.lynx.tasm.LynxViewClient.onLynxEvent(LynxEventDetail detail);
  public String com.lynx.tasm.LynxViewClient.shouldRedirectImageUrl(String url);
  public void com.lynx.tasm.LynxViewClient.loadImage(@NonNull Context context, @Nullable String cacheKey, @Nullable String src, float width, float height, final @Nullable Transformer transformer, @NonNull final CompletionHandler handler);
  public void com.lynx.tasm.LynxViewClient.onTemplateBundleReady(@NonNull TemplateBundle bundle);
}

public class com::lynx::tasm::LynxViewClientGroup : com.lynx.tasm.LynxViewClient {
  public void com.lynx.tasm.LynxViewClientGroup.addClient(LynxViewClient client);
  public void com.lynx.tasm.LynxViewClientGroup.removeClient(LynxViewClient client);
  public void com.lynx.tasm.LynxViewClientGroup.setInstanceId(int id);
  public void com.lynx.tasm.LynxViewClientGroup.onPageStart(String url);
  public void com.lynx.tasm.LynxViewClientGroup.onLoadSuccess();
  public void com.lynx.tasm.LynxViewClientGroup.onLoadFailed(String message);
  public void com.lynx.tasm.LynxViewClientGroup.onFirstScreen();
  public void com.lynx.tasm.LynxViewClientGroup.onPageUpdate();
  public void com.lynx.tasm.LynxViewClientGroup.onDataUpdated();
  public void com.lynx.tasm.LynxViewClientGroup.onTASMFinishedByNative();
  public void com.lynx.tasm.LynxViewClientGroup.onReceivedError(String info);
  public void com.lynx.tasm.LynxViewClientGroup.onReceivedJSError(LynxError jsError);
  public void com.lynx.tasm.LynxViewClientGroup.onReceivedNativeError(LynxError nativeError);
  public void com.lynx.tasm.LynxViewClientGroup.onReceivedError(LynxError error);
  public void com.lynx.tasm.LynxViewClientGroup.onReceivedJavaError(LynxError error);
  public void com.lynx.tasm.LynxViewClientGroup.onRuntimeReady();
  public void com.lynx.tasm.LynxViewClientGroup.onFirstLoadPerfReady(LynxPerfMetric metric);
  public void com.lynx.tasm.LynxViewClientGroup.onUpdatePerfReady(LynxPerfMetric metric);
  public void com.lynx.tasm.LynxViewClientGroup.onDynamicComponentPerfReady(HashMap< String, Object > perf);
  public void com.lynx.tasm.LynxViewClientGroup.onReportComponentInfo(Set< String > mComponentSet);
  public void com.lynx.tasm.LynxViewClientGroup.onDestroy();
  public String com.lynx.tasm.LynxViewClientGroup.shouldRedirectImageUrl(String url);
  public void com.lynx.tasm.LynxViewClientGroup.loadImage(@NonNull Context context, @Nullable String cacheKey, @Nullable String src, float width, float height, final @Nullable Transformer transformer, @NonNull final CompletionHandler handler);
  public void com.lynx.tasm.LynxViewClientGroup.onUpdateDataWithoutChange();
  public void com.lynx.tasm.LynxViewClientGroup.onModuleMethodInvoked(String module, String method, int error_code);
  public void com.lynx.tasm.LynxViewClientGroup.onPiperInvoked(Map< String, Object > info);
  public void com.lynx.tasm.LynxViewClientGroup.onLynxViewAndJSRuntimeDestroy();
  public void com.lynx.tasm.LynxViewClientGroup.onScrollStart(ScrollInfo info);
  public void com.lynx.tasm.LynxViewClientGroup.onScrollStop(ScrollInfo info);
  public void com.lynx.tasm.LynxViewClientGroup.onFling(ScrollInfo info);
  public void com.lynx.tasm.LynxViewClientGroup.onFlushFinish(FlushInfo info);
  public void com.lynx.tasm.LynxViewClientGroup.onKeyEvent(KeyEvent event, boolean handled);
  public void com.lynx.tasm.LynxViewClientGroup.onTimingUpdate(Map< String, Object > timingInfo, Map< String, Long > updateTiming, String flag);
  public void com.lynx.tasm.LynxViewClientGroup.onTimingSetup(Map< String, Object > timingInfo);
  public void com.lynx.tasm.LynxViewClientGroup.onJSBInvoked(Map< String, Object > jsbInfo);
  public void com.lynx.tasm.LynxViewClientGroup.onCallJSBFinished(Map< String, Object > jsbTiming);
  public void com.lynx.tasm.LynxViewClientGroup.onLynxEvent(LynxEventDetail detail);
  public void com.lynx.tasm.LynxViewClientGroup.onTemplateBundleReady(TemplateBundle bundle);
}

public class com::lynx::tasm::LynxViewClientGroupV2 : com.lynx.tasm.LynxViewClientV2 {
  public void com.lynx.tasm.LynxViewClientGroupV2.setInstanceId(int id);
  public void com.lynx.tasm.LynxViewClientGroupV2.addClient(LynxViewClientV2 client);
  public void com.lynx.tasm.LynxViewClientGroupV2.removeClient(LynxViewClientV2 client);
  public void com.lynx.tasm.LynxViewClientGroupV2.onPageStarted(@Nullable LynxView lynxView, @NonNull LynxPipelineInfo info);
  public void com.lynx.tasm.LynxViewClientGroupV2.onPerformanceEvent(@NonNull PerformanceEntry entry);
}

public class com::lynx::tasm::LynxViewClientV2 : com.lynx.tasm.performance.IPerformanceObserver {
  public void com.lynx.tasm.LynxViewClientV2.onPageStarted(@Nullable LynxView lynxView, @NonNull LynxPipelineInfo info);
  public void com.lynx.tasm.LynxViewClientV2.onPerformanceEvent(@NonNull PerformanceEntry entry);
}

public interface com::lynx::tasm::navigator::LynxViewCreationListener {
  public void com.lynx.tasm.navigator.LynxViewCreationListener.onReady(LynxView lynxView);
  public void com.lynx.tasm.navigator.LynxViewCreationListener.onFailed();
}

public interface com::lynx::tasm::behavior::herotransition::HeroTransitionManager::LynxViewEnterFinishListener {
  public void com.lynx.tasm.behavior.herotransition.HeroTransitionManager.LynxViewEnterFinishListener.onLynxViewEntered();
}

public interface com::lynx::tasm::behavior::herotransition::HeroTransitionManager::LynxViewExitFinishListener {
  public void com.lynx.tasm.behavior.herotransition.HeroTransitionManager.LynxViewExitFinishListener.onLynxViewExited();
}

public interface com::lynx::tasm::behavior::ui::LynxViewVisibleHelper {
  public boolean com.lynx.tasm.behavior.ui.LynxViewVisibleHelper.isViewVisible();
}

public interface com::lynx::react::bridge::mapbuffer::MapBuffer {
  public int com.lynx.react.bridge.mapbuffer.MapBuffer.count();
  public boolean com.lynx.react.bridge.mapbuffer.MapBuffer.contains(int key);
  public int com.lynx.react.bridge.mapbuffer.MapBuffer.getKeyOffset(int key);
  public MapBuffer.Entry com.lynx.react.bridge.mapbuffer.MapBuffer.entryAt(int offset);
  public DataType com.lynx.react.bridge.mapbuffer.MapBuffer.getType(int key);
  public boolean com.lynx.react.bridge.mapbuffer.MapBuffer.getBoolean(int key);
  public int com.lynx.react.bridge.mapbuffer.MapBuffer.getInt(int key);
  public long com.lynx.react.bridge.mapbuffer.MapBuffer.getLong(int key);
  public double com.lynx.react.bridge.mapbuffer.MapBuffer.getDouble(int key);
  public String com.lynx.react.bridge.mapbuffer.MapBuffer.getString(int key);
  public MapBuffer com.lynx.react.bridge.mapbuffer.MapBuffer.getMapBuffer(int key);
  public List< MapBuffer > com.lynx.react.bridge.mapbuffer.MapBuffer.getMapBufferList(int key);
}

public class com::lynx::react::bridge::mapbuffer::MapBufferUtils :  {
  public static ReadableMap com.lynx.react.bridge.mapbuffer.MapBufferUtils.convertStyleMapBufferToReadableMap(ReadableMapBuffer mapBuffer);
}

public class com::lynx::tasm::behavior::ui::utils::MaskDrawable : com.lynx.tasm.behavior.ui.utils.LayerDrawable< MaskLayerManager > {
  public com.lynx.tasm.behavior.ui.utils.MaskDrawable.MaskDrawable(LynxContext lynxContext, float curFontSize);
  public void com.lynx.tasm.behavior.ui.utils.MaskDrawable.draw(Canvas canvas);
  public void com.lynx.tasm.behavior.ui.utils.MaskDrawable.drawMask(Canvas canvas);
  public void com.lynx.tasm.behavior.ui.utils.MaskDrawable.setAlpha(int alpha);
  public int com.lynx.tasm.behavior.ui.utils.MaskDrawable.getAlpha();
  public void com.lynx.tasm.behavior.ui.utils.MaskDrawable.setColorFilter(ColorFilter cf);
  public int com.lynx.tasm.behavior.ui.utils.MaskDrawable.getOpacity();
}

public class com::lynx::tasm::image::attr::MaskImage : Cloneable {
  public com.lynx.tasm.image.attr.MaskImage.MaskImage(BackgroundGradientLayer gradientLayer);
  public BackgroundGradientLayer com.lynx.tasm.image.attr.MaskImage.getGradientLayer();
}

public class com::lynx::tasm::behavior::ui::background::MaskLayerManager : com.lynx.tasm.behavior.ui.background.LayerManager {
  public com.lynx.tasm.behavior.ui.background.MaskLayerManager.MaskLayerManager(LynxContext context, Drawable drawable, float curFontSize);
  public void com.lynx.tasm.behavior.ui.background.MaskLayerManager.draw(Canvas canvas, RectF borderRect, RectF paddingRect, RectF contentRect, RectF clipBox, Path outerDrawPath, Path innerDrawPath, boolean hasBorder);
  public void com.lynx.tasm.behavior.ui.background.MaskLayerManager.setLayerImage(ReadableArray bgImage, LynxBaseUI ui);
}

public class com::lynx::tasm::utils::MatrixMathUtils::MatrixDecompositionContext :  {
  public double [] com.lynx.tasm.utils.MatrixMathUtils.MatrixDecompositionContext.perspective perspective;
  public double [] com.lynx.tasm.utils.MatrixMathUtils.MatrixDecompositionContext.scale scale;
  public double [] com.lynx.tasm.utils.MatrixMathUtils.MatrixDecompositionContext.skew skew;
  public double [] com.lynx.tasm.utils.MatrixMathUtils.MatrixDecompositionContext.translation translation;
  public double [] com.lynx.tasm.utils.MatrixMathUtils.MatrixDecompositionContext.rotationDegrees rotationDegrees;
  public void com.lynx.tasm.utils.MatrixMathUtils.MatrixDecompositionContext.reset();
  public float com.lynx.tasm.utils.MatrixMathUtils.MatrixDecompositionContext.getTranslationX();
  public float com.lynx.tasm.utils.MatrixMathUtils.MatrixDecompositionContext.getTranslationY();
  public float com.lynx.tasm.utils.MatrixMathUtils.MatrixDecompositionContext.getTranslationZ();
  public float com.lynx.tasm.utils.MatrixMathUtils.MatrixDecompositionContext.getRotationX();
  public float com.lynx.tasm.utils.MatrixMathUtils.MatrixDecompositionContext.getRotationY();
  public float com.lynx.tasm.utils.MatrixMathUtils.MatrixDecompositionContext.getRotation();
  public float com.lynx.tasm.utils.MatrixMathUtils.MatrixDecompositionContext.getScaleX();
  public float com.lynx.tasm.utils.MatrixMathUtils.MatrixDecompositionContext.getScaleY();
  public float com.lynx.tasm.utils.MatrixMathUtils.MatrixDecompositionContext.getSkewX();
  public float com.lynx.tasm.utils.MatrixMathUtils.MatrixDecompositionContext.getSkewY();
}

public class com::lynx::tasm::utils::MatrixMathUtils :  {
  public static void com.lynx.tasm.utils.MatrixMathUtils.decomposeMatrix(double[] transformMatrix, MatrixDecompositionContext ctx);
  public static double com.lynx.tasm.utils.MatrixMathUtils.degreesToRadians(double degrees);
}

public class com::lynx::tasm::behavior::shadow::MeasureContext :  {
}

public interface com::lynx::tasm::behavior::shadow::MeasureFunc {
  public long com.lynx.tasm.behavior.shadow.MeasureFunc.measure(LayoutNode node, float width, MeasureMode widthMode, float height, MeasureMode heightMode);
}

public interface com::lynx::tasm::behavior::ui::list::ListViewHolder::MeasureListener {
  public void com.lynx.tasm.behavior.ui.list.ListViewHolder.MeasureListener.onMeasureCompleted(String itemKey, int width, int height);
}

public enum com::lynx::tasm::behavior::shadow::MeasureMode {
  public com.lynx.tasm.behavior.shadow.MeasureMode.UNDEFINED UNDEFINED;
  public com.lynx.tasm.behavior.shadow.MeasureMode.EXACTLY EXACTLY;
  public com.lynx.tasm.behavior.shadow.MeasureMode.AT_MOST AT_MOST;
  public com.lynx.tasm.behavior.shadow.MeasureMode.MeasureMode(int intValue);
  public int com.lynx.tasm.behavior.shadow.MeasureMode.intValue();
  public static MeasureMode com.lynx.tasm.behavior.shadow.MeasureMode.fromInt(int value);
  public static int com.lynx.tasm.behavior.shadow.MeasureMode.fromMeasureSpec(int measureSpec);
}

public class com::lynx::tasm::behavior::shadow::MeasureOutput :  {
  public static long com.lynx.tasm.behavior.shadow.MeasureOutput.make(float width, float height);
  public static long com.lynx.tasm.behavior.shadow.MeasureOutput.make(int width, int height);
  public static float com.lynx.tasm.behavior.shadow.MeasureOutput.getWidth(long measureOutput);
  public static float com.lynx.tasm.behavior.shadow.MeasureOutput.getHeight(long measureOutput);
}

public class com::lynx::tasm::behavior::shadow::MeasureParam :  {
  public float com.lynx.tasm.behavior.shadow.MeasureParam.mWidth mWidth;
  public MeasureMode com.lynx.tasm.behavior.shadow.MeasureParam.mWidthMode mWidthMode;
  public float com.lynx.tasm.behavior.shadow.MeasureParam.mHeight mHeight;
  public MeasureMode com.lynx.tasm.behavior.shadow.MeasureParam.mHeightMode mHeightMode;
  public com.lynx.tasm.behavior.shadow.MeasureParam.MeasureParam();
  public void com.lynx.tasm.behavior.shadow.MeasureParam.updateConstraints(float width, MeasureMode widthMode, float height, MeasureMode heightMode);
}

public class com::lynx::tasm::behavior::shadow::MeasureResult :  {
  public com.lynx.tasm.behavior.shadow.MeasureResult.MeasureResult(float widthResult, float heightResult);
  public com.lynx.tasm.behavior.shadow.MeasureResult.MeasureResult(float widthResult, float heightResult, float baselineResult);
  public float com.lynx.tasm.behavior.shadow.MeasureResult.getWidthResult();
  public float com.lynx.tasm.behavior.shadow.MeasureResult.getHeightResult();
  public float com.lynx.tasm.behavior.shadow.MeasureResult.getBaselineResult();
}

public class com::lynx::tasm::behavior::shadow::MeasureUtils :  {
  public final float com.lynx.tasm.behavior.shadow.MeasureUtils.UNDEFINED UNDEFINED;
  public static boolean com.lynx.tasm.behavior.shadow.MeasureUtils.isUndefined(float value);
}

public class com::lynx::devtoolwrapper::MemoryListener :  {
  public static MemoryListener com.lynx.devtoolwrapper.MemoryListener.getInstance();
  public void com.lynx.devtoolwrapper.MemoryListener.uploadImageInfo(JSONObject data);
  public void com.lynx.devtoolwrapper.MemoryListener.addMemoryReporter(MemoryReporter reporter);
  public void com.lynx.devtoolwrapper.MemoryListener.removeMemoryReporter(MemoryReporter reporter);
  public boolean com.lynx.devtoolwrapper.MemoryListener.hasAvailableReporter();
}

public class com::lynx::tasm::performance::memory::MemoryRecord :  {
  public com.lynx.tasm.performance.memory.MemoryRecord.MemoryRecord(String category, float sizeKb, Map< String, String > detail);
  public String com.lynx.tasm.performance.memory.MemoryRecord.getCategory();
  public float com.lynx.tasm.performance.memory.MemoryRecord.getSizeKb();
  public Map< String, String > com.lynx.tasm.performance.memory.MemoryRecord.getDetails();
}

public interface com::lynx::devtoolwrapper::MemoryListener::MemoryReporter {
  public void com.lynx.devtoolwrapper.MemoryListener.MemoryReporter.uploadImageInfo(JSONObject data);
}

public class com::lynx::tasm::performance::performanceobserver::MemoryUsageEntry : com.lynx.tasm.performance.performanceobserver.PerformanceEntry {
  public double com.lynx.tasm.performance.performanceobserver.MemoryUsageEntry.sizeKb sizeKb;
  public HashMap<String, MemoryUsageItem> com.lynx.tasm.performance.performanceobserver.MemoryUsageEntry.detail detail;
  public com.lynx.tasm.performance.performanceobserver.MemoryUsageEntry.MemoryUsageEntry(HashMap< String, Object > props);
}

public class com::lynx::tasm::performance::performanceobserver::MemoryUsageItem :  {
  public String com.lynx.tasm.performance.performanceobserver.MemoryUsageItem.category category;
  public double com.lynx.tasm.performance.performanceobserver.MemoryUsageItem.sizeKb sizeKb;
  public HashMap<String, String> com.lynx.tasm.performance.performanceobserver.MemoryUsageItem.detail detail;
  public com.lynx.tasm.performance.performanceobserver.MemoryUsageItem.MemoryUsageItem(HashMap< String, Object > props);
}

public interface com::lynx::tasm::common::MessageCodec {
  public ByteBuffer com.lynx.tasm.common.MessageCodec.encodeMessage(@NonNull Object message);
  public Object com.lynx.tasm.common.MessageCodec.decodeMessage(@NonNull ByteBuffer message);
}

public interface com::lynx::devtoolwrapper::MessageHandler {
  public void com.lynx.devtoolwrapper.MessageHandler.onMessage(String message);
}

public class com::lynx::jsbridge::MethodDescriptor :  {
  public String com.lynx.jsbridge.MethodDescriptor.getName();
  public String com.lynx.jsbridge.MethodDescriptor.getSignature();
  public Method com.lynx.jsbridge.MethodDescriptor.getMethod();
}

public class com::lynx::tasm::performance::performanceobserver::MetricActualFmpEntry : com.lynx.tasm.performance.performanceobserver.PerformanceEntry {
  public PerformanceMetric com.lynx.tasm.performance.performanceobserver.MetricActualFmpEntry.actualFmp actualFmp;
  public PerformanceMetric com.lynx.tasm.performance.performanceobserver.MetricActualFmpEntry.lynxActualFmp lynxActualFmp;
  public PerformanceMetric com.lynx.tasm.performance.performanceobserver.MetricActualFmpEntry.totalActualFmp totalActualFmp;
  public com.lynx.tasm.performance.performanceobserver.MetricActualFmpEntry.MetricActualFmpEntry(HashMap< String, Object > props);
}

public class com::lynx::tasm::performance::performanceobserver::MetricFcpEntry : com.lynx.tasm.performance.performanceobserver.PerformanceEntry {
  public PerformanceMetric com.lynx.tasm.performance.performanceobserver.MetricFcpEntry.fcp fcp;
  public PerformanceMetric com.lynx.tasm.performance.performanceobserver.MetricFcpEntry.lynxFcp lynxFcp;
  public PerformanceMetric com.lynx.tasm.performance.performanceobserver.MetricFcpEntry.totalFcp totalFcp;
  public com.lynx.tasm.performance.performanceobserver.MetricFcpEntry.MetricFcpEntry(HashMap< String, Object > props);
}

public interface com::lynx::tasm::EmbeddedMode::Mode {
}

public class com::lynx::tasm::behavior::ui::swiper::ModeCarryTransformer : com.lynx.tasm.behavior.ui.swiper.ViewPager.PageTransformer {
  public void com.lynx.tasm.behavior.ui.swiper.ModeCarryTransformer.transformPage(ViewPager viewPager, View page, boolean isVertical, int offset);
  public void com.lynx.tasm.behavior.ui.swiper.ModeCarryTransformer.reset(View page);
  public void com.lynx.tasm.behavior.ui.swiper.ModeCarryTransformer.setNormTranslationFactor(float normTranslationFactor);
  public void com.lynx.tasm.behavior.ui.swiper.ModeCarryTransformer.setMinScaleX(float minScaleX);
  public void com.lynx.tasm.behavior.ui.swiper.ModeCarryTransformer.setMaxScaleX(float maxScaleX);
  public void com.lynx.tasm.behavior.ui.swiper.ModeCarryTransformer.setMinScaleY(float minScaleY);
  public void com.lynx.tasm.behavior.ui.swiper.ModeCarryTransformer.setMaxScaleY(float maxScaleY);
}

public class com::lynx::tasm::behavior::ui::swiper::ModeCoverFlowTransformer : com.lynx.tasm.behavior.ui.swiper.ViewPager.PageTransformer {
  public void com.lynx.tasm.behavior.ui.swiper.ModeCoverFlowTransformer.transformPage(ViewPager viewPager, View page, boolean isVertical, int offset);
  public void com.lynx.tasm.behavior.ui.swiper.ModeCoverFlowTransformer.reset(View page);
}

public interface com::lynx::react::bridge::NativeArrayInterface {
  public String com.lynx.react.bridge.NativeArrayInterface.toString();
}

public class com::lynx::tasm::NativeFacade : com.lynx.tasm.EventEmitter.LynxEventReporter {
  public com.lynx.tasm.NativeFacade.NativeFacade(boolean enableJSRuntime);
  public void com.lynx.tasm.NativeFacade.setCallback(Callback callback);
  public void com.lynx.tasm.NativeFacade.setTemplateLoadClient(LynxViewClient client);
  public void com.lynx.tasm.NativeFacade.setUrl(String url);
  public void com.lynx.tasm.NativeFacade.setJSProxy(JSProxy jsProxy);
  public void com.lynx.tasm.NativeFacade.setSize(int size);
  public void com.lynx.tasm.NativeFacade.setEngineProxy(LynxEngineProxy engineProxy);
  public void com.lynx.tasm.NativeFacade.setLynxContext(LynxContext context);
  public WeakReference< LynxContext > com.lynx.tasm.NativeFacade.getLynxContext();
  public boolean com.lynx.tasm.NativeFacade.getEnableJSRuntime();
  public void com.lynx.tasm.NativeFacade.setModuleFactory(LynxModuleFactory moduleFactory);
  public LynxModuleFactory com.lynx.tasm.NativeFacade.getModuleFactory();
  public boolean com.lynx.tasm.NativeFacade.onLynxEvent(LynxEvent event);
  public void com.lynx.tasm.NativeFacade.onInternalEvent(@NonNull LynxInternalEvent event);
  public String com.lynx.tasm.NativeFacade.translateResourceForTheme(final String resId, final String themedKey);
  public void com.lynx.tasm.NativeFacade.destroyAnyThreadPart();
  public void com.lynx.tasm.NativeFacade.destroyUiThreadPart();
  public void com.lynx.tasm.NativeFacade.reportError(LynxError error);
  public void com.lynx.tasm.NativeFacade.onPageConfigDecoded(ReadableMap map);
  public ByteBuffer com.lynx.tasm.NativeFacade.triggerLepusBridge(String methodName, Object args);
  public void com.lynx.tasm.NativeFacade.triggerLepusBridgeAsync(String methodName, Object args);
  public void com.lynx.tasm.NativeFacade.getI18nResourceByNative(final String channelOrUrl, String fallbackUrl);
  public int com.lynx.tasm.NativeFacade.getInstanceId();
  public void com.lynx.tasm.NativeFacade.clearNativePipelineTimingInfo();
}

public class com::lynx::tasm::gesture::handler::NativeGestureHandler : com.lynx.tasm.gesture.handler.PanGestureHandler {
  public com.lynx.tasm.gesture.handler.NativeGestureHandler.NativeGestureHandler(int sign, LynxContext lynxContext, @NonNull GestureDetector gestureDetector, GestureArenaMember gestureArenaMember);
}

public class com::lynx::tasm::behavior::shadow::NativeLayoutNodeRef : com.lynx.tasm.behavior.shadow.ShadowNode {
  public com.lynx.tasm.behavior.shadow.NativeLayoutNodeRef.NativeLayoutNodeRef();
  public void com.lynx.tasm.behavior.shadow.NativeLayoutNodeRef.updateNativeNodeIndex(int moveOffset);
  public void com.lynx.tasm.behavior.shadow.NativeLayoutNodeRef.resetNativeNodeIndex();
  public int com.lynx.tasm.behavior.shadow.NativeLayoutNodeRef.getSpanStart();
  public int com.lynx.tasm.behavior.shadow.NativeLayoutNodeRef.getSpanEnd();
  public void com.lynx.tasm.behavior.shadow.NativeLayoutNodeRef.setVerticalAlign(@Nullable ReadableArray array);
  public void com.lynx.tasm.behavior.shadow.NativeLayoutNodeRef.setIdSelector(String id);
  public String com.lynx.tasm.behavior.shadow.NativeLayoutNodeRef.getIdSelector();
  public void com.lynx.tasm.behavior.shadow.NativeLayoutNodeRef.setContext(LynxContext context);
  public boolean com.lynx.tasm.behavior.shadow.NativeLayoutNodeRef.needGenerateEventTargetSpan();
  public EventTargetSpan com.lynx.tasm.behavior.shadow.NativeLayoutNodeRef.toEventTargetSpan();
  public NativeLayoutNodeSpan com.lynx.tasm.behavior.shadow.NativeLayoutNodeRef.generateStyleSpan(int start, int end, List< BaseTextShadowNode.SetSpanOperation > ops);
  public MeasureResult com.lynx.tasm.behavior.shadow.NativeLayoutNodeRef.measureNativeNode(MeasureContext context, MeasureParam param);
  public MeasureResult com.lynx.tasm.behavior.shadow.NativeLayoutNodeRef.measureNativeNodeWithBaseline(MeasureContext context, MeasureParam param);
  public void com.lynx.tasm.behavior.shadow.NativeLayoutNodeRef.alignNativeNode(AlignContext context, AlignParam param);
  public boolean com.lynx.tasm.behavior.shadow.NativeLayoutNodeRef.supportInlineView();
}

public class com::lynx::tasm::behavior::shadow::text::NativeLayoutNodeSpan : com.lynx.tasm.behavior.shadow.text.AbsBaselineShiftCalculatorSpan {
  public com.lynx.tasm.behavior.shadow.text.NativeLayoutNodeSpan.NativeLayoutNodeSpan();
  public int com.lynx.tasm.behavior.shadow.text.NativeLayoutNodeSpan.getWidth();
  public void com.lynx.tasm.behavior.shadow.text.NativeLayoutNodeSpan.updateLayoutNodeSize(int width, int height, int baseline);
  public int com.lynx.tasm.behavior.shadow.text.NativeLayoutNodeSpan.getSize(Paint paint, CharSequence text, int start, int end, Paint.FontMetricsInt fm);
  public void com.lynx.tasm.behavior.shadow.text.NativeLayoutNodeSpan.draw(Canvas canvas, CharSequence text, int start, int end, float x, int top, int y, int bottom, Paint paint);
  public int com.lynx.tasm.behavior.shadow.text.NativeLayoutNodeSpan.getYOffset(int top, int bottom, int ascent, int descent);
}

public class com::lynx::tasm::navigator::NavigationModule : com.lynx.jsbridge.LynxModule {
  public String com.lynx.tasm.navigator.NavigationModule.NAME NAME;
  public com.lynx.tasm.navigator.NavigationModule.NavigationModule(Context context);
  public com.lynx.tasm.navigator.NavigationModule.NavigationModule(Context context, Object param);
  public void com.lynx.tasm.navigator.NavigationModule.registerRoute(final ReadableMap map);
  public void com.lynx.tasm.navigator.NavigationModule.navigateTo(final String url, final ReadableMap param);
  public void com.lynx.tasm.navigator.NavigationModule.replace(final String url, final ReadableMap param);
  public void com.lynx.tasm.navigator.NavigationModule.goBack();
  public String com.lynx.tasm.navigator.NavigationModule.getString();
}

public class com::lynx::tasm::behavior::ui::scroll::NestedHorizontalScrollView : HorizontalScrollView, NestedScrollingParent2, NestedScrollingChild2 {
  public final boolean com.lynx.tasm.behavior.ui.scroll.NestedHorizontalScrollView.DEBUG_GESTURE DEBUG_GESTURE;
  public com.lynx.tasm.behavior.ui.scroll.NestedHorizontalScrollView.NestedHorizontalScrollView(Context context, UIScrollView uiScrollView);
  public boolean com.lynx.tasm.behavior.ui.scroll.NestedHorizontalScrollView.onInterceptTouchEvent(MotionEvent ev);
  public boolean com.lynx.tasm.behavior.ui.scroll.NestedHorizontalScrollView.onTouchEvent(MotionEvent ev);
  public void com.lynx.tasm.behavior.ui.scroll.NestedHorizontalScrollView.fling(int velocityX);
  public void com.lynx.tasm.behavior.ui.scroll.NestedHorizontalScrollView.computeScroll();
  public void com.lynx.tasm.behavior.ui.scroll.NestedHorizontalScrollView.setEnableNewNested(boolean value);
  public void com.lynx.tasm.behavior.ui.scroll.NestedHorizontalScrollView.setEnableNewBounce(boolean value);
  public void com.lynx.tasm.behavior.ui.scroll.NestedHorizontalScrollView.setBounceScrollRange(int scrollRange, int bounceScrollRange);
  public void com.lynx.tasm.behavior.ui.scroll.NestedHorizontalScrollView.setNestedScrollingEnabled(boolean enabled);
  public boolean com.lynx.tasm.behavior.ui.scroll.NestedHorizontalScrollView.isNestedScrollingEnabled();
  public boolean com.lynx.tasm.behavior.ui.scroll.NestedHorizontalScrollView.hasNestedScrollingParent(int type);
  public boolean com.lynx.tasm.behavior.ui.scroll.NestedHorizontalScrollView.hasNestedScrollingParent();
  public boolean com.lynx.tasm.behavior.ui.scroll.NestedHorizontalScrollView.startNestedScroll(int axes, int type);
  public boolean com.lynx.tasm.behavior.ui.scroll.NestedHorizontalScrollView.startNestedScroll(int axes);
  public void com.lynx.tasm.behavior.ui.scroll.NestedHorizontalScrollView.stopNestedScroll(int type);
  public void com.lynx.tasm.behavior.ui.scroll.NestedHorizontalScrollView.stopNestedScroll();
  public boolean com.lynx.tasm.behavior.ui.scroll.NestedHorizontalScrollView.dispatchNestedScroll(int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int[] offsetInWindow, int type);
  public boolean com.lynx.tasm.behavior.ui.scroll.NestedHorizontalScrollView.dispatchNestedScroll(int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int[] offsetInWindow);
  public boolean com.lynx.tasm.behavior.ui.scroll.NestedHorizontalScrollView.dispatchNestedPreScroll(int dx, int dy, int[] consumed, int[] offsetInWindow, int type);
  public boolean com.lynx.tasm.behavior.ui.scroll.NestedHorizontalScrollView.dispatchNestedPreScroll(int dx, int dy, int[] consumed, int[] offsetInWindow);
  public boolean com.lynx.tasm.behavior.ui.scroll.NestedHorizontalScrollView.dispatchNestedFling(float velocityX, float velocityY, boolean consumed);
  public boolean com.lynx.tasm.behavior.ui.scroll.NestedHorizontalScrollView.dispatchNestedPreFling(float velocityX, float velocityY);
  public boolean com.lynx.tasm.behavior.ui.scroll.NestedHorizontalScrollView.onStartNestedScroll(View child, View target, int nestedScrollAxes, int type);
  public boolean com.lynx.tasm.behavior.ui.scroll.NestedHorizontalScrollView.onStartNestedScroll(View child, View target, int nestedScrollAxes);
  public void com.lynx.tasm.behavior.ui.scroll.NestedHorizontalScrollView.onNestedScrollAccepted(View child, View target, int nestedScrollAxes, int type);
  public void com.lynx.tasm.behavior.ui.scroll.NestedHorizontalScrollView.onNestedScrollAccepted(View child, View target, int nestedScrollAxes);
  public void com.lynx.tasm.behavior.ui.scroll.NestedHorizontalScrollView.onStopNestedScroll(View target, int type);
  public void com.lynx.tasm.behavior.ui.scroll.NestedHorizontalScrollView.onStopNestedScroll(View target);
  public void com.lynx.tasm.behavior.ui.scroll.NestedHorizontalScrollView.onNestedScroll(View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int type);
  public void com.lynx.tasm.behavior.ui.scroll.NestedHorizontalScrollView.onNestedScroll(View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed);
  public void com.lynx.tasm.behavior.ui.scroll.NestedHorizontalScrollView.onNestedPreScroll(View target, int dx, int dy, int[] consumed, int type);
  public void com.lynx.tasm.behavior.ui.scroll.NestedHorizontalScrollView.onNestedPreScroll(View target, int dx, int dy, int[] consumed);
  public boolean com.lynx.tasm.behavior.ui.scroll.NestedHorizontalScrollView.onNestedFling(View target, float velocityX, float velocityY, boolean consumed);
  public boolean com.lynx.tasm.behavior.ui.scroll.NestedHorizontalScrollView.onNestedPreFling(View target, float velocityX, float velocityY);
  public int com.lynx.tasm.behavior.ui.scroll.NestedHorizontalScrollView.getNestedScrollAxes();
}

public class com::lynx::tasm::behavior::ui::list::container::NestedScrollContainerView : FrameLayout, NestedScrollingParent2, NestedScrollingChild2 {
  public LynxSnapHelper com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.mSnapHelper mSnapHelper;
  public boolean com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.mIsDuringAutoScroll mIsDuringAutoScroll;
  public final float com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.LIST_AUTOMATIC_MAX_FLING_RATIO LIST_AUTOMATIC_MAX_FLING_RATIO;
  public final int com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.SCROLL_STATE_IDLE SCROLL_STATE_IDLE;
  public final int com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.SCROLL_STATE_DRAGGING SCROLL_STATE_DRAGGING;
  public final int com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.SCROLL_STATE_FLING SCROLL_STATE_FLING;
  public final int com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.SCROLL_STATE_SCROLL_ANIMATION SCROLL_STATE_SCROLL_ANIMATION;
  public com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.NestedScrollContainerView(@NonNull Context context);
  public com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.NestedScrollContainerView(@NonNull Context context, @Nullable AttributeSet attrs);
  public com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.NestedScrollContainerView( @NonNull Context context, @Nullable AttributeSet attrs, int defStyleAttr);
  public boolean com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.onInterceptTouchEvent(MotionEvent event);
  public boolean com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.onTouchEvent(MotionEvent event);
  public void com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.smoothScrollTo(int scrollX, int scrollY);
  public void com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.stopFling();
  public int com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.getScrollRange();
  public boolean com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.canScrollBy(int delta);
  public void com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.setIsVertical(boolean isVertical);
  public void com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.setCustomScrollHook(CustomScrollHook customScrollHook);
  public CustomScrollHook com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.getCustomScrollHook();
  public void com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.setOnScrollStateChangeListener(OnScrollStateChangeListener listener);
  public void com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.setMaxFlingDistanceRatio(float ratio);
  public void com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.setEnableScroll(boolean enableScroll);
  public boolean com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.canScrollHorizontally(int direction);
  public boolean com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.canScrollVertically(int direction);
  public void com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.setNestedScrollingEnabled(boolean enabled);
  public boolean com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.isNestedScrollingEnabled();
  public boolean com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.hasNestedScrollingParent(int type);
  public boolean com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.hasNestedScrollingParent();
  public boolean com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.startNestedScroll(int axes, int type);
  public boolean com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.startNestedScroll(int axes);
  public void com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.stopNestedScroll(int type);
  public void com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.stopNestedScroll();
  public boolean com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.dispatchNestedScroll(int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int[] offsetInWindow, int type);
  public boolean com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.dispatchNestedScroll(int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int[] offsetInWindow);
  public boolean com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.dispatchNestedPreScroll(int dx, int dy, int[] consumed, int[] offsetInWindow, int type);
  public boolean com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.dispatchNestedPreScroll(int dx, int dy, int[] consumed, int[] offsetInWindow);
  public boolean com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.dispatchNestedPreFling(float velocityX, float velocityY);
  public boolean com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.dispatchNestedFling(float velocityX, float velocityY, boolean consumed);
  public boolean com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.onStartNestedScroll( @NonNull View child, @NonNull View target, int axes, int type);
  public boolean com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.onStartNestedScroll(View child, View target, int axes);
  public void com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.onNestedScrollAccepted( @NonNull View child, @NonNull View target, int axes, int type);
  public void com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.onNestedScrollAccepted(View child, View target, int axes);
  public void com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.onStopNestedScroll(@NonNull View target, int type);
  public void com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.onStopNestedScroll(View child);
  public void com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.onNestedPreScroll( @NonNull View target, int dx, int dy, @NonNull int[] consumed, int type);
  public void com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.onNestedPreScroll(View target, int dx, int dy, int[] consumed);
  public void com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.onNestedScroll(@NonNull View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int type);
  public void com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.onNestedScroll(View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed);
  public boolean com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.onNestedPreFling(View target, float velocityX, float velocityY);
  public boolean com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.onNestedFling(View target, float velocityX, float velocityY, boolean consumed);
  public int com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.getNestedScrollAxes();
}

public class com::lynx::tasm::behavior::ui::scroll::NestedScrollView : ScrollView, NestedScrollingParent2, NestedScrollingChild2 {
  public com.lynx.tasm.behavior.ui.scroll.NestedScrollView.NestedScrollView(Context context, UIScrollView uiScrollView);
  public boolean com.lynx.tasm.behavior.ui.scroll.NestedScrollView.onInterceptTouchEvent(MotionEvent ev);
  public boolean com.lynx.tasm.behavior.ui.scroll.NestedScrollView.onTouchEvent(MotionEvent ev);
  public void com.lynx.tasm.behavior.ui.scroll.NestedScrollView.fling(int velocityY);
  public void com.lynx.tasm.behavior.ui.scroll.NestedScrollView.computeScroll();
  public void com.lynx.tasm.behavior.ui.scroll.NestedScrollView.setEnableNewNested(boolean value);
  public void com.lynx.tasm.behavior.ui.scroll.NestedScrollView.setEnableNewBounce(boolean value);
  public void com.lynx.tasm.behavior.ui.scroll.NestedScrollView.setBounceScrollRange(int scrollRange, int bounceScrollRange);
  public void com.lynx.tasm.behavior.ui.scroll.NestedScrollView.setNestedScrollingEnabled(boolean enabled);
  public boolean com.lynx.tasm.behavior.ui.scroll.NestedScrollView.isNestedScrollingEnabled();
  public boolean com.lynx.tasm.behavior.ui.scroll.NestedScrollView.hasNestedScrollingParent(int type);
  public boolean com.lynx.tasm.behavior.ui.scroll.NestedScrollView.hasNestedScrollingParent();
  public boolean com.lynx.tasm.behavior.ui.scroll.NestedScrollView.startNestedScroll(int axes, int type);
  public boolean com.lynx.tasm.behavior.ui.scroll.NestedScrollView.startNestedScroll(int axes);
  public void com.lynx.tasm.behavior.ui.scroll.NestedScrollView.stopNestedScroll(int type);
  public void com.lynx.tasm.behavior.ui.scroll.NestedScrollView.stopNestedScroll();
  public boolean com.lynx.tasm.behavior.ui.scroll.NestedScrollView.dispatchNestedScroll(int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int[] offsetInWindow, int type);
  public boolean com.lynx.tasm.behavior.ui.scroll.NestedScrollView.dispatchNestedScroll(int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int[] offsetInWindow);
  public boolean com.lynx.tasm.behavior.ui.scroll.NestedScrollView.dispatchNestedPreScroll(int dx, int dy, int[] consumed, int[] offsetInWindow, int type);
  public boolean com.lynx.tasm.behavior.ui.scroll.NestedScrollView.dispatchNestedPreScroll(int dx, int dy, int[] consumed, int[] offsetInWindow);
  public boolean com.lynx.tasm.behavior.ui.scroll.NestedScrollView.dispatchNestedPreFling(float velocityX, float velocityY);
  public boolean com.lynx.tasm.behavior.ui.scroll.NestedScrollView.dispatchNestedFling(float velocityX, float velocityY, boolean consumed);
  public boolean com.lynx.tasm.behavior.ui.scroll.NestedScrollView.onStartNestedScroll(View child, View target, int nestedScrollAxes, int type);
  public boolean com.lynx.tasm.behavior.ui.scroll.NestedScrollView.onStartNestedScroll(View child, View target, int nestedScrollAxes);
  public void com.lynx.tasm.behavior.ui.scroll.NestedScrollView.onNestedScrollAccepted(View child, View target, int nestedScrollAxes, int type);
  public void com.lynx.tasm.behavior.ui.scroll.NestedScrollView.onNestedScrollAccepted(View child, View target, int nestedScrollAxes);
  public void com.lynx.tasm.behavior.ui.scroll.NestedScrollView.onStopNestedScroll(View target, int type);
  public void com.lynx.tasm.behavior.ui.scroll.NestedScrollView.onStopNestedScroll(View target);
  public void com.lynx.tasm.behavior.ui.scroll.NestedScrollView.onNestedScroll(View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int type);
  public void com.lynx.tasm.behavior.ui.scroll.NestedScrollView.onNestedScroll(View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed);
  public void com.lynx.tasm.behavior.ui.scroll.NestedScrollView.onNestedPreScroll(View target, int dx, int dy, int[] consumed, int type);
  public void com.lynx.tasm.behavior.ui.scroll.NestedScrollView.onNestedPreScroll(View target, int dx, int dy, int[] consumed);
  public boolean com.lynx.tasm.behavior.ui.scroll.NestedScrollView.onNestedFling(View target, float velocityX, float velocityY, boolean consumed);
  public boolean com.lynx.tasm.behavior.ui.scroll.NestedScrollView.onNestedPreFling(View target, float velocityX, float velocityY);
  public int com.lynx.tasm.behavior.ui.scroll.NestedScrollView.getNestedScrollAxes();
}

public class com::lynx::tasm::image::NinePatchHelper :  {
  public static Matrix com.lynx.tasm.image.NinePatchHelper.getMatrix(int availableWidth, int availableHeight, int sourceWidth, int sourceHeight, ScalingUtils.ScaleType scaleType);
  public static boolean com.lynx.tasm.image.NinePatchHelper.drawNinePatch(int availableWidth, int availableHeight, int sourceWidth, int sourceHeight, ScalingUtils.ScaleType scaleType, String capInsets, String capInsetsScale, Canvas canvas, Bitmap bitmap);
}

public interface com::lynx::tasm::behavior::ui::view::UIComponent::NodeReadyListener {
  public void com.lynx.tasm.behavior.ui.view.UIComponent.NodeReadyListener.onComponentNodeReady(UIComponent ui);
}

public class com::lynx::tasm::common::NullableConcurrentHashMap : ConcurrentHashMap< K, V > {
  public V com.lynx.tasm.common.NullableConcurrentHashMap< K, V >.put(@NonNull K key, @NonNull V value);
  public void com.lynx.tasm.common.NullableConcurrentHashMap< K, V >.putAll(@NonNull Map<? extends K, ? extends V > m);
  public V com.lynx.tasm.common.NullableConcurrentHashMap< K, V >.get(@NonNull Object key);
  public Set< Entry< K, V > > com.lynx.tasm.common.NullableConcurrentHashMap< K, V >.entrySet();
}

public class com::lynx::tasm::base::OnceTask : Runnable {
  public com.lynx.tasm.base.OnceTask< T >.OnceTask(final Callable< T > task);
  public void com.lynx.tasm.base.OnceTask< T >.run();
  public T com.lynx.tasm.base.OnceTask< T >.get();
}

public interface com::lynx::tasm::behavior::GestureRecognizer::OnDoubleTapListener {
  public boolean com.lynx.tasm.behavior.GestureRecognizer.OnDoubleTapListener.onSingleTapConfirmed(MotionEvent e);
  public boolean com.lynx.tasm.behavior.GestureRecognizer.OnDoubleTapListener.onDoubleTap(MotionEvent e);
  public boolean com.lynx.tasm.behavior.GestureRecognizer.OnDoubleTapListener.onDoubleTapEvent(MotionEvent e);
}

public interface com::lynx::tasm::behavior::GestureRecognizer::OnGestureListener {
  public boolean com.lynx.tasm.behavior.GestureRecognizer.OnGestureListener.onDown(MotionEvent e);
  public void com.lynx.tasm.behavior.GestureRecognizer.OnGestureListener.onShowPress(MotionEvent e);
  public boolean com.lynx.tasm.behavior.GestureRecognizer.OnGestureListener.onSingleTapUp(MotionEvent e);
  public boolean com.lynx.tasm.behavior.GestureRecognizer.OnGestureListener.onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY);
  public void com.lynx.tasm.behavior.GestureRecognizer.OnGestureListener.onLongPress(MotionEvent e);
  public boolean com.lynx.tasm.behavior.GestureRecognizer.OnGestureListener.onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY);
}

public interface com::lynx::tasm::behavior::ui::swiper::ViewPager::OnPageScrollListener {
  public void com.lynx.tasm.behavior.ui.swiper.ViewPager.OnPageScrollListener.onPageScrollStart(int position, boolean isDragged);
  public void com.lynx.tasm.behavior.ui.swiper.ViewPager.OnPageScrollListener.onPageScrollEnd(int position);
  public void com.lynx.tasm.behavior.ui.swiper.ViewPager.OnPageScrollListener.onPageScrolling(int position, boolean isDragged, float offsetX, float offsetY);
  public void com.lynx.tasm.behavior.ui.swiper.ViewPager.OnPageScrollListener.onPageChange(int oldPosition, int newPosition, boolean isInit);
  public void com.lynx.tasm.behavior.ui.swiper.ViewPager.OnPageScrollListener.onPageScrollStateChanged(int oldState, int newState);
  public void com.lynx.tasm.behavior.ui.swiper.ViewPager.OnPageScrollListener.onScrollToBounce(boolean toBegin, boolean toEnd);
}

public interface com::lynx::tasm::behavior::ui::scroll::AndroidScrollView::OnScrollListener {
  public void com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.OnScrollListener.onScrollStop();
  public void com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.OnScrollListener.onScrollChanged(int l, int t, int oldl, int oldt);
  public void com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.OnScrollListener.onScrollStart();
  public void com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.OnScrollListener.onScrollStateChanged(int state);
  public void com.lynx.tasm.behavior.ui.scroll.AndroidScrollView.OnScrollListener.onFling(int velocity);
}

public interface com::lynx::tasm::behavior::ui::list::container::NestedScrollContainerView::OnScrollStateChangeListener {
  public void com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.OnScrollStateChangeListener.onScrollStateChange(NestedScrollContainerView scrollView, int state);
}

public interface com::lynx::tasm::behavior::ui::accessibility::LynxAccessibilityStateHelper::OnStateListener {
  public void com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityStateHelper.OnStateListener.onAccessibilityEnable(final boolean enable);
  public void com.lynx.tasm.behavior.ui.accessibility.LynxAccessibilityStateHelper.OnStateListener.onTouchExplorationEnable(final boolean enable);
}

public interface com::lynx::tasm::behavior::ui::view::UIComponent::OnUpdateListener {
  public void com.lynx.tasm.behavior.ui.view.UIComponent.OnUpdateListener.onLayoutUpdated(UIComponent ui);
}

public enum com::lynx::tasm::resourceprovider::media::OptionalBool {
  public com.lynx.tasm.resourceprovider.media.OptionalBool.TRUE TRUE;
  public com.lynx.tasm.resourceprovider.media.OptionalBool.FALSE FALSE;
  public com.lynx.tasm.resourceprovider.media.OptionalBool.UNDEFINED UNDEFINED;
}

public class com::lynx::tasm::behavior::ui::UIShadowProxy::Outline :  {
  public BorderStyle com.lynx.tasm.behavior.ui.UIShadowProxy.Outline.mStyle mStyle;
  public Integer com.lynx.tasm.behavior.ui.UIShadowProxy.Outline.mColor mColor;
  public float com.lynx.tasm.behavior.ui.UIShadowProxy.Outline.mWidth mWidth;
  public Rect com.lynx.tasm.behavior.ui.UIShadowProxy.Outline.mFrameRect mFrameRect;
  public com.lynx.tasm.behavior.ui.UIShadowProxy.Outline.Outline();
}

public interface com::lynx::tasm::behavior::StyleConstants::OverflowType {
}

public interface com::lynx::devtoolwrapper::OverlayService {
  public ArrayList< Dialog > com.lynx.devtoolwrapper.OverlayService.getGlobalOverlayNGView();
  public ArrayList< Integer > com.lynx.devtoolwrapper.OverlayService.getAllVisibleOverlaySign();
}

public class com::lynx::tasm::PageConfig :  {
  public com.lynx.tasm.PageConfig.PageConfig(ReadableMap map);
  public boolean com.lynx.tasm.PageConfig.isCssAlignWithLegacyW3c();
  public void com.lynx.tasm.PageConfig.setCssAlignWithLegacyW3c(boolean mCssAlignWithLegacyW3c);
  public boolean com.lynx.tasm.PageConfig.isAutoExpose();
  public boolean com.lynx.tasm.PageConfig.enableEventThrough();
  public String com.lynx.tasm.PageConfig.getPageVersion();
  public boolean com.lynx.tasm.PageConfig.getDefaultOverflowVisible();
  public boolean com.lynx.tasm.PageConfig.isAsyncRedirect();
  public boolean com.lynx.tasm.PageConfig.isSyncImageAttach();
  public boolean com.lynx.tasm.PageConfig.isEnableCheckLocalImage();
  public boolean com.lynx.tasm.PageConfig.isEnableAsyncRequestImage();
  public boolean com.lynx.tasm.PageConfig.isUseImagePostProcessor();
  public boolean com.lynx.tasm.PageConfig.isEnableLoadImageFromService();
  public boolean com.lynx.tasm.PageConfig.isUseNewSwiper();
  public boolean com.lynx.tasm.PageConfig.isAsyncInitTTVideoEngine();
  public String com.lynx.tasm.PageConfig.getPageType();
  public String com.lynx.tasm.PageConfig.getCliVersion();
  public String com.lynx.tasm.PageConfig.getCustomData();
  public String com.lynx.tasm.PageConfig.getTargetSdkVersion();
  public String com.lynx.tasm.PageConfig.getLepusVersion();
  public boolean com.lynx.tasm.PageConfig.isEnableLepusNG();
  public String com.lynx.tasm.PageConfig.getTapSlop();
  public boolean com.lynx.tasm.PageConfig.getEnableCreateViewAsync();
  public boolean com.lynx.tasm.PageConfig.getEnableVsyncAlignedFlush();
  public boolean com.lynx.tasm.PageConfig.getEnableAccessibilityElement();
  public boolean com.lynx.tasm.PageConfig.getEnableOverlapForAccessibilityElement();
  public boolean com.lynx.tasm.PageConfig.getEnableNewAccessibility();
  public boolean com.lynx.tasm.PageConfig.getEnableA11yIDMutationObserver();
  public boolean com.lynx.tasm.PageConfig.getEnableA11y();
  public String com.lynx.tasm.PageConfig.getReactVersion();
  public boolean com.lynx.tasm.PageConfig.isTextRefactorEnabled();
  public boolean com.lynx.tasm.PageConfig.isTextOverflowEnabled();
  public boolean com.lynx.tasm.PageConfig.isTextBoringLayoutEnabled();
  public boolean com.lynx.tasm.PageConfig.isTextLayoutCacheEnabled();
  public boolean com.lynx.tasm.PageConfig.isNewClipModeEnabled();
  public boolean com.lynx.tasm.PageConfig.useRelativeKeyboardHeightApi();
  public boolean com.lynx.tasm.PageConfig.isCSSParserEnabled();
  public boolean com.lynx.tasm.PageConfig.getDefaultTextIncludePadding();
  public boolean com.lynx.tasm.PageConfig.getEnableFlattenTranslateZ();
  public boolean com.lynx.tasm.PageConfig.isEnableNewGesture();
  public boolean com.lynx.tasm.PageConfig.getEnableEventRefactor();
  public boolean com.lynx.tasm.PageConfig.getEnableDisexposureWhenLynxHidden();
  public boolean com.lynx.tasm.PageConfig.getEnableExposureWhenLayout();
  public boolean com.lynx.tasm.PageConfig.getEnableNewIntersectionObserver();
  public int com.lynx.tasm.PageConfig.getObserverFrameRate();
  public boolean com.lynx.tasm.PageConfig.getEnableExposureUIMargin();
  public int com.lynx.tasm.PageConfig.getLongPressDuration();
  public int com.lynx.tasm.PageConfig.getMapContainerType();
  public boolean com.lynx.tasm.PageConfig.isPageFlatten();
  public String com.lynx.tasm.PageConfig.getUser();
  public String com.lynx.tasm.PageConfig.getGit();
  public String com.lynx.tasm.PageConfig.getFilePath();
  public boolean com.lynx.tasm.PageConfig.getEnableFiberArc();
  public boolean com.lynx.tasm.PageConfig.getEnableMultiTouch();
  public double com.lynx.tasm.PageConfig.getEnableLynxScrollFluency();
  public String com.lynx.tasm.PageConfig.toString();
  public static void com.lynx.tasm.PageConfig.attachPageConfig(PageConfig config, LynxContext lynxContext, ILynxUIRenderer uiRenderer);
}

public class com::lynx::tasm::base::PageReloadHelper :  {
  public com.lynx.tasm.base.PageReloadHelper.PageReloadHelper(@Nullable LynxTemplateRender templateRender);
  public void com.lynx.tasm.base.PageReloadHelper.attach(LynxTemplateRender templateRender);
  public void com.lynx.tasm.base.PageReloadHelper.saveURL(@NonNull final String templateUrl, @Nullable final TemplateData templateData, @Nullable final Map< String, Object > map, @Nullable final String jsonData);
  public void com.lynx.tasm.base.PageReloadHelper.loadFromURL( @NonNull final String templateUrl, @Nullable final TemplateData templateData);
  public void com.lynx.tasm.base.PageReloadHelper.update(TemplateData data);
  public void com.lynx.tasm.base.PageReloadHelper.loadFromLocalFile(byte[] template, TemplateData templateData, String baseUrl);
  public void com.lynx.tasm.base.PageReloadHelper.loadFromBundle(TemplateBundle bundle, TemplateData templateData, String baseUrl);
  public void com.lynx.tasm.base.PageReloadHelper.reload(boolean ignoreCache);
  public void com.lynx.tasm.base.PageReloadHelper.reload(boolean ignoreCache, String templateBin, boolean loadFromFragments, int templateSize);
  public void com.lynx.tasm.base.PageReloadHelper.onReceiveTemplateFragment(String fragment, boolean isLastFragment);
  public void com.lynx.tasm.base.PageReloadHelper.navigate(String url);
  public String com.lynx.tasm.base.PageReloadHelper.getURL();
  public void com.lynx.tasm.base.PageReloadHelper.clearCache();
  public long com.lynx.tasm.base.PageReloadHelper.getTemplateDataPtr();
  public String com.lynx.tasm.base.PageReloadHelper.getTemplateJsInfo(int offset, int size);
  public void com.lynx.tasm.base.PageReloadHelper.onTemplateLoadSuccess(byte[] template);
}

public interface com::lynx::tasm::behavior::ui::swiper::ViewPager::PageTransformer {
  public void com.lynx.tasm.behavior.ui.swiper.ViewPager.PageTransformer.transformPage(ViewPager viewPager, View page, boolean isVertical, int offset);
  public void com.lynx.tasm.behavior.ui.swiper.ViewPager.PageTransformer.reset(View page);
}

public class com::lynx::tasm::behavior::PaintingContext :  {
  public com.lynx.tasm.behavior.PaintingContext.PaintingContext(LynxUIOwner uiOwner, int threadStrategy);
  public void com.lynx.tasm.behavior.PaintingContext.destroy();
  public long com.lynx.tasm.behavior.PaintingContext.getNativePaintingContextPtr();
  public void com.lynx.tasm.behavior.PaintingContext.rebuildViewTree();
  public void com.lynx.tasm.behavior.PaintingContext.updateLayout(int sign, float x, float y, float width, float height, float paddingLeft, float paddingTop, float paddingRight, float paddingBottom, float marginLeft, float marginTop, float marginRight, float marginBottom, float borderLeftWidth, float borderTopWidth, float borderRightWidth, float borderBottomWidth, float[] bounds, float[] sticky, float maxHeight, int nodeIndex);
  public void com.lynx.tasm.behavior.PaintingContext.updateProps(int sign, boolean tendToFlatten, ReadableMap props, ReadableMapBuffer styles, ReadableArray eventListeners, ReadableArray gestureDetectors);
  public Object com.lynx.tasm.behavior.PaintingContext.createNode(final int sign, String tagName, final ReadableMap initialProps, final ReadableMapBuffer initialStyles, final ReadableArray eventListeners, final boolean isFlatten, int nodeIndex, final ReadableArray gestureDetectors);
  public void com.lynx.tasm.behavior.PaintingContext.createPaintingNodeSync(int sign, String tagName, ReadableMap initialProps, ReadableMapBuffer initialStyles, ReadableArray eventListeners, boolean isFlatten, int nodeIndex, ReadableArray gestureDetectors);
  public Future< Runnable > com.lynx.tasm.behavior.PaintingContext.createNodeAsync(int sign, String tagName, ReadableMap initialProps, ReadableMapBuffer initialStyles, ReadableArray eventListeners, boolean isFlatten, int nodeIndex, ReadableArray gestureDetectors);
  public Object com.lynx.tasm.behavior.PaintingContext.createPaintingNodeAsync(int sign, String tagName, ReadableMap initialProps, ReadableMapBuffer initialStyles, ReadableArray eventListeners, boolean isFlatten, int nodeIndex, ReadableArray gestureDetectors);
  public void com.lynx.tasm.behavior.PaintingContext.insertNode(int parentSign, int childSign, int index);
  public void com.lynx.tasm.behavior.PaintingContext.removeNode(int parentSign, int childSign);
  public void com.lynx.tasm.behavior.PaintingContext.destroyNode(int parentSign, int childSign);
  public void com.lynx.tasm.behavior.PaintingContext.updateFlattenStatus(int sign, boolean flatten);
  public void com.lynx.tasm.behavior.PaintingContext.setKeyframes(ReadableMap props);
  public void com.lynx.tasm.behavior.PaintingContext.SetGestureDetectorState(int sign, int gestureId, int state);
  public void com.lynx.tasm.behavior.PaintingContext.consumeGesture(int sign, int gestureId, ReadableMap params);
  public void com.lynx.tasm.behavior.PaintingContext.validate(int sign);
  public void com.lynx.tasm.behavior.PaintingContext.FinishLayoutOperation(int componentId, long operationId, boolean isFirstScreen);
  public void com.lynx.tasm.behavior.PaintingContext.updateExtraData(int signature, Object data);
  public float[] com.lynx.tasm.behavior.PaintingContext.getBoundingClientOrigin(int sign);
  public void com.lynx.tasm.behavior.PaintingContext.scrollIntoView(int sign);
  public float[] com.lynx.tasm.behavior.PaintingContext.getWindowSize(int sign);
  public float[] com.lynx.tasm.behavior.PaintingContext.getRectToWindow(int sign);
  public float[] com.lynx.tasm.behavior.PaintingContext.getRectToLynxView(int sign);
  public float[] com.lynx.tasm.behavior.PaintingContext.scrollBy(int sign, float width, float height);
  public void com.lynx.tasm.behavior.PaintingContext.invoke(int sign, String method, ReadableMap params, final long context, final int callback);
  public void com.lynx.tasm.behavior.PaintingContext.UpdateLayoutPatching(int[] signs, int[] ints, float[] bounds, float[] stickies, int[] nodeIndex);
  public void com.lynx.tasm.behavior.PaintingContext.updateNodeReadyPatching(int[] readyIds, int[] removeIds);
  public void com.lynx.tasm.behavior.PaintingContext.updateEventInfo(boolean hasTouchPseudo);
  public void com.lynx.tasm.behavior.PaintingContext.updateNodeReloadPatching(int[] reloadIds);
  public void com.lynx.tasm.behavior.PaintingContext.reuseListNode(int tag, String itemKey);
  public void com.lynx.tasm.behavior.PaintingContext.listCellDisappear(int tag, boolean isExist, String itemKey);
  public void com.lynx.tasm.behavior.PaintingContext.listCellAppear(int tag, String itemKey);
  public void com.lynx.tasm.behavior.PaintingContext.requestLayout();
  public int com.lynx.tasm.behavior.PaintingContext.getTagInfo(String tagName);
  public void com.lynx.tasm.behavior.PaintingContext.removeListItemNode(int listSign, int childSign);
  public void com.lynx.tasm.behavior.PaintingContext.insertListItemNode(int listSign, int childSign);
  public void com.lynx.tasm.behavior.PaintingContext.updateContentSizeAndOffset(int listSign, float contentSize, float deltaX, float deltaY);
  public void com.lynx.tasm.behavior.PaintingContext.updateScrollInfo(int containerID, boolean smooth, float estimatedOffset, boolean scrolling);
  public float[] com.lynx.tasm.behavior.PaintingContext.measureText(int sign, ReadableCompactArrayBuffer buffer, float width, int widthMode, float height, int heightMode);
}

public class com::lynx::tasm::gesture::handler::PanGestureHandler : com.lynx.tasm.gesture.handler.BaseGestureHandler {
  public com.lynx.tasm.gesture.handler.PanGestureHandler.PanGestureHandler(int sign, LynxContext lynxContext, @NonNull GestureDetector gestureDetector, GestureArenaMember gestureArenaMember);
  public void com.lynx.tasm.gesture.handler.PanGestureHandler.fail();
  public void com.lynx.tasm.gesture.handler.PanGestureHandler.end();
  public void com.lynx.tasm.gesture.handler.PanGestureHandler.reset();
}

public class com::lynx::jsbridge::ParamWrapper :  {
  public String com.lynx.jsbridge.ParamWrapper.getName();
  public void com.lynx.jsbridge.ParamWrapper.setName(String name);
  public Class<? extends LynxModule > com.lynx.jsbridge.ParamWrapper.getModuleClass();
  public void com.lynx.jsbridge.ParamWrapper.setModuleClass(Class<? extends LynxModule > moduleClass);
  public Object com.lynx.jsbridge.ParamWrapper.getParam();
  public void com.lynx.jsbridge.ParamWrapper.setParam(Object param);
  public String com.lynx.jsbridge.ParamWrapper.toString();
}

public interface com::lynx::tasm::behavior::PatchFinishListener {
  public void com.lynx.tasm.behavior.PatchFinishListener.onPatchFinish();
}

public class com::lynx::tasm::performance::PerformanceController : com.lynx.tasm.performance.memory.IMemoryMonitor, com.lynx.tasm.performance.timing.ITimingCollector {
  public static boolean com.lynx.tasm.performance.PerformanceController.isMemoryMonitorEnabled();
  public void com.lynx.tasm.performance.PerformanceController.setPerformanceObserver(IPerformanceObserver observer);
  public boolean com.lynx.tasm.performance.PerformanceController.isEnableController();
  public void com.lynx.tasm.performance.PerformanceController.setEnableController(boolean enableController);
  public void com.lynx.tasm.performance.PerformanceController.allocateMemory(IMemoryRecordBuilder builder);
  public void com.lynx.tasm.performance.PerformanceController.deallocateMemory(IMemoryRecordBuilder builder);
  public void com.lynx.tasm.performance.PerformanceController.updateMemoryUsage(IMemoryRecordBuilder builder);
  public void com.lynx.tasm.performance.PerformanceController.setMsTiming(String key, long msTimestamp, String pipelineID);
  public void com.lynx.tasm.performance.PerformanceController.markTiming(final String key, final String pipelineID);
  public void com.lynx.tasm.performance.PerformanceController.markPaintEndTimingIfNeeded();
  public void com.lynx.tasm.performance.PerformanceController.setExtraTiming(TimingHandler.ExtraTimingInfo extraTiming);
}

public class com::lynx::tasm::performance::performanceobserver::PerformanceEntry :  {
  public String com.lynx.tasm.performance.performanceobserver.PerformanceEntry.name name;
  public String com.lynx.tasm.performance.performanceobserver.PerformanceEntry.entryType entryType;
  public HashMap<String,Object> com.lynx.tasm.performance.performanceobserver.PerformanceEntry.rawMap rawMap;
  public com.lynx.tasm.performance.performanceobserver.PerformanceEntry.PerformanceEntry(HashMap< String, Object > props);
  public HashMap< String, Object > com.lynx.tasm.performance.performanceobserver.PerformanceEntry.toHashMap();
}

public class com::lynx::tasm::performance::performanceobserver::PerformanceEntryConverter :  {
  public static PerformanceEntry com.lynx.tasm.performance.performanceobserver.PerformanceEntryConverter.makePerformanceEntry(ReadableMap map);
}

public class com::lynx::tasm::performance::performanceobserver::PerformanceMetric :  {
  public String com.lynx.tasm.performance.performanceobserver.PerformanceMetric.name name;
  public double com.lynx.tasm.performance.performanceobserver.PerformanceMetric.duration duration;
  public String com.lynx.tasm.performance.performanceobserver.PerformanceMetric.startTimestampName startTimestampName;
  public double com.lynx.tasm.performance.performanceobserver.PerformanceMetric.startTimestamp startTimestamp;
  public String com.lynx.tasm.performance.performanceobserver.PerformanceMetric.endTimestampName endTimestampName;
  public double com.lynx.tasm.performance.performanceobserver.PerformanceMetric.endTimestamp endTimestamp;
  public com.lynx.tasm.performance.performanceobserver.PerformanceMetric.PerformanceMetric(HashMap< String, Object > props);
}

public class com::lynx::tasm::performance::performanceobserver::PipelineEntry : com.lynx.tasm.performance.performanceobserver.PerformanceEntry {
  public String com.lynx.tasm.performance.performanceobserver.PipelineEntry.identifier identifier;
  public double com.lynx.tasm.performance.performanceobserver.PipelineEntry.pipelineStart pipelineStart;
  public double com.lynx.tasm.performance.performanceobserver.PipelineEntry.pipelineEnd pipelineEnd;
  public double com.lynx.tasm.performance.performanceobserver.PipelineEntry.mtsRenderStart mtsRenderStart;
  public double com.lynx.tasm.performance.performanceobserver.PipelineEntry.mtsRenderEnd mtsRenderEnd;
  public double com.lynx.tasm.performance.performanceobserver.PipelineEntry.resolveStart resolveStart;
  public double com.lynx.tasm.performance.performanceobserver.PipelineEntry.resolveEnd resolveEnd;
  public double com.lynx.tasm.performance.performanceobserver.PipelineEntry.layoutStart layoutStart;
  public double com.lynx.tasm.performance.performanceobserver.PipelineEntry.layoutEnd layoutEnd;
  public double com.lynx.tasm.performance.performanceobserver.PipelineEntry.paintingUiOperationExecuteStart paintingUiOperationExecuteStart;
  public double com.lynx.tasm.performance.performanceobserver.PipelineEntry.paintingUiOperationExecuteEnd paintingUiOperationExecuteEnd;
  public double com.lynx.tasm.performance.performanceobserver.PipelineEntry.layoutUiOperationExecuteStart layoutUiOperationExecuteStart;
  public double com.lynx.tasm.performance.performanceobserver.PipelineEntry.layoutUiOperationExecuteEnd layoutUiOperationExecuteEnd;
  public double com.lynx.tasm.performance.performanceobserver.PipelineEntry.paintEnd paintEnd;
  public HashMap<String, Object> com.lynx.tasm.performance.performanceobserver.PipelineEntry.frameworkRenderingTiming frameworkRenderingTiming;
  public com.lynx.tasm.performance.performanceobserver.PipelineEntry.PipelineEntry(HashMap< String, Object > props);
}

public class com::lynx::react::bridge::PiperData :  {
  public static PiperData com.lynx.react.bridge.PiperData.fromString(String piperData);
  public static PiperData com.lynx.react.bridge.PiperData.fromObject(Object data);
  public static PiperData com.lynx.react.bridge.PiperData.createDisposableFromString(String piperData);
  public static PiperData com.lynx.react.bridge.PiperData.createDisposableFromObject(Object data);
  public Object com.lynx.react.bridge.PiperData.getRawData();
  public boolean com.lynx.react.bridge.PiperData.hasParseError();
  public void com.lynx.react.bridge.PiperData.markDisposable();
  public long com.lynx.react.bridge.PiperData.getNativePtr();
  public ByteBuffer com.lynx.react.bridge.PiperData.getBuffer();
  public int com.lynx.react.bridge.PiperData.getBufferPosition();
  public boolean com.lynx.react.bridge.PiperData.isDisposable();
  public int com.lynx.react.bridge.PiperData.getDataType();
}

public class com::lynx::tasm::utils::PixelUtils :  {
  public static float com.lynx.tasm.utils.PixelUtils.dipToPx(float value, float density);
  public static float com.lynx.tasm.utils.PixelUtils.dipToPx(float value);
  public static float com.lynx.tasm.utils.PixelUtils.dipToPx(double value, float density);
  public static float com.lynx.tasm.utils.PixelUtils.dipToPx(double value);
  public static float com.lynx.tasm.utils.PixelUtils.pxToDip(float value);
}

public class abstract com::lynx::tasm::PlatformCallBack :  {
  public final double com.lynx.tasm.PlatformCallBack.InvalidId InvalidId;
  public abstract void com.lynx.tasm.PlatformCallBack.onSuccess(Object data);
}

public class com::lynx::tasm::behavior::PlatformExtraBundleHolder :  {
  public Object com.lynx.tasm.behavior.PlatformExtraBundleHolder.getBundle(int signature);
  public void com.lynx.tasm.behavior.PlatformExtraBundleHolder.putBundle(int signature, Object bundle);
  public static PlatformExtraBundleHolder com.lynx.tasm.behavior.PlatformExtraBundleHolder.generateHolder();
}

public class com::lynx::tasm::behavior::ui::utils::PlatformLength :  {
  public com.lynx.tasm.behavior.ui.utils.PlatformLength.PlatformLength(Dynamic value, int type);
  public com.lynx.tasm.behavior.ui.utils.PlatformLength.PlatformLength(float value, int type);
  public float com.lynx.tasm.behavior.ui.utils.PlatformLength.asNumber();
  public float com.lynx.tasm.behavior.ui.utils.PlatformLength.getValue(float parentValue);
  public boolean com.lynx.tasm.behavior.ui.utils.PlatformLength.equals(@Nullable Object obj);
  public boolean com.lynx.tasm.behavior.ui.utils.PlatformLength.isZero();
}

public class com::lynx::tasm::event::LynxTouchEvent::Point :  {
  public com.lynx.tasm.event.LynxTouchEvent.Point.Point();
  public com.lynx.tasm.event.LynxTouchEvent.Point.Point(float x, float y);
  public float com.lynx.tasm.event.LynxTouchEvent.Point.getX();
  public float com.lynx.tasm.event.LynxTouchEvent.Point.getY();
  public Point com.lynx.tasm.event.LynxTouchEvent.Point.convert(Rect fromRect, Rect toRect);
  public boolean com.lynx.tasm.event.LynxTouchEvent.Point.equals(Object o);
  public int com.lynx.tasm.event.LynxTouchEvent.Point.hashCode();
  public String com.lynx.tasm.event.LynxTouchEvent.Point.toString();
}

public enum com::lynx::tasm::behavior::ui::utils::BackgroundDrawable::RoundRectPath::Pos {
  public com.lynx.tasm.behavior.ui.utils.BackgroundDrawable.RoundRectPath.Pos.CENTER CENTER;
  public com.lynx.tasm.behavior.ui.utils.BackgroundDrawable.RoundRectPath.Pos.INNER2 INNER2;
  public com.lynx.tasm.behavior.ui.utils.BackgroundDrawable.RoundRectPath.Pos.OUTER2 OUTER2;
  public com.lynx.tasm.behavior.ui.utils.BackgroundDrawable.RoundRectPath.Pos.INNER3 INNER3;
  public com.lynx.tasm.behavior.ui.utils.BackgroundDrawable.RoundRectPath.Pos.OUTER3 OUTER3;
  public float com.lynx.tasm.behavior.ui.utils.BackgroundDrawable.RoundRectPath.Pos.getOffset();
}

public class com::lynx::tasm::animation::layout::PositionAndSizeAnimation : Animation, com.lynx.tasm.animation.layout.LayoutHandlingAnimation {
  public com.lynx.tasm.animation.layout.PositionAndSizeAnimation.PositionAndSizeAnimation(LynxUI ui, int x, int y, int width, int height, int paddingLeft, int paddingTop, int paddingRight, int paddingBottom, int marginLeft, int marginTop, int marginRight, int marginBottom, int borderLeftWidth, int borderTopWidth, int borderRightWidth, int borderBottomWidth, final Rect bound);
  public void com.lynx.tasm.animation.layout.PositionAndSizeAnimation.onLayoutUpdate(int x, int y, int width, int height);
  public boolean com.lynx.tasm.animation.layout.PositionAndSizeAnimation.willChangeBounds();
}

public interface com::lynx::jsbridge::Promise {
  public void com.lynx.jsbridge.Promise.resolve(@Nullable Object value);
  public void com.lynx.jsbridge.Promise.reject(String code, String message);
  public void com.lynx.jsbridge.Promise.reject(String message);
}

public class com::lynx::jsbridge::PromiseImpl : com.lynx.jsbridge.Promise {
  public com.lynx.jsbridge.PromiseImpl.PromiseImpl(@Nullable Callback resolve, @Nullable Callback reject);
  public void com.lynx.jsbridge.PromiseImpl.resolve(Object value);
  public void com.lynx.jsbridge.PromiseImpl.reject(String message);
  public void com.lynx.jsbridge.PromiseImpl.reject(String code, String message);
}

public interface com::lynx::tasm::behavior::PropertiesDispatcher {
  public void com.lynx.tasm.behavior.PropertiesDispatcher.dispatchProperties(StylesDiffMap map);
}

public class com::lynx::tasm::animation::PropertyFactory :  {
  public static final int com.lynx.tasm.animation.PropertyFactory.fromPropertyString(String name);
  public static final String com.lynx.tasm.animation.PropertyFactory.propertyToString(int prop);
}

public class com::lynx::tasm::behavior::PropertyIDConstants :  {
  public final String [] com.lynx.tasm.behavior.PropertyIDConstants.PROPERTY_CONSTANT PROPERTY_CONSTANT;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.Top Top;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.Left Left;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.Right Right;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.Bottom Bottom;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.Position Position;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.BoxSizing BoxSizing;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.BackgroundColor BackgroundColor;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.BorderLeftColor BorderLeftColor;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.BorderRightColor BorderRightColor;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.BorderTopColor BorderTopColor;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.BorderBottomColor BorderBottomColor;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.BorderRadius BorderRadius;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.BorderTopLeftRadius BorderTopLeftRadius;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.BorderBottomLeftRadius BorderBottomLeftRadius;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.BorderTopRightRadius BorderTopRightRadius;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.BorderBottomRightRadius BorderBottomRightRadius;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.BorderWidth BorderWidth;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.BorderLeftWidth BorderLeftWidth;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.BorderRightWidth BorderRightWidth;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.BorderTopWidth BorderTopWidth;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.BorderBottomWidth BorderBottomWidth;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.Color Color;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.Opacity Opacity;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.Display Display;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.Overflow Overflow;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.Height Height;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.Width Width;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.MaxWidth MaxWidth;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.MinWidth MinWidth;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.MaxHeight MaxHeight;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.MinHeight MinHeight;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.Padding Padding;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.PaddingLeft PaddingLeft;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.PaddingRight PaddingRight;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.PaddingTop PaddingTop;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.PaddingBottom PaddingBottom;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.Margin Margin;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.MarginLeft MarginLeft;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.MarginRight MarginRight;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.MarginTop MarginTop;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.MarginBottom MarginBottom;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.WhiteSpace WhiteSpace;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.LetterSpacing LetterSpacing;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.TextAlign TextAlign;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.LineHeight LineHeight;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.TextOverflow TextOverflow;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.FontSize FontSize;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.FontWeight FontWeight;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.Flex Flex;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.FlexGrow FlexGrow;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.FlexShrink FlexShrink;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.FlexBasis FlexBasis;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.FlexDirection FlexDirection;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.FlexWrap FlexWrap;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.AlignItems AlignItems;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.AlignSelf AlignSelf;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.AlignContent AlignContent;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.JustifyContent JustifyContent;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.Background Background;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.BorderColor BorderColor;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.FontFamily FontFamily;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.FontStyle FontStyle;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.Transform Transform;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.Animation Animation;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.AnimationName AnimationName;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.AnimationDuration AnimationDuration;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.AnimationTimingFunction AnimationTimingFunction;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.AnimationDelay AnimationDelay;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.AnimationIterationCount AnimationIterationCount;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.AnimationDirection AnimationDirection;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.AnimationFillMode AnimationFillMode;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.AnimationPlayState AnimationPlayState;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.LineSpacing LineSpacing;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.BorderStyle BorderStyle;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.Order Order;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.BoxShadow BoxShadow;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.TransformOrigin TransformOrigin;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.LinearOrientation LinearOrientation;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.LinearWeightSum LinearWeightSum;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.LinearWeight LinearWeight;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.LinearGravity LinearGravity;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.LinearLayoutGravity LinearLayoutGravity;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.LayoutAnimationCreateDuration LayoutAnimationCreateDuration;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.LayoutAnimationCreateTimingFunction LayoutAnimationCreateTimingFunction;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.LayoutAnimationCreateDelay LayoutAnimationCreateDelay;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.LayoutAnimationCreateProperty LayoutAnimationCreateProperty;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.LayoutAnimationDeleteDuration LayoutAnimationDeleteDuration;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.LayoutAnimationDeleteTimingFunction LayoutAnimationDeleteTimingFunction;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.LayoutAnimationDeleteDelay LayoutAnimationDeleteDelay;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.LayoutAnimationDeleteProperty LayoutAnimationDeleteProperty;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.LayoutAnimationUpdateDuration LayoutAnimationUpdateDuration;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.LayoutAnimationUpdateTimingFunction LayoutAnimationUpdateTimingFunction;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.LayoutAnimationUpdateDelay LayoutAnimationUpdateDelay;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.AdaptFontSize AdaptFontSize;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.AspectRatio AspectRatio;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.TextDecoration TextDecoration;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.TextShadow TextShadow;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.BackgroundImage BackgroundImage;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.BackgroundPosition BackgroundPosition;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.BackgroundOrigin BackgroundOrigin;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.BackgroundRepeat BackgroundRepeat;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.BackgroundSize BackgroundSize;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.Border Border;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.Visibility Visibility;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.BorderRight BorderRight;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.BorderLeft BorderLeft;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.BorderTop BorderTop;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.BorderBottom BorderBottom;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.Transition Transition;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.TransitionProperty TransitionProperty;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.TransitionDuration TransitionDuration;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.TransitionDelay TransitionDelay;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.TransitionTimingFunction TransitionTimingFunction;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.Content Content;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.BorderLeftStyle BorderLeftStyle;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.BorderRightStyle BorderRightStyle;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.BorderTopStyle BorderTopStyle;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.BorderBottomStyle BorderBottomStyle;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.ImplicitAnimation ImplicitAnimation;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.OverflowX OverflowX;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.OverflowY OverflowY;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.WordBreak WordBreak;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.BackgroundClip BackgroundClip;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.Outline Outline;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.OutlineColor OutlineColor;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.OutlineStyle OutlineStyle;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.OutlineWidth OutlineWidth;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.VerticalAlign VerticalAlign;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.CaretColor CaretColor;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.Direction Direction;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.RelativeId RelativeId;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.RelativeAlignTop RelativeAlignTop;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.RelativeAlignRight RelativeAlignRight;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.RelativeAlignBottom RelativeAlignBottom;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.RelativeAlignLeft RelativeAlignLeft;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.RelativeTopOf RelativeTopOf;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.RelativeRightOf RelativeRightOf;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.RelativeBottomOf RelativeBottomOf;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.RelativeLeftOf RelativeLeftOf;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.RelativeLayoutOnce RelativeLayoutOnce;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.RelativeCenter RelativeCenter;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.EnterTransitionName EnterTransitionName;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.ExitTransitionName ExitTransitionName;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.PauseTransitionName PauseTransitionName;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.ResumeTransitionName ResumeTransitionName;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.FlexFlow FlexFlow;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.ZIndex ZIndex;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.TextDecorationColor TextDecorationColor;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.LinearCrossGravity LinearCrossGravity;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.MarginInlineStart MarginInlineStart;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.MarginInlineEnd MarginInlineEnd;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.PaddingInlineStart PaddingInlineStart;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.PaddingInlineEnd PaddingInlineEnd;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.BorderInlineStartColor BorderInlineStartColor;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.BorderInlineEndColor BorderInlineEndColor;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.BorderInlineStartWidth BorderInlineStartWidth;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.BorderInlineEndWidth BorderInlineEndWidth;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.BorderInlineStartStyle BorderInlineStartStyle;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.BorderInlineEndStyle BorderInlineEndStyle;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.BorderStartStartRadius BorderStartStartRadius;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.BorderEndStartRadius BorderEndStartRadius;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.BorderStartEndRadius BorderStartEndRadius;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.BorderEndEndRadius BorderEndEndRadius;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.RelativeAlignInlineStart RelativeAlignInlineStart;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.RelativeAlignInlineEnd RelativeAlignInlineEnd;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.RelativeInlineStartOf RelativeInlineStartOf;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.RelativeInlineEndOf RelativeInlineEndOf;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.InsetInlineStart InsetInlineStart;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.InsetInlineEnd InsetInlineEnd;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.MaskImage MaskImage;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.GridTemplateColumns GridTemplateColumns;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.GridTemplateRows GridTemplateRows;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.GridAutoColumns GridAutoColumns;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.GridAutoRows GridAutoRows;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.GridColumnSpan GridColumnSpan;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.GridRowSpan GridRowSpan;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.GridColumnStart GridColumnStart;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.GridColumnEnd GridColumnEnd;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.GridRowStart GridRowStart;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.GridRowEnd GridRowEnd;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.GridColumnGap GridColumnGap;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.GridRowGap GridRowGap;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.JustifyItems JustifyItems;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.JustifySelf JustifySelf;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.GridAutoFlow GridAutoFlow;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.Filter Filter;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.ListMainAxisGap ListMainAxisGap;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.ListCrossAxisGap ListCrossAxisGap;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.LinearDirection LinearDirection;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.Perspective Perspective;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.Cursor Cursor;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.TextIndent TextIndent;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.ClipPath ClipPath;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.TextStroke TextStroke;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.TextStrokeWidth TextStrokeWidth;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.TextStrokeColor TextStrokeColor;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.XAutoFontSize XAutoFontSize;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.XAutoFontSizePresetSizes XAutoFontSizePresetSizes;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.Mask Mask;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.MaskRepeat MaskRepeat;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.MaskPosition MaskPosition;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.MaskClip MaskClip;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.MaskOrigin MaskOrigin;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.MaskSize MaskSize;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.Gap Gap;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.ColumnGap ColumnGap;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.RowGap RowGap;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.ImageRendering ImageRendering;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.Hyphens Hyphens;
  public final int com.lynx.tasm.behavior.PropertyIDConstants.XAppRegion XAppRegion;
}

public interface com::lynx::tasm::eventreport::LynxEventReporter::PropsBuilder {
  public Map< String, Object > com.lynx.tasm.eventreport.LynxEventReporter.PropsBuilder.build();
}

public class com::lynx::tasm::behavior::PropsConstants :  {
  public final String com.lynx.tasm.behavior.PropsConstants.FLATTEN FLATTEN;
  public final String com.lynx.tasm.behavior.PropsConstants.OVERFLOW OVERFLOW;
  public final String com.lynx.tasm.behavior.PropsConstants.BACKGROUND BACKGROUND;
  public final String com.lynx.tasm.behavior.PropsConstants.BACKGROUND_COLOR BACKGROUND_COLOR;
  public final String com.lynx.tasm.behavior.PropsConstants.BACKGROUND_IMAGE BACKGROUND_IMAGE;
  public final String com.lynx.tasm.behavior.PropsConstants.BACKGROUND_ORIGIN BACKGROUND_ORIGIN;
  public final String com.lynx.tasm.behavior.PropsConstants.BACKGROUND_POSITION BACKGROUND_POSITION;
  public final String com.lynx.tasm.behavior.PropsConstants.BACKGROUND_REPEAT BACKGROUND_REPEAT;
  public final String com.lynx.tasm.behavior.PropsConstants.BACKGROUND_SIZE BACKGROUND_SIZE;
  public final String com.lynx.tasm.behavior.PropsConstants.MASK_IMAGE MASK_IMAGE;
  public final String com.lynx.tasm.behavior.PropsConstants.MASK_ORIGIN MASK_ORIGIN;
  public final String com.lynx.tasm.behavior.PropsConstants.MASK_POSITION MASK_POSITION;
  public final String com.lynx.tasm.behavior.PropsConstants.MASK_REPEAT MASK_REPEAT;
  public final String com.lynx.tasm.behavior.PropsConstants.MASK_SIZE MASK_SIZE;
  public final String com.lynx.tasm.behavior.PropsConstants.MASK_CLIP MASK_CLIP;
  public final String com.lynx.tasm.behavior.PropsConstants.COLOR COLOR;
  public final String com.lynx.tasm.behavior.PropsConstants.TEXT_SHADOW TEXT_SHADOW;
  public final String com.lynx.tasm.behavior.PropsConstants.FONT_SIZE FONT_SIZE;
  public final String com.lynx.tasm.behavior.PropsConstants.ENABLE_FONT_SCALING ENABLE_FONT_SCALING;
  public final String com.lynx.tasm.behavior.PropsConstants.FONT_WEIGHT FONT_WEIGHT;
  public final String com.lynx.tasm.behavior.PropsConstants.FONT_STYLE FONT_STYLE;
  public final String com.lynx.tasm.behavior.PropsConstants.FONT_FAMILY FONT_FAMILY;
  public final String com.lynx.tasm.behavior.PropsConstants.LINE_HEIGHT LINE_HEIGHT;
  public final String com.lynx.tasm.behavior.PropsConstants.LETTER_SPACING LETTER_SPACING;
  public final String com.lynx.tasm.behavior.PropsConstants.LINE_SPACING LINE_SPACING;
  public final String com.lynx.tasm.behavior.PropsConstants.WHITE_SPACE WHITE_SPACE;
  public final String com.lynx.tasm.behavior.PropsConstants.INCLUDE_FONT_PADDING INCLUDE_FONT_PADDING;
  public final String com.lynx.tasm.behavior.PropsConstants.TEXT_OVERFLOW TEXT_OVERFLOW;
  public final String com.lynx.tasm.behavior.PropsConstants.TEXT_MAXLINE TEXT_MAXLINE;
  public final String com.lynx.tasm.behavior.PropsConstants.TEXT_MAXLENGTH TEXT_MAXLENGTH;
  public final String com.lynx.tasm.behavior.PropsConstants.SKIP_REDIRECTION SKIP_REDIRECTION;
  public final String com.lynx.tasm.behavior.PropsConstants.SKIP_PLACEHOLDER_REDIRECTION SKIP_PLACEHOLDER_REDIRECTION;
  public final String com.lynx.tasm.behavior.PropsConstants.SRC SRC;
  public final String com.lynx.tasm.behavior.PropsConstants.PLACEHOLDER PLACEHOLDER;
  public final String com.lynx.tasm.behavior.PropsConstants.MODE MODE;
  public final String com.lynx.tasm.behavior.PropsConstants.BLUR_RADIUS BLUR_RADIUS;
  public final String com.lynx.tasm.behavior.PropsConstants.AUTO_SIZE AUTO_SIZE;
  public final String com.lynx.tasm.behavior.PropsConstants.TEXT_ALIGN TEXT_ALIGN;
  public final String com.lynx.tasm.behavior.PropsConstants.TEXT_DECORATION TEXT_DECORATION;
  public final String com.lynx.tasm.behavior.PropsConstants.TEXT_STROKE_WIDTH TEXT_STROKE_WIDTH;
  public final String com.lynx.tasm.behavior.PropsConstants.TEXT_STROKE_COLOR TEXT_STROKE_COLOR;
  public final String com.lynx.tasm.behavior.PropsConstants.TEXT_FAKE_BOLD TEXT_FAKE_BOLD;
  public final String com.lynx.tasm.behavior.PropsConstants.OPACITY OPACITY;
  public final String com.lynx.tasm.behavior.PropsConstants.VISIBILITY VISIBILITY;
  public final String com.lynx.tasm.behavior.PropsConstants.BORDER_WIDTH BORDER_WIDTH;
  public final String com.lynx.tasm.behavior.PropsConstants.BORDER_LEFT_WIDTH BORDER_LEFT_WIDTH;
  public final String com.lynx.tasm.behavior.PropsConstants.BORDER_TOP_WIDTH BORDER_TOP_WIDTH;
  public final String com.lynx.tasm.behavior.PropsConstants.BORDER_RIGHT_WIDTH BORDER_RIGHT_WIDTH;
  public final String com.lynx.tasm.behavior.PropsConstants.BORDER_BOTTOM_WIDTH BORDER_BOTTOM_WIDTH;
  public final String com.lynx.tasm.behavior.PropsConstants.BORDER_RADIUS BORDER_RADIUS;
  public final String com.lynx.tasm.behavior.PropsConstants.BORDER_TOP_LEFT_RADIUS BORDER_TOP_LEFT_RADIUS;
  public final String com.lynx.tasm.behavior.PropsConstants.BORDER_TOP_RIGHT_RADIUS BORDER_TOP_RIGHT_RADIUS;
  public final String com.lynx.tasm.behavior.PropsConstants.BORDER_BOTTOM_LEFT_RADIUS BORDER_BOTTOM_LEFT_RADIUS;
  public final String com.lynx.tasm.behavior.PropsConstants.BORDER_BOTTOM_RIGHT_RADIUS BORDER_BOTTOM_RIGHT_RADIUS;
  public final String com.lynx.tasm.behavior.PropsConstants.BORDER_COLOR BORDER_COLOR;
  public final String com.lynx.tasm.behavior.PropsConstants.BORDER_LEFT_COLOR BORDER_LEFT_COLOR;
  public final String com.lynx.tasm.behavior.PropsConstants.BORDER_RIGHT_COLOR BORDER_RIGHT_COLOR;
  public final String com.lynx.tasm.behavior.PropsConstants.BORDER_TOP_COLOR BORDER_TOP_COLOR;
  public final String com.lynx.tasm.behavior.PropsConstants.BORDER_BOTTOM_COLOR BORDER_BOTTOM_COLOR;
  public final String com.lynx.tasm.behavior.PropsConstants.BORDER_STYLE BORDER_STYLE;
  public final String com.lynx.tasm.behavior.PropsConstants.BORDER_LEFT_STYLE BORDER_LEFT_STYLE;
  public final String com.lynx.tasm.behavior.PropsConstants.BORDER_RIGHT_STYLE BORDER_RIGHT_STYLE;
  public final String com.lynx.tasm.behavior.PropsConstants.BORDER_TOP_STYLE BORDER_TOP_STYLE;
  public final String com.lynx.tasm.behavior.PropsConstants.BORDER_BOTTOM_STYLE BORDER_BOTTOM_STYLE;
  public final String com.lynx.tasm.behavior.PropsConstants.BORDER BORDER;
  public final String com.lynx.tasm.behavior.PropsConstants.BORDER_LEFT BORDER_LEFT;
  public final String com.lynx.tasm.behavior.PropsConstants.BORDER_RIGHT BORDER_RIGHT;
  public final String com.lynx.tasm.behavior.PropsConstants.BORDER_TOP BORDER_TOP;
  public final String com.lynx.tasm.behavior.PropsConstants.BORDER_BOTTOM BORDER_BOTTOM;
  public final String com.lynx.tasm.behavior.PropsConstants.TRANSFORM TRANSFORM;
  public final String com.lynx.tasm.behavior.PropsConstants.TRANSLATE_X TRANSLATE_X;
  public final String com.lynx.tasm.behavior.PropsConstants.TRANSLATE_Y TRANSLATE_Y;
  public final String com.lynx.tasm.behavior.PropsConstants.TRANSLATE_Z TRANSLATE_Z;
  public final String com.lynx.tasm.behavior.PropsConstants.SCALE_X SCALE_X;
  public final String com.lynx.tasm.behavior.PropsConstants.SCALE_Y SCALE_Y;
  public final String com.lynx.tasm.behavior.PropsConstants.SCALE_Z SCALE_Z;
  public final String com.lynx.tasm.behavior.PropsConstants.ROTATE ROTATE;
  public final String com.lynx.tasm.behavior.PropsConstants.ROTATE_X ROTATE_X;
  public final String com.lynx.tasm.behavior.PropsConstants.ROTATE_Y ROTATE_Y;
  public final String com.lynx.tasm.behavior.PropsConstants.ROTATE_Z ROTATE_Z;
  public final String com.lynx.tasm.behavior.PropsConstants.SKEW_X SKEW_X;
  public final String com.lynx.tasm.behavior.PropsConstants.SKEW_Y SKEW_Y;
  public final String com.lynx.tasm.behavior.PropsConstants.ANIMATION ANIMATION;
  public final String com.lynx.tasm.behavior.PropsConstants.NUMBER_OF_LINES NUMBER_OF_LINES;
  public final String com.lynx.tasm.behavior.PropsConstants.WORD_BREAK_STRATEGY WORD_BREAK_STRATEGY;
  public final String com.lynx.tasm.behavior.PropsConstants.ALLOW_FONT_SCALING ALLOW_FONT_SCALING;
  public final String com.lynx.tasm.behavior.PropsConstants.BOX_SHADOW BOX_SHADOW;
  public final String com.lynx.tasm.behavior.PropsConstants.TRANSFORM_ORIGIN TRANSFORM_ORIGIN;
  public final String com.lynx.tasm.behavior.PropsConstants.NAME NAME;
  public final String com.lynx.tasm.behavior.PropsConstants.ID_SELECTOR ID_SELECTOR;
  public final String com.lynx.tasm.behavior.PropsConstants.REACT_REF_ID REACT_REF_ID;
  public final String com.lynx.tasm.behavior.PropsConstants.OVERFLOW_X OVERFLOW_X;
  public final String com.lynx.tasm.behavior.PropsConstants.OVERFLOW_Y OVERFLOW_Y;
  public final String com.lynx.tasm.behavior.PropsConstants.USER_INTERACTION_ENABLED USER_INTERACTION_ENABLED;
  public final String com.lynx.tasm.behavior.PropsConstants.NATIVE_INTERACTION_ENABLED NATIVE_INTERACTION_ENABLED;
  public final String com.lynx.tasm.behavior.PropsConstants.TEST_TAG TEST_TAG;
  public final String com.lynx.tasm.behavior.PropsConstants.BACKGROUND_CLIP BACKGROUND_CLIP;
  public final String com.lynx.tasm.behavior.PropsConstants.OUTLINE OUTLINE;
  public final String com.lynx.tasm.behavior.PropsConstants.OUTLINE_COLOR OUTLINE_COLOR;
  public final String com.lynx.tasm.behavior.PropsConstants.OUTLINE_STYLE OUTLINE_STYLE;
  public final String com.lynx.tasm.behavior.PropsConstants.OUTLINE_WIDTH OUTLINE_WIDTH;
  public final String com.lynx.tasm.behavior.PropsConstants.VERTICAL_ALIGN VERTICAL_ALIGN;
  public final String com.lynx.tasm.behavior.PropsConstants.REPEAT REPEAT;
  public final String com.lynx.tasm.behavior.PropsConstants.CLIP_TO_RADIUS CLIP_TO_RADIUS;
  public final String com.lynx.tasm.behavior.PropsConstants.COVER_START COVER_START;
  public final String com.lynx.tasm.behavior.PropsConstants.CARET_COLOR CARET_COLOR;
  public final String com.lynx.tasm.behavior.PropsConstants.FOCUSABLE FOCUSABLE;
  public final String com.lynx.tasm.behavior.PropsConstants.IGNORE_FOCUS IGNORE_FOCUS;
  public final String com.lynx.tasm.behavior.PropsConstants.ACCESSIBILITY_LABEL ACCESSIBILITY_LABEL;
  public final String com.lynx.tasm.behavior.PropsConstants.ACCESSIBILITY_ELEMENT ACCESSIBILITY_ELEMENT;
  public final String com.lynx.tasm.behavior.PropsConstants.ACCESSIBILITY_ENABLE_TAP ACCESSIBILITY_ENABLE_TAP;
  public final String com.lynx.tasm.behavior.PropsConstants.ACCESSIBILITY_ELEMENTS ACCESSIBILITY_ELEMENTS;
  public final String com.lynx.tasm.behavior.PropsConstants.ACCESSIBILITY_ID ACCESSIBILITY_ID;
  public final String com.lynx.tasm.behavior.PropsConstants.ACCESSIBILITY_ELEMENTS_A11Y ACCESSIBILITY_ELEMENTS_A11Y;
  public final String com.lynx.tasm.behavior.PropsConstants.ACCESSIBILITY_EXCLUSIVE_FOCUS ACCESSIBILITY_EXCLUSIVE_FOCUS;
  public final String com.lynx.tasm.behavior.PropsConstants.ACCESSIBILITY_ELEMENTS_HIDDEN ACCESSIBILITY_ELEMENTS_HIDDEN;
  public final String com.lynx.tasm.behavior.PropsConstants.ACCESSIBILITY_ACTIONS ACCESSIBILITY_ACTIONS;
  public final String com.lynx.tasm.behavior.PropsConstants.CONSUME_HOVER_EVENT CONSUME_HOVER_EVENT;
  public final String com.lynx.tasm.behavior.PropsConstants.ACCESSIBILITY_TRAITS ACCESSIBILITY_TRAITS;
  public final String com.lynx.tasm.behavior.PropsConstants.ACCESSIBILITY_VALUE ACCESSIBILITY_VALUE;
  public final String com.lynx.tasm.behavior.PropsConstants.ACCESSIBILITY_STATUS ACCESSIBILITY_STATUS;
  public final String com.lynx.tasm.behavior.PropsConstants.ACCESSIBILITY_HEADING ACCESSIBILITY_HEADING;
  public final String com.lynx.tasm.behavior.PropsConstants.ACCESSIBILITY_ROLE_DESCRIPTION ACCESSIBILITY_ROLE_DESCRIPTION;
  public final String com.lynx.tasm.behavior.PropsConstants.ANDROID_ACCESSIBILITY_KEEP_FOCUSED ANDROID_ACCESSIBILITY_KEEP_FOCUSED;
  public final String com.lynx.tasm.behavior.PropsConstants.SHARED_ELEMENT SHARED_ELEMENT;
  public final String com.lynx.tasm.behavior.PropsConstants.ENTER_TRANSITION_NAME ENTER_TRANSITION_NAME;
  public final String com.lynx.tasm.behavior.PropsConstants.EXIT_TRANSITION_NAME EXIT_TRANSITION_NAME;
  public final String com.lynx.tasm.behavior.PropsConstants.RESUME_TRANSITION_NAME RESUME_TRANSITION_NAME;
  public final String com.lynx.tasm.behavior.PropsConstants.PAUSE_TRANSITION_NAME PAUSE_TRANSITION_NAME;
  public final String com.lynx.tasm.behavior.PropsConstants.CAP_INSETS CAP_INSETS;
  public final String com.lynx.tasm.behavior.PropsConstants.CAP_INSETS_BACKUP CAP_INSETS_BACKUP;
  public final String com.lynx.tasm.behavior.PropsConstants.CAP_INSETS_SCALE CAP_INSETS_SCALE;
  public final String com.lynx.tasm.behavior.PropsConstants.LOOP_COUNT LOOP_COUNT;
  public final String com.lynx.tasm.behavior.PropsConstants.Z_INDEX Z_INDEX;
  public final String com.lynx.tasm.behavior.PropsConstants.OVERLAP OVERLAP;
  public final String com.lynx.tasm.behavior.PropsConstants.IMAGE_SUBSAMPLE IMAGE_SUBSAMPLE;
  public final String com.lynx.tasm.behavior.PropsConstants.PRE_FETCH_WIDTH PRE_FETCH_WIDTH;
  public final String com.lynx.tasm.behavior.PropsConstants.PRE_FETCH_HEIGHT PRE_FETCH_HEIGHT;
  public final String com.lynx.tasm.behavior.PropsConstants.LOCAL_CACHE LOCAL_CACHE;
  public final String com.lynx.tasm.behavior.PropsConstants.ITEM_KEY ITEM_KEY;
  public final String com.lynx.tasm.behavior.PropsConstants.DISABLE_DEFAULT_PLACEHOLDER DISABLE_DEFAULT_PLACEHOLDER;
  public final String com.lynx.tasm.behavior.PropsConstants.FRESCO_VISIBLE FRESCO_VISIBLE;
  public final String com.lynx.tasm.behavior.PropsConstants.FRESCO_ATTACH FRESCO_ATTACH;
  public final String com.lynx.tasm.behavior.PropsConstants.IAMGE_CONFIG IAMGE_CONFIG;
  public final String com.lynx.tasm.behavior.PropsConstants.ENABLE_DETACHED_CLEAR ENABLE_DETACHED_CLEAR;
  public final String com.lynx.tasm.behavior.PropsConstants.FRESCO_NINE_PATCH FRESCO_NINE_PATCH;
  public final String com.lynx.tasm.behavior.PropsConstants.POSITION POSITION;
  public final String com.lynx.tasm.behavior.PropsConstants.ENABLE_SCROLL_MONITOR ENABLE_SCROLL_MONITOR;
  public final String com.lynx.tasm.behavior.PropsConstants.SCROLL_MONITOR_TAG SCROLL_MONITOR_TAG;
  public final String com.lynx.tasm.behavior.PropsConstants.DRIECTION DRIECTION;
  public final String com.lynx.tasm.behavior.PropsConstants.DATASET DATASET;
  public final String com.lynx.tasm.behavior.PropsConstants.CONSUME_ANDROID_EVENTS CONSUME_ANDROID_EVENTS;
  public final String com.lynx.tasm.behavior.PropsConstants.FIX_FRESCO_BUG FIX_FRESCO_BUG;
  public final String com.lynx.tasm.behavior.PropsConstants.INTERSECTION_OBSERVERS INTERSECTION_OBSERVERS;
  public final String com.lynx.tasm.behavior.PropsConstants.CONSUME_SLIDE_EVENT CONSUME_SLIDE_EVENT;
  public final String com.lynx.tasm.behavior.PropsConstants.BLOCK_NATIVE_EVENT BLOCK_NATIVE_EVENT;
  public final String com.lynx.tasm.behavior.PropsConstants.BLOCK_NATIVE_EVENT_AREAS BLOCK_NATIVE_EVENT_AREAS;
  public final String com.lynx.tasm.behavior.PropsConstants.ENABLE_TOUCH_PSEUDO_PROPAGATION ENABLE_TOUCH_PSEUDO_PROPAGATION;
  public final String com.lynx.tasm.behavior.PropsConstants.FILTER FILTER;
  public final String com.lynx.tasm.behavior.PropsConstants.EXPOSURE_ID EXPOSURE_ID;
  public final String com.lynx.tasm.behavior.PropsConstants.EXPOSURE_SCENE EXPOSURE_SCENE;
  public final String com.lynx.tasm.behavior.PropsConstants.EXPOSURE_SCREEN_MARGIN_TOP EXPOSURE_SCREEN_MARGIN_TOP;
  public final String com.lynx.tasm.behavior.PropsConstants.EXPOSURE_SCREEN_MARGIN_BOTTOM EXPOSURE_SCREEN_MARGIN_BOTTOM;
  public final String com.lynx.tasm.behavior.PropsConstants.EXPOSURE_SCREEN_MARGIN_LEFT EXPOSURE_SCREEN_MARGIN_LEFT;
  public final String com.lynx.tasm.behavior.PropsConstants.EXPOSURE_SCREEN_MARGIN_RIGHT EXPOSURE_SCREEN_MARGIN_RIGHT;
  public final String com.lynx.tasm.behavior.PropsConstants.ENABLE_EXPOSURE_UI_MARGIN ENABLE_EXPOSURE_UI_MARGIN;
  public final String com.lynx.tasm.behavior.PropsConstants.EXPOSURE_UI_MARGIN_TOP EXPOSURE_UI_MARGIN_TOP;
  public final String com.lynx.tasm.behavior.PropsConstants.EXPOSURE_UI_MARGIN_BOTTOM EXPOSURE_UI_MARGIN_BOTTOM;
  public final String com.lynx.tasm.behavior.PropsConstants.EXPOSURE_UI_MARGIN_LEFT EXPOSURE_UI_MARGIN_LEFT;
  public final String com.lynx.tasm.behavior.PropsConstants.EXPOSURE_UI_MARGIN_RIGHT EXPOSURE_UI_MARGIN_RIGHT;
  public final String com.lynx.tasm.behavior.PropsConstants.EXPOSURE_AREA EXPOSURE_AREA;
  public final String com.lynx.tasm.behavior.PropsConstants.ENABLE_EXPOSURE_UI_CLIP ENABLE_EXPOSURE_UI_CLIP;
  public final String com.lynx.tasm.behavior.PropsConstants.SUSPENDABLE SUSPENDABLE;
  public final String com.lynx.tasm.behavior.PropsConstants.PERSPECTIVE PERSPECTIVE;
  public final String com.lynx.tasm.behavior.PropsConstants.RENDER_TO_HARDWARE_TEXTURE RENDER_TO_HARDWARE_TEXTURE;
  public final String com.lynx.tasm.behavior.PropsConstants.BITMAP_GRADIENT BITMAP_GRADIENT;
  public final String com.lynx.tasm.behavior.PropsConstants.TEXT_INDENT TEXT_INDENT;
  public final String com.lynx.tasm.behavior.PropsConstants.ANDROID_EMOJI_COMPAT ANDROID_EMOJI_COMPAT;
  public final String com.lynx.tasm.behavior.PropsConstants.TRANSFORM_ORDER TRANSFORM_ORDER;
  public final String com.lynx.tasm.behavior.PropsConstants.EVENT_THROUGH EVENT_THROUGH;
  public final String com.lynx.tasm.behavior.PropsConstants.DISABLE_DEFAULT_RESIZE DISABLE_DEFAULT_RESIZE;
  public final String com.lynx.tasm.behavior.PropsConstants.DEFER_SRC_INVALIDATION DEFER_SRC_INVALIDATION;
  public final String com.lynx.tasm.behavior.PropsConstants.AUTO_PLAY AUTO_PLAY;
  public final String com.lynx.tasm.behavior.PropsConstants.ANDROID_IMAGE_SIMPLE_KEY ANDROID_IMAGE_SIMPLE_KEY;
  public final String com.lynx.tasm.behavior.PropsConstants.TINT_COLOR TINT_COLOR;
  public final String com.lynx.tasm.behavior.PropsConstants.ENABLE_REUSE_ANIMATION_STATE ENABLE_REUSE_ANIMATION_STATE;
  public final String com.lynx.tasm.behavior.PropsConstants.LIST LIST;
  public final String com.lynx.tasm.behavior.PropsConstants.HYPHENS HYPHENS;
  public final String com.lynx.tasm.behavior.PropsConstants.TEXT TEXT;
  public final String com.lynx.tasm.behavior.PropsConstants.OFFSET_DISTANCE OFFSET_DISTANCE;
  public final String com.lynx.tasm.behavior.PropsConstants.OFFSET_PATH OFFSET_PATH;
  public final String com.lynx.tasm.behavior.PropsConstants.OFFSET_ROTATE OFFSET_ROTATE;
  public final String com.lynx.tasm.behavior.PropsConstants.ANDROID_ENABLE_TRANSFORM_PROPS ANDROID_ENABLE_TRANSFORM_PROPS;
  public final String com.lynx.tasm.behavior.PropsConstants.IMAGE_TRANSITION_STYLE IMAGE_TRANSITION_STYLE;
  public final String com.lynx.tasm.behavior.PropsConstants.X_AUTO_FONT_SIZE X_AUTO_FONT_SIZE;
  public final String com.lynx.tasm.behavior.PropsConstants.X_AUTO_FONT_SIZE_PRESET_SIZES X_AUTO_FONT_SIZE_PRESET_SIZES;
  public final String com.lynx.tasm.behavior.PropsConstants.EXTRA_LOAD_INFO EXTRA_LOAD_INFO;
  public final String com.lynx.tasm.behavior.PropsConstants.HIT_SLOP HIT_SLOP;
  public final String com.lynx.tasm.behavior.PropsConstants.HIT_SLOP_TOP HIT_SLOP_TOP;
  public final String com.lynx.tasm.behavior.PropsConstants.HIT_SLOP_BOTTOM HIT_SLOP_BOTTOM;
  public final String com.lynx.tasm.behavior.PropsConstants.HIT_SLOP_LEFT HIT_SLOP_LEFT;
  public final String com.lynx.tasm.behavior.PropsConstants.HIT_SLOP_RIGHT HIT_SLOP_RIGHT;
  public final String com.lynx.tasm.behavior.PropsConstants.IMAGE_RENDERING IMAGE_RENDERING;
  public final String com.lynx.tasm.behavior.PropsConstants.ENABLE_RESOURCE_HINT ENABLE_RESOURCE_HINT;
  public final String com.lynx.tasm.behavior.PropsConstants.ENABLE_CUSTOM_GIF_DECODER ENABLE_CUSTOM_GIF_DECODER;
  public final String com.lynx.tasm.behavior.PropsConstants.ENABLE_IMAGE_ASYNC_REQUEST ENABLE_IMAGE_ASYNC_REQUEST;
  public final String com.lynx.tasm.behavior.PropsConstants.IMAGE_PRIORITY IMAGE_PRIORITY;
  public final String com.lynx.tasm.behavior.PropsConstants.IMAGE_CACHE_CHOICE IMAGE_CACHE_CHOICE;
  public final String com.lynx.tasm.behavior.PropsConstants.IMAGE_PLACE_HOLDER_HASH_CONFIG IMAGE_PLACE_HOLDER_HASH_CONFIG;
}

public class com::lynx::tasm::behavior::utils::PropsHolderAutoRegister :  {
  public boolean com.lynx.tasm.behavior.utils.PropsHolderAutoRegister.sHasRegistered sHasRegistered;
  public static void com.lynx.tasm.behavior.utils.PropsHolderAutoRegister.registerLynxUISetter(LynxUISetter settable);
  public static void com.lynx.tasm.behavior.utils.PropsHolderAutoRegister.registerShadowNodeSetter(ShadowNodeSetter settable);
  public static void com.lynx.tasm.behavior.utils.PropsHolderAutoRegister.init();
}

public class com::lynx::tasm::behavior::utils::PropsUpdater :  {
  public static void com.lynx.tasm.behavior.utils.PropsUpdater.registerSetter(Settable settable);
  public static void com.lynx.tasm.behavior.utils.PropsUpdater.clear();
  public static void com.lynx.tasm.behavior.utils.PropsUpdater.updateProps(LynxBaseUI lynxUI, StylesDiffMap props);
  public static< T extends ShadowNode > void com.lynx.tasm.behavior.utils.PropsUpdater.updateProps(T node, StylesDiffMap props);
}

public class com::lynx::tasm::behavior::shadow::text::RawTextShadowNode : com.lynx.tasm.behavior.shadow.ShadowNode {
  public com.lynx.tasm.behavior.shadow.text.RawTextShadowNode.RawTextShadowNode();
  public void com.lynx.tasm.behavior.shadow.text.RawTextShadowNode.setText(@Nullable Dynamic text);
  public void com.lynx.tasm.behavior.shadow.text.RawTextShadowNode.setPsuedo(@Nullable boolean isPseudo);
  public String com.lynx.tasm.behavior.shadow.text.RawTextShadowNode.getText();
  public boolean com.lynx.tasm.behavior.shadow.text.RawTextShadowNode.isVirtual();
  public String com.lynx.tasm.behavior.shadow.text.RawTextShadowNode.toString();
  public boolean com.lynx.tasm.behavior.shadow.text.RawTextShadowNode.isPseudo();
}

public interface com::lynx::react::bridge::ReadableArray {
  public int com.lynx.react.bridge.ReadableArray.size();
  public boolean com.lynx.react.bridge.ReadableArray.isNull(int index);
  public boolean com.lynx.react.bridge.ReadableArray.getBoolean(int index);
  public double com.lynx.react.bridge.ReadableArray.getDouble(int index);
  public byte com.lynx.react.bridge.ReadableArray.getByte(int index);
  public short com.lynx.react.bridge.ReadableArray.getShort(int index);
  public long com.lynx.react.bridge.ReadableArray.getLong(int index);
  public char com.lynx.react.bridge.ReadableArray.getChar(int index);
  public int com.lynx.react.bridge.ReadableArray.getInt(int index);
  public String com.lynx.react.bridge.ReadableArray.getString(int index);
  public ReadableArray com.lynx.react.bridge.ReadableArray.getArray(int index);
  public ReadableMap com.lynx.react.bridge.ReadableArray.getMap(int index);
  public byte[] com.lynx.react.bridge.ReadableArray.getByteArray(int index);
  public PiperData com.lynx.react.bridge.ReadableArray.getPiperData(int index);
  public Dynamic com.lynx.react.bridge.ReadableArray.getDynamic(int index);
  public ReadableType com.lynx.react.bridge.ReadableArray.getType(int index);
  public ArrayList< Object > com.lynx.react.bridge.ReadableArray.toArrayList();
  public ArrayList< Object > com.lynx.react.bridge.ReadableArray.asArrayList();
}

public class abstract com::lynx::react::bridge::mapbuffer::ReadableBaseBuffer :  {
  public int com.lynx.react.bridge.mapbuffer.ReadableBaseBuffer.count();
  public boolean com.lynx.react.bridge.mapbuffer.ReadableBaseBuffer.equals(Object o);
  public int com.lynx.react.bridge.mapbuffer.ReadableBaseBuffer.hashCode();
}

public class com::lynx::react::bridge::mapbuffer::ReadableCompactArrayBuffer : com.lynx.react.bridge.mapbuffer.ReadableBaseBuffer, com.lynx.react.bridge.mapbuffer.CompactArrayBuffer {
  public static ReadableCompactArrayBuffer com.lynx.react.bridge.mapbuffer.ReadableCompactArrayBuffer.fromByteBufferWithCount(byte[] bytes, int count);
  public int com.lynx.react.bridge.mapbuffer.ReadableCompactArrayBuffer.getInt(int index);
  public long com.lynx.react.bridge.mapbuffer.ReadableCompactArrayBuffer.getLong(int index);
  public double com.lynx.react.bridge.mapbuffer.ReadableCompactArrayBuffer.getDouble(int index);
  public String com.lynx.react.bridge.mapbuffer.ReadableCompactArrayBuffer.getString(int index);
  public Iterator< CompactArrayBuffer.Entry > com.lynx.react.bridge.mapbuffer.ReadableCompactArrayBuffer.iterator();
}

public interface com::lynx::react::bridge::ReadableMap {
  public boolean com.lynx.react.bridge.ReadableMap.hasKey(String name);
  public boolean com.lynx.react.bridge.ReadableMap.isNull(String name);
  public boolean com.lynx.react.bridge.ReadableMap.getBoolean(String name);
  public double com.lynx.react.bridge.ReadableMap.getDouble(String name);
  public int com.lynx.react.bridge.ReadableMap.getInt(String name);
  public long com.lynx.react.bridge.ReadableMap.getLong(String name);
  public String com.lynx.react.bridge.ReadableMap.getString(String name);
  public ReadableArray com.lynx.react.bridge.ReadableMap.getArray(String name);
  public ReadableMap com.lynx.react.bridge.ReadableMap.getMap(String name);
  public byte[] com.lynx.react.bridge.ReadableMap.getByteArray(String name);
  public PiperData com.lynx.react.bridge.ReadableMap.getPiperData(String name);
  public ByteBuffer com.lynx.react.bridge.ReadableMap.getByteBuffer(String name);
  public boolean com.lynx.react.bridge.ReadableMap.getBoolean(String name, boolean defaultValue);
  public double com.lynx.react.bridge.ReadableMap.getDouble(String name, double defaultValue);
  public int com.lynx.react.bridge.ReadableMap.getInt(String name, int defaultValue);
  public long com.lynx.react.bridge.ReadableMap.getLong(String name, long defaultValue);
  public String com.lynx.react.bridge.ReadableMap.getString(String name, String defaultValue);
  public ReadableArray com.lynx.react.bridge.ReadableMap.getArray(String name, ReadableArray defaultValue);
  public ReadableMap com.lynx.react.bridge.ReadableMap.getMap(String name, ReadableMap defaultValue);
  public byte[] com.lynx.react.bridge.ReadableMap.getByteArray(String name, byte[] defaultValue);
  public PiperData com.lynx.react.bridge.ReadableMap.getPiperData(String name, PiperData defaultValue);
  public Dynamic com.lynx.react.bridge.ReadableMap.getDynamic(String name);
  public ReadableType com.lynx.react.bridge.ReadableMap.getType(String name);
  public ReadableMapKeySetIterator com.lynx.react.bridge.ReadableMap.keySetIterator();
  public HashMap< String, Object > com.lynx.react.bridge.ReadableMap.toHashMap();
  public HashMap< String, Object > com.lynx.react.bridge.ReadableMap.asHashMap();
  public int com.lynx.react.bridge.ReadableMap.size();
}

public class com::lynx::react::bridge::mapbuffer::ReadableMapBuffer : com.lynx.react.bridge.mapbuffer.ReadableBaseBuffer, com.lynx.react.bridge.mapbuffer.MapBuffer {
  public final int com.lynx.react.bridge.mapbuffer.ReadableMapBuffer.INDEX_UN_EXISTED INDEX_UN_EXISTED;
  public boolean com.lynx.react.bridge.mapbuffer.ReadableMapBuffer.contains(int key);
  public int com.lynx.react.bridge.mapbuffer.ReadableMapBuffer.getKeyOffset(int key);
  public MapBuffer.Entry com.lynx.react.bridge.mapbuffer.ReadableMapBuffer.entryAt(int offset);
  public DataType com.lynx.react.bridge.mapbuffer.ReadableMapBuffer.getType(int key);
  public int com.lynx.react.bridge.mapbuffer.ReadableMapBuffer.getInt(int key);
  public int com.lynx.react.bridge.mapbuffer.ReadableMapBuffer.getInt(int key, int defaultValue);
  public long com.lynx.react.bridge.mapbuffer.ReadableMapBuffer.getLong(int key);
  public long com.lynx.react.bridge.mapbuffer.ReadableMapBuffer.getLong(int key, long defaultValue);
  public double com.lynx.react.bridge.mapbuffer.ReadableMapBuffer.getDouble(int key);
  public double com.lynx.react.bridge.mapbuffer.ReadableMapBuffer.getDouble(int key, double defaultValue);
  public String com.lynx.react.bridge.mapbuffer.ReadableMapBuffer.getString(int key);
  public String com.lynx.react.bridge.mapbuffer.ReadableMapBuffer.getString(int key, String defaultValue);
  public boolean com.lynx.react.bridge.mapbuffer.ReadableMapBuffer.getBoolean(int key);
  public boolean com.lynx.react.bridge.mapbuffer.ReadableMapBuffer.getBoolean(int key, boolean defaultValue);
  public ReadableMapBuffer com.lynx.react.bridge.mapbuffer.ReadableMapBuffer.getMapBuffer(int key);
  public List< MapBuffer > com.lynx.react.bridge.mapbuffer.ReadableMapBuffer.getMapBufferList(int key);
  public Iterator< MapBuffer.Entry > com.lynx.react.bridge.mapbuffer.ReadableMapBuffer.iterator();
}

public class com::lynx::react::bridge::mapbuffer::ReadableMapBufferWrapper : com.lynx.react.bridge.ReadableArray {
  public com.lynx.react.bridge.mapbuffer.ReadableMapBufferWrapper.ReadableMapBufferWrapper(MapBuffer mapBuffer);
  public boolean com.lynx.react.bridge.mapbuffer.ReadableMapBufferWrapper.isNull(int key);
  public boolean com.lynx.react.bridge.mapbuffer.ReadableMapBufferWrapper.getBoolean(int key);
  public double com.lynx.react.bridge.mapbuffer.ReadableMapBufferWrapper.getDouble(int key);
  public byte com.lynx.react.bridge.mapbuffer.ReadableMapBufferWrapper.getByte(int index);
  public short com.lynx.react.bridge.mapbuffer.ReadableMapBufferWrapper.getShort(int index);
  public int com.lynx.react.bridge.mapbuffer.ReadableMapBufferWrapper.getInt(int key);
  public long com.lynx.react.bridge.mapbuffer.ReadableMapBufferWrapper.getLong(int key);
  public char com.lynx.react.bridge.mapbuffer.ReadableMapBufferWrapper.getChar(int index);
  public String com.lynx.react.bridge.mapbuffer.ReadableMapBufferWrapper.getString(int key);
  public ReadableArray com.lynx.react.bridge.mapbuffer.ReadableMapBufferWrapper.getArray(int key);
  public ReadableMap com.lynx.react.bridge.mapbuffer.ReadableMapBufferWrapper.getMap(int key);
  public byte[] com.lynx.react.bridge.mapbuffer.ReadableMapBufferWrapper.getByteArray(int key);
  public PiperData com.lynx.react.bridge.mapbuffer.ReadableMapBufferWrapper.getPiperData(int key);
  public Dynamic com.lynx.react.bridge.mapbuffer.ReadableMapBufferWrapper.getDynamic(int key);
  public ReadableType com.lynx.react.bridge.mapbuffer.ReadableMapBufferWrapper.getType(int key);
  public ArrayList< Object > com.lynx.react.bridge.mapbuffer.ReadableMapBufferWrapper.toArrayList();
  public ArrayList< Object > com.lynx.react.bridge.mapbuffer.ReadableMapBufferWrapper.asArrayList();
  public int com.lynx.react.bridge.mapbuffer.ReadableMapBufferWrapper.size();
}

public interface com::lynx::react::bridge::ReadableMapKeySetIterator {
  public boolean com.lynx.react.bridge.ReadableMapKeySetIterator.hasNextKey();
  public String com.lynx.react.bridge.ReadableMapKeySetIterator.nextKey();
}

public class com::lynx::tasm::utils::ReadableMapUtils :  {
  public static Map< String, String > com.lynx.tasm.utils.ReadableMapUtils.ConvertReadableMapToStringStringMap(ReadableMap params);
}

public enum com::lynx::react::bridge::ReadableType {
  public com.lynx.react.bridge.ReadableType.Null Null;
  public com.lynx.react.bridge.ReadableType.Boolean Boolean;
  public com.lynx.react.bridge.ReadableType.Int Int;
  public com.lynx.react.bridge.ReadableType.Number Number;
  public com.lynx.react.bridge.ReadableType.String String;
  public com.lynx.react.bridge.ReadableType.Map Map;
  public com.lynx.react.bridge.ReadableType.Array Array;
  public com.lynx.react.bridge.ReadableType.Long Long;
  public com.lynx.react.bridge.ReadableType.ByteArray ByteArray;
  public com.lynx.react.bridge.ReadableType.PiperData PiperData;
  public com.lynx.react.bridge.ReadableType.LynxObject LynxObject;
  public com.lynx.react.bridge.ReadableType.ByteBuffer ByteBuffer;
}

public class com::lynx::tasm::performance::performanceobserver::ReloadBundleEntry : com.lynx.tasm.performance.performanceobserver.PipelineEntry {
  public double com.lynx.tasm.performance.performanceobserver.ReloadBundleEntry.reloadBundleStart reloadBundleStart;
  public double com.lynx.tasm.performance.performanceobserver.ReloadBundleEntry.reloadBundleEnd reloadBundleEnd;
  public double com.lynx.tasm.performance.performanceobserver.ReloadBundleEntry.reloadBackgroundStart reloadBackgroundStart;
  public double com.lynx.tasm.performance.performanceobserver.ReloadBundleEntry.reloadBackgroundEnd reloadBackgroundEnd;
  public double com.lynx.tasm.performance.performanceobserver.ReloadBundleEntry.ffiStart ffiStart;
  public double com.lynx.tasm.performance.performanceobserver.ReloadBundleEntry.ffiEnd ffiEnd;
  public com.lynx.tasm.performance.performanceobserver.ReloadBundleEntry.ReloadBundleEntry(HashMap< String, Object > props);
}

public class abstract com::lynx::tasm::rendernode::compat::RenderNodeCompat :  {
  public com.lynx.tasm.rendernode.compat.RenderNodeCompat.RenderNodeCompat();
  public abstract void com.lynx.tasm.rendernode.compat.RenderNodeCompat.init();
  public abstract boolean com.lynx.tasm.rendernode.compat.RenderNodeCompat.hasDisplayList();
  public abstract void com.lynx.tasm.rendernode.compat.RenderNodeCompat.setPosition(int left, int top, int right, int bottom);
  public abstract Canvas com.lynx.tasm.rendernode.compat.RenderNodeCompat.beginRecording(int width, int height);
  public abstract void com.lynx.tasm.rendernode.compat.RenderNodeCompat.drawRenderNode(Canvas canvas);
  public abstract void com.lynx.tasm.rendernode.compat.RenderNodeCompat.drawRenderNode(Canvas renderCanvas, Object renderNode);
  public abstract void com.lynx.tasm.rendernode.compat.RenderNodeCompat.endRecording(Canvas canvas);
  public abstract Object com.lynx.tasm.rendernode.compat.RenderNodeCompat.getRenderNode();
  public static void com.lynx.tasm.rendernode.compat.RenderNodeCompat.enable(boolean enable);
  public static boolean com.lynx.tasm.rendernode.compat.RenderNodeCompat.supportRenderNode();
}

public class com::lynx::tasm::rendernode::compat::RenderNodeFactory :  {
  public static RenderNodeFactory com.lynx.tasm.rendernode.compat.RenderNodeFactory.getInstance();
  public RenderNodeCompat com.lynx.tasm.rendernode.compat.RenderNodeFactory.createRenderNodeCompat();
}

public class com::lynx::tasm::rendernode::compat::RenderNodeImpl : com.lynx.tasm.rendernode.compat.RenderNodeCompat {
  public void com.lynx.tasm.rendernode.compat.RenderNodeImpl.init();
  public void com.lynx.tasm.rendernode.compat.RenderNodeImpl.drawRenderNode(Canvas canvas);
  public void com.lynx.tasm.rendernode.compat.RenderNodeImpl.drawRenderNode(Canvas renderCanvas, Object renderNode);
  public void com.lynx.tasm.rendernode.compat.RenderNodeImpl.setPosition(int left, int top, int right, int bottom);
  public RecordingCanvas com.lynx.tasm.rendernode.compat.RenderNodeImpl.beginRecording(int width, int height);
  public void com.lynx.tasm.rendernode.compat.RenderNodeImpl.endRecording(Canvas canvas);
  public Object com.lynx.tasm.rendernode.compat.RenderNodeImpl.getRenderNode();
  public boolean com.lynx.tasm.rendernode.compat.RenderNodeImpl.hasDisplayList();
}

public interface com::lynx::tasm::LynxTemplateRender::RenderPhaseName {
}

public interface com::lynx::tasm::provider::LynxResRequest::ReqMethod {
}

public class com::lynx::tasm::core::ResManager :  {
  public final String com.lynx.tasm.core.ResManager.HTTP_SCHEME HTTP_SCHEME;
  public final String com.lynx.tasm.core.ResManager.HTTPS_SCHEME HTTPS_SCHEME;
  public final String com.lynx.tasm.core.ResManager.LOCAL_ASSET_SCHEME LOCAL_ASSET_SCHEME;
  public final String com.lynx.tasm.core.ResManager.LOCAL_RESOURCE_SCHEME LOCAL_RESOURCE_SCHEME;
  public final String com.lynx.tasm.core.ResManager.FILE_SCHEME FILE_SCHEME;
  public static ResManager com.lynx.tasm.core.ResManager.inst();
  public LynxResResponse com.lynx.tasm.core.ResManager.requestResourceSync(@NonNull LynxResRequest request);
  public void com.lynx.tasm.core.ResManager.requestResource(final @NonNull LynxResRequest request, @NonNull final LynxResCallback callback);
  public Integer com.lynx.tasm.core.ResManager.findResId(Context context, @Nullable String name);
}

public class com::lynx::tasm::core::ResourceLoader :  {
  public byte[] com.lynx.tasm.core.ResourceLoader.loadLynxJSAsset(String name);
}

public class abstract com::lynx::ref::ResourceReleaser :  {
}

public enum com::lynx::tasm::resourceprovider::LynxResourceResponse::ResponseState {
  public com.lynx.tasm.resourceprovider.LynxResourceResponse< T >.ResponseState.FAILED FAILED;
  public com.lynx.tasm.resourceprovider.LynxResourceResponse< T >.ResponseState.SUCCESS SUCCESS;
}

public interface com::lynx::tasm::provider::ResProvider {
  public void com.lynx.tasm.provider.ResProvider.request(@NonNull final LynxResRequest requestParams, final LynxResCallback callback);
}

public class com::lynx::tasm::behavior::ui::utils::BackgroundDrawable::RoundRectPath :  {
  public RectF com.lynx.tasm.behavior.ui.utils.BackgroundDrawable.RoundRectPath.rect rect;
  public float [] com.lynx.tasm.behavior.ui.utils.BackgroundDrawable.RoundRectPath.radius radius;
  public Path com.lynx.tasm.behavior.ui.utils.BackgroundDrawable.RoundRectPath.path path;
  public boolean com.lynx.tasm.behavior.ui.utils.BackgroundDrawable.RoundRectPath.allCornersWithSameRadius allCornersWithSameRadius;
  public void com.lynx.tasm.behavior.ui.utils.BackgroundDrawable.RoundRectPath.updateValue(Rect bounds, float[] borderRadius, RectF borderWidth, float mul, boolean center);
  public void com.lynx.tasm.behavior.ui.utils.BackgroundDrawable.RoundRectPath.drawToCanvas(Canvas canvas, Paint paint);
  public static float[] com.lynx.tasm.behavior.ui.utils.BackgroundDrawable.RoundRectPath.newBorderRadius(float[] borderRadius, RectF borderWidth, float mul);
  public static float[] com.lynx.tasm.behavior.ui.utils.BackgroundDrawable.RoundRectPath.newCenterBorderRadius(float[] borderRadius, RectF borderWidth, float mul);
  public static boolean com.lynx.tasm.behavior.ui.utils.BackgroundDrawable.RoundRectPath.checkAllCornersWithSameRadius(float[] radius);
}

public interface com::lynx::jsbridge::RuntimeLifecycleListener {
  public void com.lynx.jsbridge.RuntimeLifecycleListener.onRuntimeAttach(long napiEnv);
  public void com.lynx.jsbridge.RuntimeLifecycleListener.onRuntimeDetach();
}

public class com::lynx::jsbridge::RuntimeLifecycleListenerDelegate : com.lynx.jsbridge.RuntimeLifecycleListener {
  public com.lynx.jsbridge.RuntimeLifecycleListenerDelegate.RuntimeLifecycleListenerDelegate( @NonNull WeakReference< LynxContext > lynxContext, @NonNull RuntimeLifecycleListener listener);
  public void com.lynx.jsbridge.RuntimeLifecycleListenerDelegate.onRuntimeAttach(long napiEnv);
  public void com.lynx.jsbridge.RuntimeLifecycleListenerDelegate.onRuntimeDetach();
}

public class abstract com::lynx::react::bridge::SafeRunnable : Runnable {
  public com.lynx.react.bridge.SafeRunnable.SafeRunnable(ExceptionHandler context);
  public final void com.lynx.react.bridge.SafeRunnable.run();
  public abstract void com.lynx.react.bridge.SafeRunnable.unsafeRun();
}

public interface com::lynx::tasm::image::ScalingUtils::ScaleType {
  public ScaleType com.lynx.tasm.image.ScalingUtils.ScaleType.FIT_XY FIT_XY;
  public ScaleType com.lynx.tasm.image.ScalingUtils.ScaleType.FIT_CENTER FIT_CENTER;
  public ScaleType com.lynx.tasm.image.ScalingUtils.ScaleType.CENTER CENTER;
  public ScaleType com.lynx.tasm.image.ScalingUtils.ScaleType.CENTER_CROP CENTER_CROP;
  public Matrix com.lynx.tasm.image.ScalingUtils.ScaleType.getTransform(Matrix outTransform, Rect parentBounds, int childWidth, int childHeight, float focusX, float focusY);
}

public class com::lynx::tasm::image::ScalingUtils :  {
}

public interface com::lynx::devtoolwrapper::ScreenshotBitmapHandler {
  public void com.lynx.devtoolwrapper.ScreenshotBitmapHandler.sendBitmap(Bitmap bitmap);
}

public class com::lynx::devtoolwrapper::ScreenshotMode :  {
  public final String com.lynx.devtoolwrapper.ScreenshotMode.SCREEN_SHOT_MODE_LYNX_VIEW SCREEN_SHOT_MODE_LYNX_VIEW;
  public final String com.lynx.devtoolwrapper.ScreenshotMode.SCREEN_SHOT_MODE_FULL_SCREEN SCREEN_SHOT_MODE_FULL_SCREEN;
}

public class com::lynx::tasm::behavior::ui::list::ScrollContainerDrawHelper :  {
  public void com.lynx.tasm.behavior.ui.list.ScrollContainerDrawHelper.setUiBound(Rect bound);
  public Path com.lynx.tasm.behavior.ui.list.ScrollContainerDrawHelper.getClipPath(@NonNull final View scroller);
}

public class com::lynx::tasm::LynxViewClient::ScrollInfo :  {
  public View com.lynx.tasm.LynxViewClient.ScrollInfo.mView mView;
  public String com.lynx.tasm.LynxViewClient.ScrollInfo.mTagName mTagName;
  public String com.lynx.tasm.LynxViewClient.ScrollInfo.mScrollMonitorTag mScrollMonitorTag;
  public com.lynx.tasm.LynxViewClient.ScrollInfo.ScrollInfo(View view, String tagName, String scrollMonitorTag);
  public String com.lynx.tasm.LynxViewClient.ScrollInfo.toString();
}

public interface com::lynx::tasm::behavior::ui::ScrollStateChangeListener {
  public int com.lynx.tasm.behavior.ui.ScrollStateChangeListener.SCROLL_STATE_IDLE SCROLL_STATE_IDLE;
  public int com.lynx.tasm.behavior.ui.ScrollStateChangeListener.SCROLL_STATE_DRAGGING SCROLL_STATE_DRAGGING;
  public int com.lynx.tasm.behavior.ui.ScrollStateChangeListener.SCROLL_STATE_SETTLING SCROLL_STATE_SETTLING;
  public void com.lynx.tasm.behavior.ui.ScrollStateChangeListener.onScrollStateChanged(int state);
}

public class com::lynx::tasm::service::security::SecurityResult :  {
  public String com.lynx.tasm.service.security.SecurityResult.getErrorMsg();
  public boolean com.lynx.tasm.service.security.SecurityResult.isVerified();
  public static SecurityResult com.lynx.tasm.service.security.SecurityResult.onSuccess();
  public static SecurityResult com.lynx.tasm.service.security.SecurityResult.onReject(String error);
}

public class com::lynx::tasm::behavior::shadow::text::BaseTextShadowNode::SetSpanOperation :  {
  public com.lynx.tasm.behavior.shadow.text.BaseTextShadowNode.SetSpanOperation.SetSpanOperation(int start, int end, Object what);
  public void com.lynx.tasm.behavior.shadow.text.BaseTextShadowNode.SetSpanOperation.execute(SpannableStringBuilder sb);
}

public interface com::lynx::tasm::behavior::utils::Settable {
}

public class com::lynx::tasm::behavior::ui::ShadowData :  {
  public int com.lynx.tasm.behavior.ui.ShadowData.color color;
  public float com.lynx.tasm.behavior.ui.ShadowData.offsetX offsetX;
  public float com.lynx.tasm.behavior.ui.ShadowData.offsetY offsetY;
  public float com.lynx.tasm.behavior.ui.ShadowData.blurRadius blurRadius;
  public float com.lynx.tasm.behavior.ui.ShadowData.spreadRadius spreadRadius;
  public float com.lynx.tasm.behavior.ui.ShadowData.blurRenderRadiusExtent blurRenderRadiusExtent;
  public int com.lynx.tasm.behavior.ui.ShadowData.option option;
  public String com.lynx.tasm.behavior.ui.ShadowData.toString();
  public com.lynx.tasm.behavior.ui.ShadowData.ShadowData();
  public com.lynx.tasm.behavior.ui.ShadowData.ShadowData(ShadowData shadow);
  public boolean com.lynx.tasm.behavior.ui.ShadowData.isInset();
  public boolean com.lynx.tasm.behavior.ui.ShadowData.equals(Object o);
  public int com.lynx.tasm.behavior.ui.ShadowData.hashCode();
  public static List< ShadowData > com.lynx.tasm.behavior.ui.ShadowData.parseShadow(ReadableArray shadows);
}

public class com::lynx::tasm::behavior::ui::UIShadowProxy::ShadowDrawer :  {
  public com.lynx.tasm.behavior.ui.UIShadowProxy.ShadowDrawer.ShadowDrawer();
  public void com.lynx.tasm.behavior.ui.UIShadowProxy.ShadowDrawer.updateShadow(ShadowData shadow, Rect childBounds, float[] cornerRadiusArray);
}

public class com::lynx::tasm::behavior::shadow::ShadowNode : com.lynx.tasm.behavior.shadow.LayoutNode {
  public com.lynx.tasm.behavior.shadow.ShadowNode.ShadowNode();
  public boolean com.lynx.tasm.behavior.shadow.ShadowNode.isVirtual();
  public final String com.lynx.tasm.behavior.shadow.ShadowNode.getTagName();
  public void com.lynx.tasm.behavior.shadow.ShadowNode.setEvents(Map< String, EventsListener > events);
  public void com.lynx.tasm.behavior.shadow.ShadowNode.addChildAt(ShadowNode child, int i);
  public ShadowNode com.lynx.tasm.behavior.shadow.ShadowNode.removeChildAt(int i);
  public final int com.lynx.tasm.behavior.shadow.ShadowNode.getChildCount();
  public final ShadowNode com.lynx.tasm.behavior.shadow.ShadowNode.getChildAt(int i);
  public final int com.lynx.tasm.behavior.shadow.ShadowNode.indexOf(ShadowNode child);
  public final void com.lynx.tasm.behavior.shadow.ShadowNode.updateProperties(StylesDiffMap props);
  public void com.lynx.tasm.behavior.shadow.ShadowNode.onAfterUpdateTransaction();
  public void com.lynx.tasm.behavior.shadow.ShadowNode.onCollectExtraUpdates(PaintingContext paintingContext);
  public final void com.lynx.tasm.behavior.shadow.ShadowNode.setTagName(String tagName);
  public final ShadowNode com.lynx.tasm.behavior.shadow.ShadowNode.getParent();
  public final LynxContext com.lynx.tasm.behavior.shadow.ShadowNode.getContext();
  public void com.lynx.tasm.behavior.shadow.ShadowNode.setContext(LynxContext context);
  public ShadowStyle com.lynx.tasm.behavior.shadow.ShadowNode.getShadowStyle();
  public String com.lynx.tasm.behavior.shadow.ShadowNode.toString();
  public final void com.lynx.tasm.behavior.shadow.ShadowNode.destroy();
  public final boolean com.lynx.tasm.behavior.shadow.ShadowNode.isDestroyed();
  public void com.lynx.tasm.behavior.shadow.ShadowNode.markDirty();
  public boolean com.lynx.tasm.behavior.shadow.ShadowNode.isDirty();
  public void com.lynx.tasm.behavior.shadow.ShadowNode.setVerticalAlign(@Nullable ReadableArray array);
  public void com.lynx.tasm.behavior.shadow.ShadowNode.setIgnoreFocus(@Nullable Dynamic ignoreFocus);
  public void com.lynx.tasm.behavior.shadow.ShadowNode.setEventThrough(Dynamic eventThrough);
  public void com.lynx.tasm.behavior.shadow.ShadowNode.setDataset(@Nullable ReadableMap dataset);
  public boolean com.lynx.tasm.behavior.shadow.ShadowNode.needGenerateEventTargetSpan();
  public EventTargetSpan com.lynx.tasm.behavior.shadow.ShadowNode.toEventTargetSpan();
  public void com.lynx.tasm.behavior.shadow.ShadowNode.setEventThroughPropagation(Dynamic enableTouchPseudoPropagation);
  public Object com.lynx.tasm.behavior.shadow.ShadowNode.getExtraBundle();
  public boolean com.lynx.tasm.behavior.shadow.ShadowNode.supportInlineView();
}

public class com::lynx::tasm::behavior::ShadowNodeOwner : com.lynx.tasm.behavior.LayoutContext {
  public com.lynx.tasm.behavior.ShadowNodeOwner.ShadowNodeOwner(LynxContext context, BehaviorRegistry behaviorRegistry, LayoutTick layoutTick);
  public void com.lynx.tasm.behavior.ShadowNodeOwner.detachNativePtr();
  public int com.lynx.tasm.behavior.ShadowNodeOwner.createNode(int signature, String tagName, ReadableMap props, ReadableMapBuffer styles, ReadableArray eventListener, boolean allowInline);
  public void com.lynx.tasm.behavior.ShadowNodeOwner.removeNode(int parentSignature, int childSignature, int index);
  public void com.lynx.tasm.behavior.ShadowNodeOwner.insertNode(int parentSignature, int childSignature, int index);
  public void com.lynx.tasm.behavior.ShadowNodeOwner.moveNode(int parentSignature, int childSignature, int fromIndex, int toIndex);
  public void com.lynx.tasm.behavior.ShadowNodeOwner.destroyNodes(int[] signatures);
  public void com.lynx.tasm.behavior.ShadowNodeOwner.dispatchOnLayoutBefore(int signature);
  public void com.lynx.tasm.behavior.ShadowNodeOwner.dispatchOnLayout(int sign, int left, int top, int width, int height);
  public void com.lynx.tasm.behavior.ShadowNodeOwner.updateProps(int signature, ReadableMap props, ReadableMapBuffer styles, ReadableArray eventListeners);
  public void com.lynx.tasm.behavior.ShadowNodeOwner.setFontFaces(ReadableMap props);
  public Object com.lynx.tasm.behavior.ShadowNodeOwner.getExtraBundle(int signature);
  public void com.lynx.tasm.behavior.ShadowNodeOwner.attachLayoutNodeManager(long nativeLayoutNodeManagerPtr);
  public DisplayMetrics com.lynx.tasm.behavior.ShadowNodeOwner.getScreenMetrics();
  public ShadowNode com.lynx.tasm.behavior.ShadowNodeOwner.getShadowNode(int signature);
}

public class com::lynx::tasm::behavior::ShadowNodeRegistry :  {
  public com.lynx.tasm.behavior.ShadowNodeRegistry.ShadowNodeRegistry();
  public void com.lynx.tasm.behavior.ShadowNodeRegistry.addNode(ShadowNode node);
  public ShadowNode com.lynx.tasm.behavior.ShadowNodeRegistry.removeNode(int signature);
  public ShadowNode com.lynx.tasm.behavior.ShadowNodeRegistry.getNode(int tag);
  public SparseArray< ShadowNode > com.lynx.tasm.behavior.ShadowNodeRegistry.getAllNodes();
}

public interface com::lynx::tasm::behavior::utils::ShadowNodeSetter {
  public void com.lynx.tasm.behavior.utils.ShadowNodeSetter< T extends ShadowNode >.setProperty(ShadowNode node, String name, StylesDiffMap props);
}

public class com::lynx::tasm::behavior::shadow::ShadowNodeType :  {
  public final int com.lynx.tasm.behavior.shadow.ShadowNodeType.COMMON COMMON;
  public final int com.lynx.tasm.behavior.shadow.ShadowNodeType.VIRTUAL VIRTUAL;
  public final int com.lynx.tasm.behavior.shadow.ShadowNodeType.CUSTOM CUSTOM;
  public final int com.lynx.tasm.behavior.shadow.ShadowNodeType.INLINE INLINE;
}

public class com::lynx::tasm::behavior::shadow::ShadowStyle :  {
  public int com.lynx.tasm.behavior.shadow.ShadowStyle.verticalAlign verticalAlign;
  public float com.lynx.tasm.behavior.shadow.ShadowStyle.verticalAlignLength verticalAlignLength;
  public com.lynx.tasm.behavior.shadow.ShadowStyle.ShadowStyle();
}

public class com::lynx::tasm::behavior::shadow::text::ShadowStyleSpan : CharacterStyle {
  public com.lynx.tasm.behavior.shadow.text.ShadowStyleSpan.ShadowStyleSpan(ShadowData textShadow);
  public void com.lynx.tasm.behavior.shadow.text.ShadowStyleSpan.updateDrawState(TextPaint textPaint);
}

public class com::lynx::tasm::behavior::ui::UIShadowProxy::ShadowView : com.lynx.tasm.behavior.ui.view.AndroidView {
  public com.lynx.tasm.behavior.ui.UIShadowProxy.ShadowView.ShadowView(UIShadowProxy proxy, Context context);
  public boolean com.lynx.tasm.behavior.ui.UIShadowProxy.ShadowView.hasInset();
  public void com.lynx.tasm.behavior.ui.UIShadowProxy.ShadowView.updateOutlineDrawer(Outline outline);
  public void com.lynx.tasm.behavior.ui.UIShadowProxy.ShadowView.updateShadow(List< ShadowData > shadowList, Rect childBounds, float[] cornerRadiusArray);
  public void com.lynx.tasm.behavior.ui.UIShadowProxy.ShadowView.clearShadowDrawerList();
  public void com.lynx.tasm.behavior.ui.UIShadowProxy.ShadowView.clearOutlineDrawer();
  public void com.lynx.tasm.behavior.ui.UIShadowProxy.ShadowView.drawInset(Canvas canvas);
}

public class com::lynx::ref::ShareRef : Cloneable {
  public com.lynx.ref.ShareRef< T >.ShareRef(T obj, ResourceReleaser< T > releaser);
  public int com.lynx.ref.ShareRef< T >.getRefCount();
  public synchronized ShareRef< T > com.lynx.ref.ShareRef< T >.clone();
  public synchronized T com.lynx.ref.ShareRef< T >.get();
  public synchronized void com.lynx.ref.ShareRef< T >.release();
}

public class com::lynx::tasm::behavior::GestureRecognizer::SimpleOnGestureListener : com.lynx.tasm.behavior.GestureRecognizer.OnGestureListener, com.lynx.tasm.behavior.GestureRecognizer.OnDoubleTapListener {
  public boolean com.lynx.tasm.behavior.GestureRecognizer.SimpleOnGestureListener.onSingleTapUp(MotionEvent e);
  public void com.lynx.tasm.behavior.GestureRecognizer.SimpleOnGestureListener.onLongPress(MotionEvent e);
  public boolean com.lynx.tasm.behavior.GestureRecognizer.SimpleOnGestureListener.onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY);
  public boolean com.lynx.tasm.behavior.GestureRecognizer.SimpleOnGestureListener.onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY);
  public void com.lynx.tasm.behavior.GestureRecognizer.SimpleOnGestureListener.onShowPress(MotionEvent e);
  public boolean com.lynx.tasm.behavior.GestureRecognizer.SimpleOnGestureListener.onDown(MotionEvent e);
  public boolean com.lynx.tasm.behavior.GestureRecognizer.SimpleOnGestureListener.onDoubleTap(MotionEvent e);
  public boolean com.lynx.tasm.behavior.GestureRecognizer.SimpleOnGestureListener.onDoubleTapEvent(MotionEvent e);
  public boolean com.lynx.tasm.behavior.GestureRecognizer.SimpleOnGestureListener.onSingleTapConfirmed(MotionEvent e);
}

public class com::lynx::tasm::common::SingleThreadAsserter :  {
  public void com.lynx.tasm.common.SingleThreadAsserter.assertNow();
}

public class com::lynx::tasm::utils::SizeValue :  {
  public float com.lynx.tasm.utils.SizeValue.value value;
  public SizeValue.Type com.lynx.tasm.utils.SizeValue.type type;
  public com.lynx.tasm.utils.SizeValue.SizeValue(SizeValue.Type type, float value);
  public com.lynx.tasm.utils.SizeValue.SizeValue();
  public float com.lynx.tasm.utils.SizeValue.convertToDevicePx(float fullSize);
  public static SizeValue com.lynx.tasm.utils.SizeValue.fromCSSString(String valueStr);
}

public class com::lynx::tasm::behavior::ui::utils::Spacing :  {
  public final int com.lynx.tasm.behavior.ui.utils.Spacing.LEFT LEFT;
  public final int com.lynx.tasm.behavior.ui.utils.Spacing.TOP TOP;
  public final int com.lynx.tasm.behavior.ui.utils.Spacing.RIGHT RIGHT;
  public final int com.lynx.tasm.behavior.ui.utils.Spacing.BOTTOM BOTTOM;
  public final int com.lynx.tasm.behavior.ui.utils.Spacing.START START;
  public final int com.lynx.tasm.behavior.ui.utils.Spacing.END END;
  public final int com.lynx.tasm.behavior.ui.utils.Spacing.HORIZONTAL HORIZONTAL;
  public final int com.lynx.tasm.behavior.ui.utils.Spacing.VERTICAL VERTICAL;
  public final int com.lynx.tasm.behavior.ui.utils.Spacing.ALL ALL;
  public com.lynx.tasm.behavior.ui.utils.Spacing.Spacing();
  public com.lynx.tasm.behavior.ui.utils.Spacing.Spacing(float defaultValue);
  public boolean com.lynx.tasm.behavior.ui.utils.Spacing.set(int spacingType, float value);
  public float com.lynx.tasm.behavior.ui.utils.Spacing.get(int spacingType);
  public float com.lynx.tasm.behavior.ui.utils.Spacing.getRaw(int spacingType);
  public void com.lynx.tasm.behavior.ui.utils.Spacing.reset();
}

public enum com::lynx::tasm::LynxSSRHelper::SSRHydrateStatus {
  public com.lynx.tasm.LynxSSRHelper.SSRHydrateStatus.UNDEFINED UNDEFINED;
  public com.lynx.tasm.LynxSSRHelper.SSRHydrateStatus.PENDING PENDING;
  public com.lynx.tasm.LynxSSRHelper.SSRHydrateStatus.BEGINNING BEGINNING;
  public com.lynx.tasm.LynxSSRHelper.SSRHydrateStatus.FAILED FAILED;
  public com.lynx.tasm.LynxSSRHelper.SSRHydrateStatus.SUCCESSFUL SUCCESSFUL;
}

public class com::lynx::tasm::behavior::shadow::text::StaticLayoutCompat :  {
  public static StaticLayout com.lynx.tasm.behavior.shadow.text.StaticLayoutCompat.get(CharSequence source, int bufstart, int bufend, TextPaint paint, int outerwidth, Layout.Alignment align, float spacingmult, float spacingadd, boolean includepad, TextUtils.TruncateAt ellipsize, int maxLines);
  public static StaticLayout com.lynx.tasm.behavior.shadow.text.StaticLayoutCompat.get(CharSequence source, int bufstart, int bufend, TextPaint paint, int outerwidth, Layout.Alignment align, float spacingmult, float spacingadd, boolean includepad, TextUtils.TruncateAt ellipsize, int maxLines, TextDirectionHeuristic directionHeuristic);
}

public class com::lynx::tasm::behavior::ui::LynxBaseUI::Sticky : RectF {
}

public interface com::lynx::tasm::resourceprovider::generic::StreamDelegate {
  public void com.lynx.tasm.resourceprovider.generic.StreamDelegate.onStart(int contentOffset);
  public void com.lynx.tasm.resourceprovider.generic.StreamDelegate.onData(byte[] bytes, int offset, int length);
  public void com.lynx.tasm.resourceprovider.generic.StreamDelegate.onEnd();
  public void com.lynx.tasm.resourceprovider.generic.StreamDelegate.onError(String errMsg);
}

public class com::lynx::tasm::utils::StringUtils :  {
  public static String com.lynx.tasm.utils.StringUtils.streamToString(InputStream stream);
  public static byte[] com.lynx.tasm.utils.StringUtils.streamToBytes(InputStream is);
}

public class com::lynx::tasm::behavior::shadow::Style :  {
  public final int com.lynx.tasm.behavior.shadow.Style.EDGE_LEFT EDGE_LEFT;
  public final int com.lynx.tasm.behavior.shadow.Style.EDGE_TOP EDGE_TOP;
  public final int com.lynx.tasm.behavior.shadow.Style.EDGE_RIGHT EDGE_RIGHT;
  public final int com.lynx.tasm.behavior.shadow.Style.EDGE_BOTTOM EDGE_BOTTOM;
  public final int com.lynx.tasm.behavior.shadow.Style.FLEX_DIRECTION_COLUMN FLEX_DIRECTION_COLUMN;
  public final int com.lynx.tasm.behavior.shadow.Style.FLEX_DIRECTION_COLUMN_REVERSE FLEX_DIRECTION_COLUMN_REVERSE;
  public final int com.lynx.tasm.behavior.shadow.Style.FLEX_DIRECTION_ROW FLEX_DIRECTION_ROW;
  public final int com.lynx.tasm.behavior.shadow.Style.FLEX_DIRECTION_ROW_REVERSE FLEX_DIRECTION_ROW_REVERSE;
  public com.lynx.tasm.behavior.shadow.Style.Style(LayoutNode node);
  public int com.lynx.tasm.behavior.shadow.Style.getFlexDirection();
  public float com.lynx.tasm.behavior.shadow.Style.getWidth();
  public float com.lynx.tasm.behavior.shadow.Style.getHeight();
  public int[] com.lynx.tasm.behavior.shadow.Style.getPaddings();
  public int[] com.lynx.tasm.behavior.shadow.Style.getMargins();
}

public class com::lynx::tasm::utils::StyleCompatUtils :  {
  public static boolean com.lynx.tasm.utils.StyleCompatUtils.shouldCompat(@NonNull Class subClazz, @NonNull Class pClazz, String methodName, Class<?>... parameterTypes);
  public static int com.lynx.tasm.utils.StyleCompatUtils.toFontWeight(String fontWeightString);
  public static int com.lynx.tasm.utils.StyleCompatUtils.toFontStyle(@Nullable String style);
  public static int com.lynx.tasm.utils.StyleCompatUtils.toTextDecoration(@Nullable String decoration);
}

public class com::lynx::tasm::behavior::StyleConstants : com.lynx.tasm.behavior.AutoGenStyleConstants {
  public final int com.lynx.tasm.behavior.StyleConstants.ANIMATIONDIRECTION_NORMAL ANIMATIONDIRECTION_NORMAL;
  public final int com.lynx.tasm.behavior.StyleConstants.ANIMATIONDIRECTION_REVERSE ANIMATIONDIRECTION_REVERSE;
  public final int com.lynx.tasm.behavior.StyleConstants.ANIMATIONDIRECTION_ALTERNATE ANIMATIONDIRECTION_ALTERNATE;
  public final int com.lynx.tasm.behavior.StyleConstants.ANIMATIONDIRECTION_ALTERNATEREVERSE ANIMATIONDIRECTION_ALTERNATEREVERSE;
  public final int com.lynx.tasm.behavior.StyleConstants.ANIMATIONFILLMODE_NONE ANIMATIONFILLMODE_NONE;
  public final int com.lynx.tasm.behavior.StyleConstants.ANIMATIONFILLMODE_FORWARDS ANIMATIONFILLMODE_FORWARDS;
  public final int com.lynx.tasm.behavior.StyleConstants.ANIMATIONFILLMODE_BACKWARDS ANIMATIONFILLMODE_BACKWARDS;
  public final int com.lynx.tasm.behavior.StyleConstants.ANIMATIONFILLMODE_BOTH ANIMATIONFILLMODE_BOTH;
  public final int com.lynx.tasm.behavior.StyleConstants.ANIMATIONPLAYSTATE_PAUSED ANIMATIONPLAYSTATE_PAUSED;
  public final int com.lynx.tasm.behavior.StyleConstants.ANIMATIONPLAYSTATE_RUNNING ANIMATIONPLAYSTATE_RUNNING;
  public final double com.lynx.tasm.behavior.StyleConstants.ANIMATIONITERATIONCOUNT_INFINITE ANIMATIONITERATIONCOUNT_INFINITE;
  public final int com.lynx.tasm.behavior.StyleConstants.TEXTALIGN_LEFT TEXTALIGN_LEFT;
  public final int com.lynx.tasm.behavior.StyleConstants.TEXTALIGN_CENTER TEXTALIGN_CENTER;
  public final int com.lynx.tasm.behavior.StyleConstants.TEXTALIGN_RIGHT TEXTALIGN_RIGHT;
  public final int com.lynx.tasm.behavior.StyleConstants.TEXTALIGN_START TEXTALIGN_START;
  public final int com.lynx.tasm.behavior.StyleConstants.TEXTALIGN_END TEXTALIGN_END;
  public final int com.lynx.tasm.behavior.StyleConstants.TEXTALIGN_JUSTIFY TEXTALIGN_JUSTIFY;
  public final int com.lynx.tasm.behavior.StyleConstants.TEXTALIGN_AUTO TEXTALIGN_AUTO;
  public final int com.lynx.tasm.behavior.StyleConstants.DIRECTION_NORMAL DIRECTION_NORMAL;
  public final int com.lynx.tasm.behavior.StyleConstants.DIRECTION_RTL DIRECTION_RTL;
  public final int com.lynx.tasm.behavior.StyleConstants.DIRECTION_LTR DIRECTION_LTR;
  public final int com.lynx.tasm.behavior.StyleConstants.DIRECTION_LYNXRTL DIRECTION_LYNXRTL;
  public final int com.lynx.tasm.behavior.StyleConstants.POSITION_ABSOLUTE POSITION_ABSOLUTE;
  public final int com.lynx.tasm.behavior.StyleConstants.POSITION_RELATIVE POSITION_RELATIVE;
  public final int com.lynx.tasm.behavior.StyleConstants.POSITION_FIXED POSITION_FIXED;
  public final int com.lynx.tasm.behavior.StyleConstants.POSITION_STICKY POSITION_STICKY;
  public final int com.lynx.tasm.behavior.StyleConstants.OVERFLOW_VISIBLE OVERFLOW_VISIBLE;
  public final int com.lynx.tasm.behavior.StyleConstants.OVERFLOW_HIDDEN OVERFLOW_HIDDEN;
  public final int com.lynx.tasm.behavior.StyleConstants.OVERFLOW_SCROLL OVERFLOW_SCROLL;
  public final int com.lynx.tasm.behavior.StyleConstants.TEXT_DECORATION_NONE TEXT_DECORATION_NONE;
  public final int com.lynx.tasm.behavior.StyleConstants.TEXT_DECORATION_UNDERLINE TEXT_DECORATION_UNDERLINE;
  public final int com.lynx.tasm.behavior.StyleConstants.TEXT_DECORATION_LINETHROUGH TEXT_DECORATION_LINETHROUGH;
  public final int com.lynx.tasm.behavior.StyleConstants.TRANSFORM_NONE TRANSFORM_NONE;
  public final int com.lynx.tasm.behavior.StyleConstants.TRANSFORM_TRANSLATE TRANSFORM_TRANSLATE;
  public final int com.lynx.tasm.behavior.StyleConstants.TRANSFORM_TRANSLATE_X TRANSFORM_TRANSLATE_X;
  public final int com.lynx.tasm.behavior.StyleConstants.TRANSFORM_TRANSLATE_Y TRANSFORM_TRANSLATE_Y;
  public final int com.lynx.tasm.behavior.StyleConstants.TRANSFORM_TRANSLATE_Z TRANSFORM_TRANSLATE_Z;
  public final int com.lynx.tasm.behavior.StyleConstants.TRANSFORM_TRANSLATE_3d TRANSFORM_TRANSLATE_3d;
  public final int com.lynx.tasm.behavior.StyleConstants.TRANSFORM_ROTATE TRANSFORM_ROTATE;
  public final int com.lynx.tasm.behavior.StyleConstants.TRANSFORM_ROTATE_X TRANSFORM_ROTATE_X;
  public final int com.lynx.tasm.behavior.StyleConstants.TRANSFORM_ROTATE_Y TRANSFORM_ROTATE_Y;
  public final int com.lynx.tasm.behavior.StyleConstants.TRANSFORM_ROTATE_Z TRANSFORM_ROTATE_Z;
  public final int com.lynx.tasm.behavior.StyleConstants.TRANSFORM_SCALE TRANSFORM_SCALE;
  public final int com.lynx.tasm.behavior.StyleConstants.TRANSFORM_SCALE_X TRANSFORM_SCALE_X;
  public final int com.lynx.tasm.behavior.StyleConstants.TRANSFORM_SCALE_Y TRANSFORM_SCALE_Y;
  public final int com.lynx.tasm.behavior.StyleConstants.TRANSFORM_SKEW TRANSFORM_SKEW;
  public final int com.lynx.tasm.behavior.StyleConstants.TRANSFORM_SKEW_X TRANSFORM_SKEW_X;
  public final int com.lynx.tasm.behavior.StyleConstants.TRANSFORM_SKEW_Y TRANSFORM_SKEW_Y;
  public final int com.lynx.tasm.behavior.StyleConstants.TRANSFORM_MATRIX TRANSFORM_MATRIX;
  public final int com.lynx.tasm.behavior.StyleConstants.TRANSFORM_MATRIX_3d TRANSFORM_MATRIX_3d;
  public final int com.lynx.tasm.behavior.StyleConstants.PLATFORM_LENGTH_UNIT_NUMBER PLATFORM_LENGTH_UNIT_NUMBER;
  public final int com.lynx.tasm.behavior.StyleConstants.PLATFORM_LENGTH_UNIT_PERCENT PLATFORM_LENGTH_UNIT_PERCENT;
  public final int com.lynx.tasm.behavior.StyleConstants.PLATFORM_LENGTH_UNIT_CALC PLATFORM_LENGTH_UNIT_CALC;
  public final int com.lynx.tasm.behavior.StyleConstants.PLATFORM_PERSPECTIVE_UNIT_NUMBER PLATFORM_PERSPECTIVE_UNIT_NUMBER;
  public final int com.lynx.tasm.behavior.StyleConstants.PLATFORM_PERSPECTIVE_UNIT_VW PLATFORM_PERSPECTIVE_UNIT_VW;
  public final int com.lynx.tasm.behavior.StyleConstants.PLATFORM_PERSPECTIVE_UNIT_VH PLATFORM_PERSPECTIVE_UNIT_VH;
  public final int com.lynx.tasm.behavior.StyleConstants.PLATFORM_PERSPECTIVE_UNIT_DEFAULT PLATFORM_PERSPECTIVE_UNIT_DEFAULT;
  public final int com.lynx.tasm.behavior.StyleConstants.PLATFORM_PERSPECTIVE_UNIT_PX PLATFORM_PERSPECTIVE_UNIT_PX;
  public final int com.lynx.tasm.behavior.StyleConstants.BACKGROUND_CLIP_PADDING_BOX BACKGROUND_CLIP_PADDING_BOX;
  public final int com.lynx.tasm.behavior.StyleConstants.BACKGROUND_CLIP_BORDER_BOX BACKGROUND_CLIP_BORDER_BOX;
  public final int com.lynx.tasm.behavior.StyleConstants.BACKGROUND_CLIP_CONTENT_BOX BACKGROUND_CLIP_CONTENT_BOX;
  public final int com.lynx.tasm.behavior.StyleConstants.BACKGROUND_ORIGIN_PADDING_BOX BACKGROUND_ORIGIN_PADDING_BOX;
  public final int com.lynx.tasm.behavior.StyleConstants.BACKGROUND_ORIGIN_BORDER_BOX BACKGROUND_ORIGIN_BORDER_BOX;
  public final int com.lynx.tasm.behavior.StyleConstants.BACKGROUND_ORIGIN_CONTENT_BOX BACKGROUND_ORIGIN_CONTENT_BOX;
  public final int com.lynx.tasm.behavior.StyleConstants.BACKGROUND_IMAGE_NONE BACKGROUND_IMAGE_NONE;
  public final int com.lynx.tasm.behavior.StyleConstants.BACKGROUND_IMAGE_URL BACKGROUND_IMAGE_URL;
  public final int com.lynx.tasm.behavior.StyleConstants.BACKGROUND_IMAGE_LINEAR_GRADIENT BACKGROUND_IMAGE_LINEAR_GRADIENT;
  public final int com.lynx.tasm.behavior.StyleConstants.BACKGROUND_IMAGE_RADIAL_GRADIENT BACKGROUND_IMAGE_RADIAL_GRADIENT;
  public final int com.lynx.tasm.behavior.StyleConstants.BACKGROUND_POSITION_TOP BACKGROUND_POSITION_TOP;
  public final int com.lynx.tasm.behavior.StyleConstants.BACKGROUND_POSITION_RIGHT BACKGROUND_POSITION_RIGHT;
  public final int com.lynx.tasm.behavior.StyleConstants.BACKGROUND_POSITION_BOTTOM BACKGROUND_POSITION_BOTTOM;
  public final int com.lynx.tasm.behavior.StyleConstants.BACKGROUND_POSITION_LEFT BACKGROUND_POSITION_LEFT;
  public final int com.lynx.tasm.behavior.StyleConstants.BACKGROUND_POSITION_CENTER BACKGROUND_POSITION_CENTER;
  public final int com.lynx.tasm.behavior.StyleConstants.BACKGROUND_SIZE_AUTO BACKGROUND_SIZE_AUTO;
  public final int com.lynx.tasm.behavior.StyleConstants.BACKGROUND_SIZE_COVER BACKGROUND_SIZE_COVER;
  public final int com.lynx.tasm.behavior.StyleConstants.BACKGROUND_SIZE_CONTAIN BACKGROUND_SIZE_CONTAIN;
  public final int com.lynx.tasm.behavior.StyleConstants.VERTICAL_ALIGN_DEFAULT VERTICAL_ALIGN_DEFAULT;
  public final int com.lynx.tasm.behavior.StyleConstants.VERTICAL_ALIGN_BASELINE VERTICAL_ALIGN_BASELINE;
  public final int com.lynx.tasm.behavior.StyleConstants.VERTICAL_ALIGN_SUB VERTICAL_ALIGN_SUB;
  public final int com.lynx.tasm.behavior.StyleConstants.VERTICAL_ALIGN_SUPER VERTICAL_ALIGN_SUPER;
  public final int com.lynx.tasm.behavior.StyleConstants.VERTICAL_ALIGN_TOP VERTICAL_ALIGN_TOP;
  public final int com.lynx.tasm.behavior.StyleConstants.VERTICAL_ALIGN_TEXT_TOP VERTICAL_ALIGN_TEXT_TOP;
  public final int com.lynx.tasm.behavior.StyleConstants.VERTICAL_ALIGN_MIDDLE VERTICAL_ALIGN_MIDDLE;
  public final int com.lynx.tasm.behavior.StyleConstants.VERTICAL_ALIGN_BOTTOM VERTICAL_ALIGN_BOTTOM;
  public final int com.lynx.tasm.behavior.StyleConstants.VERTICAL_ALIGN_TEXT_BOTTOM VERTICAL_ALIGN_TEXT_BOTTOM;
  public final int com.lynx.tasm.behavior.StyleConstants.VERTICAL_ALIGN_LENGTH VERTICAL_ALIGN_LENGTH;
  public final int com.lynx.tasm.behavior.StyleConstants.VERTICAL_ALIGN_PERCENT VERTICAL_ALIGN_PERCENT;
  public final int com.lynx.tasm.behavior.StyleConstants.VERTICAL_ALIGN_CENTER VERTICAL_ALIGN_CENTER;
  public final int com.lynx.tasm.behavior.StyleConstants.SHADOW_OPTION_NONE SHADOW_OPTION_NONE;
  public final int com.lynx.tasm.behavior.StyleConstants.SHADOW_OPTION_INSET SHADOW_OPTION_INSET;
  public final int com.lynx.tasm.behavior.StyleConstants.SHADOW_OPTION_INITIAL SHADOW_OPTION_INITIAL;
  public final int com.lynx.tasm.behavior.StyleConstants.SHADOW_OPTION_INHERIT SHADOW_OPTION_INHERIT;
  public final int com.lynx.tasm.behavior.StyleConstants.TEXT_PROP_ID_FONT_SIZE TEXT_PROP_ID_FONT_SIZE;
  public final int com.lynx.tasm.behavior.StyleConstants.TEXT_PROP_ID_COLOR TEXT_PROP_ID_COLOR;
  public final int com.lynx.tasm.behavior.StyleConstants.TEXT_PROP_ID_WHITESPACE TEXT_PROP_ID_WHITESPACE;
  public final int com.lynx.tasm.behavior.StyleConstants.TEXT_PROP_ID_TEXT_OVERFLOW TEXT_PROP_ID_TEXT_OVERFLOW;
  public final int com.lynx.tasm.behavior.StyleConstants.TEXT_PROP_ID_FONT_WEIGHT TEXT_PROP_ID_FONT_WEIGHT;
  public final int com.lynx.tasm.behavior.StyleConstants.TEXT_PROP_ID_FONT_STYLE TEXT_PROP_ID_FONT_STYLE;
  public final int com.lynx.tasm.behavior.StyleConstants.TEXT_PROP_ID_LINE_HEIGHT TEXT_PROP_ID_LINE_HEIGHT;
  public final int com.lynx.tasm.behavior.StyleConstants.TEXT_PROP_ID_ENABLE_FONTSCALING TEXT_PROP_ID_ENABLE_FONTSCALING;
  public final int com.lynx.tasm.behavior.StyleConstants.TEXT_PROP_ID_LETTER_SPACING TEXT_PROP_ID_LETTER_SPACING;
  public final int com.lynx.tasm.behavior.StyleConstants.TEXT_PROP_ID_LINE_SPACING TEXT_PROP_ID_LINE_SPACING;
  public final int com.lynx.tasm.behavior.StyleConstants.TEXT_PROP_ID_TEXT_ALIGN TEXT_PROP_ID_TEXT_ALIGN;
  public final int com.lynx.tasm.behavior.StyleConstants.TEXT_PROP_ID_WORD_BREAK TEXT_PROP_ID_WORD_BREAK;
  public final int com.lynx.tasm.behavior.StyleConstants.TEXT_PROP_ID_UNDERLINE TEXT_PROP_ID_UNDERLINE;
  public final int com.lynx.tasm.behavior.StyleConstants.TEXT_PROP_ID_LINETHROUGH TEXT_PROP_ID_LINETHROUGH;
  public final int com.lynx.tasm.behavior.StyleConstants.TEXT_PROP_ID_HAS_TEXTSHADOW TEXT_PROP_ID_HAS_TEXTSHADOW;
  public final int com.lynx.tasm.behavior.StyleConstants.TEXT_PROP_ID_SHADOW_HOFFSET TEXT_PROP_ID_SHADOW_HOFFSET;
  public final int com.lynx.tasm.behavior.StyleConstants.TEXT_PROP_ID_SHADOW_VOFFSET TEXT_PROP_ID_SHADOW_VOFFSET;
  public final int com.lynx.tasm.behavior.StyleConstants.TEXT_PROP_ID_SHADOW_BLUR TEXT_PROP_ID_SHADOW_BLUR;
  public final int com.lynx.tasm.behavior.StyleConstants.TEXT_PROP_ID_SHADOW_COLOR TEXT_PROP_ID_SHADOW_COLOR;
  public final int com.lynx.tasm.behavior.StyleConstants.TEXT_PROP_ID_VERTICAL_ALIGN TEXT_PROP_ID_VERTICAL_ALIGN;
  public final int com.lynx.tasm.behavior.StyleConstants.TEXT_PROP_ID_VERTICAL_ALIGN_LENGTH TEXT_PROP_ID_VERTICAL_ALIGN_LENGTH;
  public final int com.lynx.tasm.behavior.StyleConstants.FILTER_TYPE_NONE FILTER_TYPE_NONE;
  public final int com.lynx.tasm.behavior.StyleConstants.FILTER_TYPE_GRAYSCALE FILTER_TYPE_GRAYSCALE;
  public final int com.lynx.tasm.behavior.StyleConstants.FILTER_TYPE_BLUR FILTER_TYPE_BLUR;
  public final int com.lynx.tasm.behavior.StyleConstants.BASIC_SHAPE_TYPE_UNKNOWN BASIC_SHAPE_TYPE_UNKNOWN;
  public final int com.lynx.tasm.behavior.StyleConstants.BASIC_SHAPE_TYPE_CIRCLE BASIC_SHAPE_TYPE_CIRCLE;
  public final int com.lynx.tasm.behavior.StyleConstants.BASIC_SHAPE_TYPE_ELLIPSE BASIC_SHAPE_TYPE_ELLIPSE;
  public final int com.lynx.tasm.behavior.StyleConstants.BASIC_SHAPE_TYPE_PATH BASIC_SHAPE_TYPE_PATH;
  public final int com.lynx.tasm.behavior.StyleConstants.BASIC_SHAPE_TYPE_SUPER_ELLIPSE BASIC_SHAPE_TYPE_SUPER_ELLIPSE;
  public final int com.lynx.tasm.behavior.StyleConstants.BASIC_SHAPE_TYPE_INSET BASIC_SHAPE_TYPE_INSET;
  public final int com.lynx.tasm.behavior.StyleConstants.BORDER_SIDE_TOP BORDER_SIDE_TOP;
  public final int com.lynx.tasm.behavior.StyleConstants.BORDER_SIDE_RIGHT BORDER_SIDE_RIGHT;
  public final int com.lynx.tasm.behavior.StyleConstants.BORDER_SIDE_BOTTOM BORDER_SIDE_BOTTOM;
  public final int com.lynx.tasm.behavior.StyleConstants.BORDER_SIDE_LEFT BORDER_SIDE_LEFT;
}

public class com::lynx::tasm::behavior::StylesDiffMap :  {
  public final ReadableMap com.lynx.tasm.behavior.StylesDiffMap.mBackingMap mBackingMap;
  public com.lynx.tasm.behavior.StylesDiffMap.StylesDiffMap(ReadableMap props);
  public com.lynx.tasm.behavior.StylesDiffMap.StylesDiffMap(ReadableMap props, MapBuffer styles);
  public boolean com.lynx.tasm.behavior.StylesDiffMap.hasKey(String name);
  public boolean com.lynx.tasm.behavior.StylesDiffMap.hasKey(int key);
  public boolean com.lynx.tasm.behavior.StylesDiffMap.isEmpty();
  public boolean com.lynx.tasm.behavior.StylesDiffMap.isNull(String name);
  public boolean com.lynx.tasm.behavior.StylesDiffMap.getBoolean(String name, boolean restoreNullToDefaultValue);
  public double com.lynx.tasm.behavior.StylesDiffMap.getDouble(String name, double restoreNullToDefaultValue);
  public float com.lynx.tasm.behavior.StylesDiffMap.getFloat(String name, float restoreNullToDefaultValue);
  public int com.lynx.tasm.behavior.StylesDiffMap.getInt(String name, int restoreNullToDefaultValue);
  public String com.lynx.tasm.behavior.StylesDiffMap.getString(String name);
  public ReadableArray com.lynx.tasm.behavior.StylesDiffMap.getArray(String key);
  public ReadableArray com.lynx.tasm.behavior.StylesDiffMap.getArray(int key);
  public ReadableMap com.lynx.tasm.behavior.StylesDiffMap.getMap(String key);
  public Dynamic com.lynx.tasm.behavior.StylesDiffMap.getDynamic(String key);
  public MapBuffer com.lynx.tasm.behavior.StylesDiffMap.getStyleMap();
  public String com.lynx.tasm.behavior.StylesDiffMap.toString();
}

public class com::lynx::tasm::behavior::ui::ViewInfo::SubDrawInfo :  {
  public com.lynx.tasm.behavior.ui.ViewInfo.SubDrawInfo.SubDrawInfo(boolean isView, Rect bound, RenderNodeCompat renderNode);
  public void com.lynx.tasm.behavior.ui.ViewInfo.SubDrawInfo.setImageManager(LynxImageManager imageManager);
  public void com.lynx.tasm.behavior.ui.ViewInfo.SubDrawInfo.setTextLayout(Layout textLayout);
  public void com.lynx.tasm.behavior.ui.ViewInfo.SubDrawInfo.setDrawPosition(int left, int top);
}

public class com::lynx::tasm::behavior::ui::swiper::SwiperShadowNode : com.lynx.tasm.behavior.shadow.CustomLayoutShadowNode, com.lynx.tasm.behavior.shadow.CustomMeasureFunc {
  public void com.lynx.tasm.behavior.ui.swiper.SwiperShadowNode.attachNativePtr(long ptr);
  public void com.lynx.tasm.behavior.ui.swiper.SwiperShadowNode.setMode(String mode);
  public void com.lynx.tasm.behavior.ui.swiper.SwiperShadowNode.setPreviousMargin(Dynamic previousMarginValue);
  public void com.lynx.tasm.behavior.ui.swiper.SwiperShadowNode.setNextMargin(Dynamic nextMarginValue);
  public void com.lynx.tasm.behavior.ui.swiper.SwiperShadowNode.setPageMargin(Dynamic pageMargin);
  public void com.lynx.tasm.behavior.ui.swiper.SwiperShadowNode.setMaxXScale(double scale);
  public void com.lynx.tasm.behavior.ui.swiper.SwiperShadowNode.setMaxYScale(double scale);
  public void com.lynx.tasm.behavior.ui.swiper.SwiperShadowNode.setVertical(boolean isVertical);
  public MeasureResult com.lynx.tasm.behavior.ui.swiper.SwiperShadowNode.measure(MeasureParam param, MeasureContext context);
  public void com.lynx.tasm.behavior.ui.swiper.SwiperShadowNode.align(AlignParam param, AlignContext context);
}

public class com::lynx::tasm::gesture::handler::TapGestureHandler : com.lynx.tasm.gesture.handler.BaseGestureHandler {
  public com.lynx.tasm.gesture.handler.TapGestureHandler.TapGestureHandler(int sign, LynxContext lynxContext, @NonNull GestureDetector gestureDetector, @NonNull GestureArenaMember gestureArenaMember);
  public void com.lynx.tasm.gesture.handler.TapGestureHandler.fail();
  public void com.lynx.tasm.gesture.handler.TapGestureHandler.end();
  public void com.lynx.tasm.gesture.handler.TapGestureHandler.reset();
}

public class com::lynx::tasm::LynxTemplateRender::TASMCallback : com.lynx.tasm.NativeFacade.Callback {
  public com.lynx.tasm.LynxTemplateRender.TASMCallback.TASMCallback();
  public void com.lynx.tasm.LynxTemplateRender.TASMCallback.onLoaded(int templateSize);
  public void com.lynx.tasm.LynxTemplateRender.TASMCallback.onSSRHydrateFinished();
  public void com.lynx.tasm.LynxTemplateRender.TASMCallback.onRuntimeReady();
  public void com.lynx.tasm.LynxTemplateRender.TASMCallback.onDataUpdated();
  public void com.lynx.tasm.LynxTemplateRender.TASMCallback.onPageChanged(boolean isFirstScreen);
  public void com.lynx.tasm.LynxTemplateRender.TASMCallback.onDynamicComponentPerfReady(HashMap< String, Object > perf);
  public void com.lynx.tasm.LynxTemplateRender.TASMCallback.onErrorOccurred(LynxError error);
  public void com.lynx.tasm.LynxTemplateRender.TASMCallback.onThemeUpdatedByJs(LynxTheme theme);
  public String com.lynx.tasm.LynxTemplateRender.TASMCallback.translateResourceForTheme(String resId, String themedKey);
  public void com.lynx.tasm.LynxTemplateRender.TASMCallback.onModuleFunctionInvoked(String module, String method, int error_code);
  public void com.lynx.tasm.LynxTemplateRender.TASMCallback.onPageConfigDecoded(PageConfig config);
  public void com.lynx.tasm.LynxTemplateRender.TASMCallback.onJSBInvoked(Map< String, Object > jsbInfo);
  public void com.lynx.tasm.LynxTemplateRender.TASMCallback.onCallJSBFinished(Map< String, Object > timing);
  public void com.lynx.tasm.LynxTemplateRender.TASMCallback.onUpdateDataWithoutChange();
  public void com.lynx.tasm.LynxTemplateRender.TASMCallback.onTemplateBundleReady(TemplateBundle bundle);
  public void com.lynx.tasm.LynxTemplateRender.TASMCallback.onReceiveMessageEvent(ReadableMap event);
  public void com.lynx.tasm.LynxTemplateRender.TASMCallback.onTASMFinishedByNative();
  public void com.lynx.tasm.LynxTemplateRender.TASMCallback.onUpdateI18nResource(String key, String bytes, int status);
  public void com.lynx.tasm.LynxTemplateRender.TASMCallback.onUIMethodInvoked(final int cb, JavaOnlyMap res);
  public void com.lynx.tasm.LynxTemplateRender.TASMCallback.onClearNativePipelineTimingInfo();
  public void com.lynx.tasm.LynxTemplateRender.TASMCallback.onEventCapture(long targetID, boolean isCatch, long eventID);
  public void com.lynx.tasm.LynxTemplateRender.TASMCallback.onEventBubble(long targetID, boolean isCatch, long eventID);
  public void com.lynx.tasm.LynxTemplateRender.TASMCallback.onEventFire(long targetID, boolean isStop, long eventID);
}

public class com::lynx::tasm::TasmPlatformInvoker :  {
  public com.lynx.tasm.TasmPlatformInvoker.TasmPlatformInvoker(NativeFacade nativeFacade);
}

public class com::lynx::tasm::TemplateAssembler :  {
  public void com.lynx.tasm.TemplateAssembler.sendCustomEvent(@NonNull LynxCustomEvent event);
  public void com.lynx.tasm.TemplateAssembler.setLynxContext(LynxContext context);
}

public class com::lynx::tasm::TemplateBundle :  {
  public boolean com.lynx.tasm.TemplateBundle.equals(Object o);
  public Map< String, Object > com.lynx.tasm.TemplateBundle.getExtraInfo();
  public boolean com.lynx.tasm.TemplateBundle.isElementBundleValid();
  public int com.lynx.tasm.TemplateBundle.getTemplateSize();
  public long com.lynx.tasm.TemplateBundle.getNativePtr();
  public void com.lynx.tasm.TemplateBundle.release();
  public boolean com.lynx.tasm.TemplateBundle.isValid();
  public void com.lynx.tasm.TemplateBundle.postJsCacheGenerationTask(String bytecodeSourceUrl, boolean useV8, @Nullable LynxBytecodeCallback callback);
  public void com.lynx.tasm.TemplateBundle.postJsCacheGenerationTask(String bytecodeSourceUrl, boolean useV8);
  public String com.lynx.tasm.TemplateBundle.getErrorMessage();
  public String com.lynx.tasm.TemplateBundle.getUrl();
  public boolean com.lynx.tasm.TemplateBundle.constructContext(int count);
  public PageConfig com.lynx.tasm.TemplateBundle.getPageConfig();
  public boolean com.lynx.tasm.TemplateBundle.constructContext();
  public static TemplateBundle com.lynx.tasm.TemplateBundle.fromTemplate(byte[] template);
  public static TemplateBundle com.lynx.tasm.TemplateBundle.fromTemplate(byte[] template, TemplateBundleOption option);
}

public class com::lynx::tasm::TemplateBundleOption :  {
  public int com.lynx.tasm.TemplateBundleOption.getContextPoolSize();
  public String com.lynx.tasm.TemplateBundleOption.getUrl();
  public boolean com.lynx.tasm.TemplateBundleOption.getEnableContextAutoRefill();
}

public class com::lynx::tasm::TemplateData :  {
  public static TemplateData com.lynx.tasm.TemplateData.fromMap(Map< String, Object > data);
  public static TemplateData com.lynx.tasm.TemplateData.empty();
  public static TemplateData com.lynx.tasm.TemplateData.fromString(String json);
  public void com.lynx.tasm.TemplateData.markConcurrent();
  public long com.lynx.tasm.TemplateData.getNativePtr();
  public void com.lynx.tasm.TemplateData.removeKey(String key);
  public Map< Object, Object > com.lynx.tasm.TemplateData.toMap();
  public void com.lynx.tasm.TemplateData.updateWithTemplateData(TemplateData diff);
  public void com.lynx.tasm.TemplateData.put(String key, Object value);
  public void com.lynx.tasm.TemplateData.updateData(Map< String, Object > diff);
  public void com.lynx.tasm.TemplateData.updateData(String key, Object value);
  public synchronized void com.lynx.tasm.TemplateData.flush();
  public synchronized void com.lynx.tasm.TemplateData.recycle();
  public boolean com.lynx.tasm.TemplateData.checkIsLegalData();
  public void com.lynx.tasm.TemplateData.markState(String name);
  public String com.lynx.tasm.TemplateData.processorName();
  public TemplateData com.lynx.tasm.TemplateData.deepClone();
  public void com.lynx.tasm.TemplateData.markReadOnly();
  public boolean com.lynx.tasm.TemplateData.isReadOnly();
  public boolean com.lynx.tasm.TemplateData.isEmpty();
}

public class com::lynx::tasm::resourceprovider::template::TemplateProviderResult :  {
  public byte[] com.lynx.tasm.resourceprovider.template.TemplateProviderResult.getTemplateBinary();
  public TemplateBundle com.lynx.tasm.resourceprovider.template.TemplateProviderResult.getTemplateBundle();
  public static TemplateProviderResult com.lynx.tasm.resourceprovider.template.TemplateProviderResult.fromBinary(byte[] binary);
  public static TemplateProviderResult com.lynx.tasm.resourceprovider.template.TemplateProviderResult.fromTemplateBundle(TemplateBundle bundle);
}

public class com::lynx::tasm::behavior::shadow::text::TextAttributes :  {
  public final int com.lynx.tasm.behavior.shadow.text.TextAttributes.NOT_SET NOT_SET;
  public final int com.lynx.tasm.behavior.shadow.text.TextAttributes.TEXT_VERTICAL_ALIGN_TOP TEXT_VERTICAL_ALIGN_TOP;
  public final int com.lynx.tasm.behavior.shadow.text.TextAttributes.TEXT_VERTICAL_ALIGN_CENTER TEXT_VERTICAL_ALIGN_CENTER;
  public final int com.lynx.tasm.behavior.shadow.text.TextAttributes.TEXT_VERTICAL_ALIGN_BOTTOM TEXT_VERTICAL_ALIGN_BOTTOM;
  public final int com.lynx.tasm.behavior.shadow.text.TextAttributes.TEXT_VERTICAL_ALIGN_CUSTOM TEXT_VERTICAL_ALIGN_CUSTOM;
  public final String com.lynx.tasm.behavior.shadow.text.TextAttributes.INLINE_IMAGE_PLACEHOLDER INLINE_IMAGE_PLACEHOLDER;
  public final String com.lynx.tasm.behavior.shadow.text.TextAttributes.INLINE_BLOCK_PLACEHOLDER INLINE_BLOCK_PLACEHOLDER;
  public final int com.lynx.tasm.behavior.shadow.text.TextAttributes.FIRST_CHAR_RTL_STATE_NONE_CHECK FIRST_CHAR_RTL_STATE_NONE_CHECK;
  public final int com.lynx.tasm.behavior.shadow.text.TextAttributes.FIRST_CHAR_RTL_STATE_RTL FIRST_CHAR_RTL_STATE_RTL;
  public final int com.lynx.tasm.behavior.shadow.text.TextAttributes.FIRST_CHAR_RTL_STATE_LTR FIRST_CHAR_RTL_STATE_LTR;
  public int com.lynx.tasm.behavior.shadow.text.TextAttributes.mMaxLineCount mMaxLineCount;
  public int com.lynx.tasm.behavior.shadow.text.TextAttributes.mMaxTextLength mMaxTextLength;
  public Integer com.lynx.tasm.behavior.shadow.text.TextAttributes.mFontColor mFontColor;
  public int com.lynx.tasm.behavior.shadow.text.TextAttributes.mTextAlign mTextAlign;
  public int com.lynx.tasm.behavior.shadow.text.TextAttributes.mDirection mDirection;
  public int com.lynx.tasm.behavior.shadow.text.TextAttributes.mTextVerticalAlign mTextVerticalAlign;
  public int com.lynx.tasm.behavior.shadow.text.TextAttributes.mFontWeight mFontWeight;
  public int com.lynx.tasm.behavior.shadow.text.TextAttributes.mFontStyle mFontStyle;
  public int com.lynx.tasm.behavior.shadow.text.TextAttributes.mWhiteSpace mWhiteSpace;
  public int com.lynx.tasm.behavior.shadow.text.TextAttributes.mTextOverflow mTextOverflow;
  public float com.lynx.tasm.behavior.shadow.text.TextAttributes.mLineHeight mLineHeight;
  public float com.lynx.tasm.behavior.shadow.text.TextAttributes.mLetterSpacing mLetterSpacing;
  public float com.lynx.tasm.behavior.shadow.text.TextAttributes.mLineSpacing mLineSpacing;
  public float com.lynx.tasm.behavior.shadow.text.TextAttributes.mFontSize mFontSize;
  public TextIndent com.lynx.tasm.behavior.shadow.text.TextAttributes.mTextIndent mTextIndent;
  public float com.lynx.tasm.behavior.shadow.text.TextAttributes.mBaselineShift mBaselineShift;
  public boolean com.lynx.tasm.behavior.shadow.text.TextAttributes.mHasImageSpan mHasImageSpan;
  public boolean com.lynx.tasm.behavior.shadow.text.TextAttributes.mHasInlineViewSpan mHasInlineViewSpan;
  public boolean com.lynx.tasm.behavior.shadow.text.TextAttributes.mIsBoringSpan mIsBoringSpan;
  public boolean com.lynx.tasm.behavior.shadow.text.TextAttributes.mIncludePadding mIncludePadding;
  public String com.lynx.tasm.behavior.shadow.text.TextAttributes.mFontFamily mFontFamily;
  public boolean com.lynx.tasm.behavior.shadow.text.TextAttributes.mHasValidTypeface mHasValidTypeface;
  public int com.lynx.tasm.behavior.shadow.text.TextAttributes.mTextSingleLineVerticalAlign mTextSingleLineVerticalAlign;
  public int com.lynx.tasm.behavior.shadow.text.TextAttributes.mFirstCharacterRTLState mFirstCharacterRTLState;
  public ShadowData com.lynx.tasm.behavior.shadow.text.TextAttributes.mTextShadow mTextShadow;
  public int com.lynx.tasm.behavior.shadow.text.TextAttributes.mTextDecoration mTextDecoration;
  public int com.lynx.tasm.behavior.shadow.text.TextAttributes.mTextDecorationStyle mTextDecorationStyle;
  public int com.lynx.tasm.behavior.shadow.text.TextAttributes.mTextDecorationColor mTextDecorationColor;
  public int com.lynx.tasm.behavior.shadow.text.TextAttributes.mTextStrokeColor mTextStrokeColor;
  public float com.lynx.tasm.behavior.shadow.text.TextAttributes.mTextStrokeWidth mTextStrokeWidth;
  public BackgroundGradientLayer com.lynx.tasm.behavior.shadow.text.TextAttributes.mTextGradient mTextGradient;
  public int com.lynx.tasm.behavior.shadow.text.TextAttributes.getTypefaceStyle();
  public TextAttributes com.lynx.tasm.behavior.shadow.text.TextAttributes.copy();
  public boolean com.lynx.tasm.behavior.shadow.text.TextAttributes.equals(Object o);
  public int com.lynx.tasm.behavior.shadow.text.TextAttributes.hashCode();
  public int com.lynx.tasm.behavior.shadow.text.TextAttributes.getMaxLineCount();
  public void com.lynx.tasm.behavior.shadow.text.TextAttributes.setMaxLineCount(int mMaxLineCount);
  public int com.lynx.tasm.behavior.shadow.text.TextAttributes.getMaxTextLength();
  public void com.lynx.tasm.behavior.shadow.text.TextAttributes.setMaxTextLength(int mMaxTextLength);
  public int com.lynx.tasm.behavior.shadow.text.TextAttributes.getFontColor();
  public void com.lynx.tasm.behavior.shadow.text.TextAttributes.setFontColor(int mFontColor);
  public int com.lynx.tasm.behavior.shadow.text.TextAttributes.getTextAlign();
  public Layout.Alignment com.lynx.tasm.behavior.shadow.text.TextAttributes.getLayoutAlignment(boolean isRtl);
  public Layout.Alignment com.lynx.tasm.behavior.shadow.text.TextAttributes.getLayoutAlignment();
  public void com.lynx.tasm.behavior.shadow.text.TextAttributes.setTextAlign(int mTextAlign);
  public int com.lynx.tasm.behavior.shadow.text.TextAttributes.getFontWeight();
  public void com.lynx.tasm.behavior.shadow.text.TextAttributes.setFontWeight(int mFontWeight);
  public int com.lynx.tasm.behavior.shadow.text.TextAttributes.getFontStyle();
  public void com.lynx.tasm.behavior.shadow.text.TextAttributes.setFontStyle(int mFontStyle);
  public int com.lynx.tasm.behavior.shadow.text.TextAttributes.getWhiteSpace();
  public void com.lynx.tasm.behavior.shadow.text.TextAttributes.setWhiteSpace(int mWhiteSpace);
  public int com.lynx.tasm.behavior.shadow.text.TextAttributes.getTextOverflow();
  public void com.lynx.tasm.behavior.shadow.text.TextAttributes.setTextOverflow(int mTextOverflow);
  public float com.lynx.tasm.behavior.shadow.text.TextAttributes.getLineHeight();
  public void com.lynx.tasm.behavior.shadow.text.TextAttributes.setLineHeight(float mLineHeight);
  public float com.lynx.tasm.behavior.shadow.text.TextAttributes.getLetterSpacing();
  public void com.lynx.tasm.behavior.shadow.text.TextAttributes.setLetterSpacing(float mLetterSpacing);
  public float com.lynx.tasm.behavior.shadow.text.TextAttributes.getLineSpacing();
  public void com.lynx.tasm.behavior.shadow.text.TextAttributes.setLineSpacing(float mLineSpacing);
  public float com.lynx.tasm.behavior.shadow.text.TextAttributes.getFontSize();
  public void com.lynx.tasm.behavior.shadow.text.TextAttributes.setFontSize(float mFontSize);
  public boolean com.lynx.tasm.behavior.shadow.text.TextAttributes.hasImageSpan();
  public void com.lynx.tasm.behavior.shadow.text.TextAttributes.setHasImageSpan(boolean mHasImageSpan);
  public boolean com.lynx.tasm.behavior.shadow.text.TextAttributes.isBoringSpan();
  public void com.lynx.tasm.behavior.shadow.text.TextAttributes.setIsBoringSpan(boolean isBoringSpan);
  public boolean com.lynx.tasm.behavior.shadow.text.TextAttributes.hasInlineViewSpan();
  public void com.lynx.tasm.behavior.shadow.text.TextAttributes.setHasInlineViewSpan(boolean hasInlineViewSpan);
  public boolean com.lynx.tasm.behavior.shadow.text.TextAttributes.isIncludePadding();
  public void com.lynx.tasm.behavior.shadow.text.TextAttributes.setIncludePadding(boolean mIncludePadding);
  public void com.lynx.tasm.behavior.shadow.text.TextAttributes.setTextStrokeColor(int textStrokeColor);
  public int com.lynx.tasm.behavior.shadow.text.TextAttributes.getTextStrokeColor();
  public float com.lynx.tasm.behavior.shadow.text.TextAttributes.getTextStrokeWidth();
  public void com.lynx.tasm.behavior.shadow.text.TextAttributes.setTextStrokeWidth(float textStrokeWidth);
  public String com.lynx.tasm.behavior.shadow.text.TextAttributes.getFontFamily();
  public void com.lynx.tasm.behavior.shadow.text.TextAttributes.setFontFamily(String mFontFamily);
  public ShadowData com.lynx.tasm.behavior.shadow.text.TextAttributes.getTextShadow();
  public void com.lynx.tasm.behavior.shadow.text.TextAttributes.setTextShadow(ShadowData mTextShadow);
  public void com.lynx.tasm.behavior.shadow.text.TextAttributes.ensureTextShadow();
  public TextDirectionHeuristic com.lynx.tasm.behavior.shadow.text.TextAttributes.getDirectionHeuristic();
  public boolean com.lynx.tasm.behavior.shadow.text.TextAttributes.getIsAutoFontSize();
  public void com.lynx.tasm.behavior.shadow.text.TextAttributes.setAutoFontSize(ReadableArray autoFontSize);
  public float com.lynx.tasm.behavior.shadow.text.TextAttributes.getAutoFontSizeMaxSize();
  public float com.lynx.tasm.behavior.shadow.text.TextAttributes.getAutoFontSizeMinSize();
  public float com.lynx.tasm.behavior.shadow.text.TextAttributes.getAutoFontSizeStepGranularity();
  public void com.lynx.tasm.behavior.shadow.text.TextAttributes.setAutoFontSizePresetSizes(ReadableArray presetSizes);
  public float[] com.lynx.tasm.behavior.shadow.text.TextAttributes.getAutoFontSizePresetSizes();
  public void com.lynx.tasm.behavior.shadow.text.TextAttributes.setHasValidTypeface(boolean hasTypefaceUpdated);
  public boolean com.lynx.tasm.behavior.shadow.text.TextAttributes.getHyphen();
  public void com.lynx.tasm.behavior.shadow.text.TextAttributes.setHyphen(boolean enable);
}

public interface com::lynx::tasm::behavior::StyleConstants::TextDecoration {
}

public class com::lynx::tasm::behavior::shadow::text::TextDecorationSpan : CharacterStyle {
  public boolean com.lynx.tasm.behavior.shadow.text.TextDecorationSpan.mUnderline mUnderline;
  public boolean com.lynx.tasm.behavior.shadow.text.TextDecorationSpan.mLineThrough mLineThrough;
  public int com.lynx.tasm.behavior.shadow.text.TextDecorationSpan.mTextDecorationStyle mTextDecorationStyle;
  public int com.lynx.tasm.behavior.shadow.text.TextDecorationSpan.mTextDecorationColor mTextDecorationColor;
  public com.lynx.tasm.behavior.shadow.text.TextDecorationSpan.TextDecorationSpan(boolean underline, boolean lineThrough, int textDecorationStyle, int textDecorationColor);
  public void com.lynx.tasm.behavior.shadow.text.TextDecorationSpan.updateDrawState(TextPaint textPaint);
}

public class com::lynx::tasm::behavior::shadow::text::TextHelper :  {
  public static TextPaint com.lynx.tasm.behavior.shadow.text.TextHelper.newTextPaint(LynxContext context, TextAttributes attributes, TypefaceCache.TypefaceListener listener);
  public static TextPaint com.lynx.tasm.behavior.shadow.text.TextHelper.newTextPaint(TextAttributes attributes, Typeface typefaceCache);
  public static Typeface com.lynx.tasm.behavior.shadow.text.TextHelper.getTypeFaceFromCache(LynxContext context, TextAttributes attributes, TypefaceCache.TypefaceListener listener);
  public static void com.lynx.tasm.behavior.shadow.text.TextHelper.drawLine(Canvas canvas, Layout textLayout);
  public static void com.lynx.tasm.behavior.shadow.text.TextHelper.draw(Canvas canvas, Layout textLayout, int textDecorationStyle, int textDecorationColor, boolean underline, boolean lineThrough, int start, int end, int absoluteSize);
  public static void com.lynx.tasm.behavior.shadow.text.TextHelper.drawSolid(Canvas canvas, Layout textLayout, int color, boolean underline, boolean lineThrough, int start, int end, float textSize);
  public static void com.lynx.tasm.behavior.shadow.text.TextHelper.drawDouble(Canvas canvas, Layout textLayout, int color, boolean underline, boolean lineThrough, int start, int end, float textSize);
  public static void com.lynx.tasm.behavior.shadow.text.TextHelper.drawDotted(Canvas canvas, Layout textLayout, int color, boolean underline, boolean lineThrough, int start, int end, float textSize);
  public static void com.lynx.tasm.behavior.shadow.text.TextHelper.drawDash(Canvas canvas, Layout textLayout, int color, boolean underline, boolean lineThrough, int start, int end, float textSize);
  public static void com.lynx.tasm.behavior.shadow.text.TextHelper.drawWavy(Canvas canvas, Layout textLayout, int color, boolean underline, boolean lineThrough, int start, int end, float textSize);
  public static void com.lynx.tasm.behavior.shadow.text.TextHelper.drawTextStroke(Layout textLayout, Canvas canvas);
  public static void com.lynx.tasm.behavior.shadow.text.TextHelper.drawText(Canvas canvas, Layout textLayout, float width);
  public static ArrayList< CharSequence > com.lynx.tasm.behavior.shadow.text.TextHelper.splitLineToWords(CharSequence line, boolean isRtl);
  public static LynxDetailEvent com.lynx.tasm.behavior.shadow.text.TextHelper.getTextLayoutEvent(int sign, Layout layout, int textOverflow, int lineCount, int ellipsisCount, int spannableStringLength, float textLayoutWidth, boolean containTextSize);
  public static void com.lynx.tasm.behavior.shadow.text.TextHelper.dispatchLayoutEvent(TextShadowNode textShadowNode);
  public static TextPaint com.lynx.tasm.behavior.shadow.text.TextHelper.newTextPaint(float fontSize, String fontFamily);
  public static double com.lynx.tasm.behavior.shadow.text.TextHelper.getTextWidth(String text, String fontSize, @Nullable String fontFamily);
  public static String com.lynx.tasm.behavior.shadow.text.TextHelper.getFirstLineText(String text, String fontSize, @Nullable String fontFamily, String maxWidth);
  public static JavaOnlyMap com.lynx.tasm.behavior.shadow.text.TextHelper.getTextInfo(String text, String fontSize, @Nullable String fontFamily, @Nullable String maxWidth, int maxLine);
  public static int com.lynx.tasm.behavior.shadow.text.TextHelper.calcTextTranslateTopOffsetAndAdjustFontMetric(int lineHeight, Paint.FontMetricsInt fm, boolean includeFontPadding);
  public static String com.lynx.tasm.behavior.shadow.text.TextHelper.convertRawTextValue(@Nullable Dynamic text);
  public static String com.lynx.tasm.behavior.shadow.text.TextHelper.formatDoubleToString(double num);
  public static String com.lynx.tasm.behavior.shadow.text.TextHelper.formatDoubleToStringManually(double num);
  public static void com.lynx.tasm.behavior.shadow.text.TextHelper.updateTextPaintColor(TextPaint textPaint, boolean isDrawStroke, int color, int strokeColor, float strokeWidth);
  public static void com.lynx.tasm.behavior.shadow.text.TextHelper.updateTextPaintTypeFace(TextPaint textPaint, String fontFamily, int style, int weight);
}

public class com::lynx::tasm::behavior::shadow::text::TextIndent :  {
  public com.lynx.tasm.behavior.shadow.text.TextIndent.TextIndent(ReadableArray arr);
  public float com.lynx.tasm.behavior.shadow.text.TextIndent.getValue(float width);
  public boolean com.lynx.tasm.behavior.shadow.text.TextIndent.equals(Object obj);
  public int com.lynx.tasm.behavior.shadow.text.TextIndent.hashCode();
}

public class com::lynx::tasm::behavior::shadow::text::TextLayoutWarmer : HandlerThread {
  public static TextLayoutWarmer com.lynx.tasm.behavior.shadow.text.TextLayoutWarmer.warmer();
  public void com.lynx.tasm.behavior.shadow.text.TextLayoutWarmer.warmLayout(Layout layout);
}

public class com::lynx::tasm::behavior::shadow::text::TextMeasurer :  {
  public com.lynx.tasm.behavior.shadow.text.TextMeasurer.TextMeasurer(LynxContext context);
  public float[] com.lynx.tasm.behavior.shadow.text.TextMeasurer.measureText(int sign, ReadableCompactArrayBuffer valueArray, float width, int widthMode, float height, int heightMode);
  public Object com.lynx.tasm.behavior.shadow.text.TextMeasurer.takeTextLayout(int sign);
  public void com.lynx.tasm.behavior.shadow.text.TextMeasurer.releaseLayoutObject(int sign);
  public void com.lynx.tasm.behavior.shadow.text.TextMeasurer.removeLayoutObjects();
}

public class com::lynx::tasm::behavior::shadow::text::TextRenderer :  {
  public Layout com.lynx.tasm.behavior.shadow.text.TextRenderer.getTextLayout();
  public int com.lynx.tasm.behavior.shadow.text.TextRenderer.getEllipsisCount();
  public PointF com.lynx.tasm.behavior.shadow.text.TextRenderer.getTextTranslateOffset();
  public boolean com.lynx.tasm.behavior.shadow.text.TextRenderer.isNeedCalcOffsetForLineHeight();
  public int com.lynx.tasm.behavior.shadow.text.TextRenderer.getTextLayoutWidth();
  public int com.lynx.tasm.behavior.shadow.text.TextRenderer.getTextLayoutHeight();
  public int com.lynx.tasm.behavior.shadow.text.TextRenderer.getLineCount();
  public boolean com.lynx.tasm.behavior.shadow.text.TextRenderer.isEnableCache();
}

public class com::lynx::tasm::behavior::shadow::text::TextRendererCache :  {
  public static TextRendererCache com.lynx.tasm.behavior.shadow.text.TextRendererCache.cache();
  public void com.lynx.tasm.behavior.shadow.text.TextRendererCache.onLowMemory();
  public void com.lynx.tasm.behavior.shadow.text.TextRendererCache.clearCache();
  public TextRenderer com.lynx.tasm.behavior.shadow.text.TextRendererCache.getRenderer(LynxContext context, TextRendererKey key);
}

public class com::lynx::tasm::behavior::shadow::text::TextRendererKey :  {
  public final float com.lynx.tasm.behavior.shadow.text.TextRendererKey.width width;
  public final float com.lynx.tasm.behavior.shadow.text.TextRendererKey.height height;
  public com.lynx.tasm.behavior.shadow.text.TextRendererKey.TextRendererKey(CharSequence text, TextAttributes attributes, MeasureMode widthMode, MeasureMode heightMode, float width, float height, int wordBreakStrategy, boolean enableTailColorConvert, boolean enabledTextRefactor, boolean enableTextBoringLayout);
  public TextAttributes com.lynx.tasm.behavior.shadow.text.TextRendererKey.getAttributes();
  public CharSequence com.lynx.tasm.behavior.shadow.text.TextRendererKey.getSpan();
  public String com.lynx.tasm.behavior.shadow.text.TextRendererKey.toString();
  public boolean com.lynx.tasm.behavior.shadow.text.TextRendererKey.equals(Object o);
  public int com.lynx.tasm.behavior.shadow.text.TextRendererKey.hashCode();
}

public class com::lynx::tasm::behavior::shadow::text::TextShadowNode : com.lynx.tasm.behavior.shadow.text.BaseTextShadowNode, com.lynx.tasm.behavior.shadow.CustomMeasureFunc {
  public com.lynx.tasm.behavior.shadow.text.TextShadowNode.TextShadowNode();
  public void com.lynx.tasm.behavior.shadow.text.TextShadowNode.onLayoutBefore();
  public long com.lynx.tasm.behavior.shadow.text.TextShadowNode.measure(LayoutNode node, float width, MeasureMode widthMode, float height, MeasureMode heightMode);
  public int com.lynx.tasm.behavior.shadow.text.TextShadowNode.getEllipsisCount();
  public boolean com.lynx.tasm.behavior.shadow.text.TextShadowNode.isBindEvent(String eventName);
  public MeasureResult com.lynx.tasm.behavior.shadow.text.TextShadowNode.measure(MeasureParam param, @Nullable MeasureContext ctx);
  public void com.lynx.tasm.behavior.shadow.text.TextShadowNode.align(AlignParam param, AlignContext ctx);
  public Object com.lynx.tasm.behavior.shadow.text.TextShadowNode.getExtraBundle();
  public int com.lynx.tasm.behavior.shadow.text.TextShadowNode.getSpannableStringLength();
  public TextRenderer com.lynx.tasm.behavior.shadow.text.TextShadowNode.getTextRenderer();
  public void com.lynx.tasm.behavior.shadow.text.TextShadowNode.setEnableTailColorConvert(boolean enable);
  public void com.lynx.tasm.behavior.shadow.text.TextShadowNode.setEnableFullJustify(boolean enable);
  public void com.lynx.tasm.behavior.shadow.text.TextShadowNode.setLineHeight(float lineHeight);
  public void com.lynx.tasm.behavior.shadow.text.TextShadowNode.setAutoFontSize(ReadableArray autoFontSize);
  public void com.lynx.tasm.behavior.shadow.text.TextShadowNode.setAutoFontSizePresetSizes(ReadableArray presetSizes);
  public void com.lynx.tasm.behavior.shadow.text.TextShadowNode.setVerticalTextAlign(String verticalTextAlign);
  public void com.lynx.tasm.behavior.shadow.text.TextShadowNode.setHyphen(int value);
}

public class com::lynx::tasm::behavior::shadow::text::TextUpdateBundle :  {
  public com.lynx.tasm.behavior.shadow.text.TextUpdateBundle.TextUpdateBundle(Layout layout, boolean containsImages, Set viewTruncatedSet, boolean isJustify);
  public Layout com.lynx.tasm.behavior.shadow.text.TextUpdateBundle.getTextLayout();
  public boolean com.lynx.tasm.behavior.shadow.text.TextUpdateBundle.hasImages();
  public Set com.lynx.tasm.behavior.shadow.text.TextUpdateBundle.getViewTruncatedSet();
  public void com.lynx.tasm.behavior.shadow.text.TextUpdateBundle.setTextTranslateOffset(PointF offset);
  public void com.lynx.tasm.behavior.shadow.text.TextUpdateBundle.setNeedDrawStroke(boolean need);
  public boolean com.lynx.tasm.behavior.shadow.text.TextUpdateBundle.getNeedDrawStroke();
  public PointF com.lynx.tasm.behavior.shadow.text.TextUpdateBundle.getTextTranslateOffset();
  public boolean com.lynx.tasm.behavior.shadow.text.TextUpdateBundle.isJustify();
  public void com.lynx.tasm.behavior.shadow.text.TextUpdateBundle.setOriginText(CharSequence string);
  public CharSequence com.lynx.tasm.behavior.shadow.text.TextUpdateBundle.getOriginText();
}

public interface com::lynx::tasm::provider::ThemeResourceProvider {
  public String com.lynx.tasm.provider.ThemeResourceProvider.translateResourceForTheme(String resId, LynxTheme theme, String themeKey, LynxView view);
}

public enum com::lynx::tasm::ThreadStrategyForRendering {
  public com.lynx.tasm.ThreadStrategyForRendering.ALL_ON_UI ALL_ON_UI;
  public com.lynx.tasm.ThreadStrategyForRendering.MOST_ON_TASM MOST_ON_TASM;
  public com.lynx.tasm.ThreadStrategyForRendering.PART_ON_LAYOUT PART_ON_LAYOUT;
  public com.lynx.tasm.ThreadStrategyForRendering.MULTI_THREADS MULTI_THREADS;
  public com.lynx.tasm.ThreadStrategyForRendering.ThreadStrategyForRendering(int id);
  public int com.lynx.tasm.ThreadStrategyForRendering.id();
}

public class com::lynx::tasm::performance::timing::TimingConstants :  {
  public final String com.lynx.tasm.performance.timing.TimingConstants.PIPELINE_START PIPELINE_START;
  public final String com.lynx.tasm.performance.timing.TimingConstants.LOAD_BUNDLE_START LOAD_BUNDLE_START;
  public final String com.lynx.tasm.performance.timing.TimingConstants.RELOAD_BUNDLE_START RELOAD_BUNDLE_START;
  public final String com.lynx.tasm.performance.timing.TimingConstants.VERIFY_TASM_START VERIFY_TASM_START;
  public final String com.lynx.tasm.performance.timing.TimingConstants.VERIFY_TASM_END VERIFY_TASM_END;
  public final String com.lynx.tasm.performance.timing.TimingConstants.FFI_START FFI_START;
  public final String com.lynx.tasm.performance.timing.TimingConstants.LOAD_BUNDLE LOAD_BUNDLE;
  public final String com.lynx.tasm.performance.timing.TimingConstants.RELOAD_BUNDLE_FROM_NATIVE RELOAD_BUNDLE_FROM_NATIVE;
  public final String com.lynx.tasm.performance.timing.TimingConstants.PIPELINE_ORIGIN PIPELINE_ORIGIN;
  public final String com.lynx.tasm.performance.timing.TimingConstants.TIMESTAMP_MAP TIMESTAMP_MAP;
}

public class com::lynx::tasm::TimingHandler :  {
  public final String com.lynx.tasm.TimingHandler.CREATE_LYNX_START CREATE_LYNX_START;
  public final String com.lynx.tasm.TimingHandler.CREATE_LYNX_END CREATE_LYNX_END;
  public final String com.lynx.tasm.TimingHandler.OPEN_TIME OPEN_TIME;
  public final String com.lynx.tasm.TimingHandler.CONTAINER_INIT_START CONTAINER_INIT_START;
  public final String com.lynx.tasm.TimingHandler.CONTAINER_INIT_END CONTAINER_INIT_END;
  public final String com.lynx.tasm.TimingHandler.PREPARE_TEMPLATE_START PREPARE_TEMPLATE_START;
  public final String com.lynx.tasm.TimingHandler.PREPARE_TEMPLATE_END PREPARE_TEMPLATE_END;
}

public class com::lynx::tasm::performance::TimingOption :  {
  public final String com.lynx.tasm.performance.TimingOption.pipelineOrigin pipelineOrigin;
  public final HashMap<String, Long> com.lynx.tasm.performance.TimingOption.timingInfo timingInfo;
  public com.lynx.tasm.performance.TimingOption.TimingOption(String pipelineOrigin);
  public void com.lynx.tasm.performance.TimingOption.setTiming(String key, long msTimingStamp);
  public JavaOnlyMap com.lynx.tasm.performance.TimingOption.toJavaOnlyMap();
}

public class com::lynx::tasm::performance::timing::TimingUtil :  {
  public static long com.lynx.tasm.performance.timing.TimingUtil.currentTimeUs();
}

public class com::lynx::tasm::behavior::TouchEventDispatcher :  {
  public final String com.lynx.tasm.behavior.TouchEventDispatcher.mTapSlopDefault mTapSlopDefault;
  public final float com.lynx.tasm.behavior.TouchEventDispatcher.mTapSlopFloatDefault mTapSlopFloatDefault;
  public com.lynx.tasm.behavior.TouchEventDispatcher.TouchEventDispatcher(@NonNull LynxUIOwner owner);
  public void com.lynx.tasm.behavior.TouchEventDispatcher.attachContext(Context context);
  public void com.lynx.tasm.behavior.TouchEventDispatcher.onGestureRecognized();
  public void com.lynx.tasm.behavior.TouchEventDispatcher.setGestureArenaManager(GestureArenaManager manager);
  public void com.lynx.tasm.behavior.TouchEventDispatcher.onGestureRecognized(LynxBaseUI ui);
  public void com.lynx.tasm.behavior.TouchEventDispatcher.onGestureRecognized(int sign);
  public void com.lynx.tasm.behavior.TouchEventDispatcher.onPropsChanged(LynxBaseUI ui);
  public boolean com.lynx.tasm.behavior.TouchEventDispatcher.isTouchMoving();
  public void com.lynx.tasm.behavior.TouchEventDispatcher.setHasTouchPseudo(boolean value);
  public void com.lynx.tasm.behavior.TouchEventDispatcher.setEnableMultiTouch(boolean value);
  public boolean com.lynx.tasm.behavior.TouchEventDispatcher.consumeSlideEvent(MotionEvent ev);
  public boolean com.lynx.tasm.behavior.TouchEventDispatcher.blockNativeEvent(MotionEvent ev);
  public boolean com.lynx.tasm.behavior.TouchEventDispatcher.eventThrough();
  public void com.lynx.tasm.behavior.TouchEventDispatcher.setTapSlop(float tapSlop);
  public void com.lynx.tasm.behavior.TouchEventDispatcher.fireClick(MotionEvent e);
  public void com.lynx.tasm.behavior.TouchEventDispatcher.fireTap(MotionEvent e);
  public void com.lynx.tasm.behavior.TouchEventDispatcher.fireLongpress(MotionEvent e);
  public void com.lynx.tasm.behavior.TouchEventDispatcher.destroy();
  public boolean com.lynx.tasm.behavior.TouchEventDispatcher.handleFirstTouchDown(MotionEvent ev, UIGroup rootUi);
  public void com.lynx.tasm.behavior.TouchEventDispatcher.handleOtherTouchDown(MotionEvent ev, UIGroup rootUi);
  public void com.lynx.tasm.behavior.TouchEventDispatcher.handleTouchMove(MotionEvent ev);
  public void com.lynx.tasm.behavior.TouchEventDispatcher.handleOtherTouchUp(MotionEvent ev);
  public void com.lynx.tasm.behavior.TouchEventDispatcher.handleFirstTouchUp(MotionEvent ev);
  public void com.lynx.tasm.behavior.TouchEventDispatcher.handleTouchCancel(MotionEvent ev);
  public boolean com.lynx.tasm.behavior.TouchEventDispatcher.onTouchEvent(MotionEvent ev, UIGroup rootUi);
  public void com.lynx.tasm.behavior.TouchEventDispatcher.setFocusedUI(LynxBaseUI focusedUI);
  public void com.lynx.tasm.behavior.TouchEventDispatcher.reset();
}

public class com::lynx::tasm::base::trace::TraceEventDef :  {
  public final String com.lynx.tasm.base.trace.TraceEventDef.LYNX_TEMPLATE_RENDER_DRAW LYNX_TEMPLATE_RENDER_DRAW;
  public final String com.lynx.tasm.base.trace.TraceEventDef.LYNX_TEMPLATE_RENDER_LAYOUT LYNX_TEMPLATE_RENDER_LAYOUT;
  public final String com.lynx.tasm.base.trace.TraceEventDef.LYNX_TEMPLATE_RENDER_MEASURE LYNX_TEMPLATE_RENDER_MEASURE;
  public final String com.lynx.tasm.base.trace.TraceEventDef.TEXT_SHADOW_NODE_MEASURE TEXT_SHADOW_NODE_MEASURE;
  public final String com.lynx.tasm.base.trace.TraceEventDef.IMAGE_SHOULD_REDIRECT_IMAGE_URL IMAGE_SHOULD_REDIRECT_IMAGE_URL;
  public final String com.lynx.tasm.base.trace.TraceEventDef.UI_BODY_ATTACH_UI_BODY_VIEW UI_BODY_ATTACH_UI_BODY_VIEW;
  public final String com.lynx.tasm.base.trace.TraceEventDef.UI_BODY_DETACH_UI_BODY_VIEW UI_BODY_DETACH_UI_BODY_VIEW;
  public final String com.lynx.tasm.base.trace.TraceEventDef.UI_BODY_REBUILD_VIEW_TREE UI_BODY_REBUILD_VIEW_TREE;
  public final String com.lynx.tasm.base.trace.TraceEventDef.DEVTOOL_INIT DEVTOOL_INIT;
  public final String com.lynx.tasm.base.trace.TraceEventDef.CANCEL_RESOURCE_PREFETCH CANCEL_RESOURCE_PREFETCH;
  public final String com.lynx.tasm.base.trace.TraceEventDef.REQUEST_RESOURCE_PREFETCH REQUEST_RESOURCE_PREFETCH;
  public final String com.lynx.tasm.base.trace.TraceEventDef.ENGINE_BUILDER_BUILD ENGINE_BUILDER_BUILD;
  public final String com.lynx.tasm.base.trace.TraceEventDef.GENERIC_INFO_INIT GENERIC_INFO_INIT;
  public final String com.lynx.tasm.base.trace.TraceEventDef.GENERIC_INFO_UPDATE_RELATIVE_URL GENERIC_INFO_UPDATE_RELATIVE_URL;
  public final String com.lynx.tasm.base.trace.TraceEventDef.TEMPLATE_RENDER_INIT TEMPLATE_RENDER_INIT;
  public final String com.lynx.tasm.base.trace.TraceEventDef.TEMPLATE_RENDER_INIT_PIPER TEMPLATE_RENDER_INIT_PIPER;
  public final String com.lynx.tasm.base.trace.TraceEventDef.TEMPLATE_RENDER_START_LOAD TEMPLATE_RENDER_START_LOAD;
  public final String com.lynx.tasm.base.trace.TraceEventDef.FIRST_MEANINGFUL_PAINT FIRST_MEANINGFUL_PAINT;
  public final String com.lynx.tasm.base.trace.TraceEventDef.TEMPLATE_RENDER_INIT_WITH_CONTEXT TEMPLATE_RENDER_INIT_WITH_CONTEXT;
  public final String com.lynx.tasm.base.trace.TraceEventDef.TEMPLATE_RENDER_CREATE_TASM TEMPLATE_RENDER_CREATE_TASM;
  public final String com.lynx.tasm.base.trace.TraceEventDef.TEMPLATE_RENDER_DISPATCH_ERROR TEMPLATE_RENDER_DISPATCH_ERROR;
  public final String com.lynx.tasm.base.trace.TraceEventDef.TEMPLATE_RENDER_SET_GLOBAL_PROPS TEMPLATE_RENDER_SET_GLOBAL_PROPS;
  public final String com.lynx.tasm.base.trace.TraceEventDef.TEMPLATE_RENDER_PROCESS_RENDER TEMPLATE_RENDER_PROCESS_RENDER;
  public final String com.lynx.tasm.base.trace.TraceEventDef.TEMPLATE_RENDER_ATTACH_LYNX_VIEW TEMPLATE_RENDER_ATTACH_LYNX_VIEW;
  public final String com.lynx.tasm.base.trace.TraceEventDef.TEMPLATE_RENDER_RELOAD_AND_INIT TEMPLATE_RENDER_RELOAD_AND_INIT;
  public final String com.lynx.tasm.base.trace.TraceEventDef.TEMPLATE_RENDER_FALLBACK_NEW_ENGINE TEMPLATE_RENDER_FALLBACK_NEW_ENGINE;
  public final String com.lynx.tasm.base.trace.TraceEventDef.CLIENT_REPORT_COMPONENT_INFO CLIENT_REPORT_COMPONENT_INFO;
  public final String com.lynx.tasm.base.trace.TraceEventDef.CLIENT_ON_PAGE_START CLIENT_ON_PAGE_START;
  public final String com.lynx.tasm.base.trace.TraceEventDef.CLIENT_ON_LOAD_SUCCESS CLIENT_ON_LOAD_SUCCESS;
  public final String com.lynx.tasm.base.trace.TraceEventDef.CLIENT_ON_PAGE_UPDATE CLIENT_ON_PAGE_UPDATE;
  public final String com.lynx.tasm.base.trace.TraceEventDef.CLIENT_ON_UPDATE_WITHOUT_CHANGE CLIENT_ON_UPDATE_WITHOUT_CHANGE;
  public final String com.lynx.tasm.base.trace.TraceEventDef.CLIENT_ON_TASM_FINISHED_BY_NATIVE CLIENT_ON_TASM_FINISHED_BY_NATIVE;
  public final String com.lynx.tasm.base.trace.TraceEventDef.CLIENT_ON_RUNTIME_READY CLIENT_ON_RUNTIME_READY;
  public final String com.lynx.tasm.base.trace.TraceEventDef.CLIENT_ON_DATA_UPDATED CLIENT_ON_DATA_UPDATED;
  public final String com.lynx.tasm.base.trace.TraceEventDef.CLIENT_ON_REPORT_COMPONENT CLIENT_ON_REPORT_COMPONENT;
  public final String com.lynx.tasm.base.trace.TraceEventDef.CLIENT_ON_DYNAMIC_COMPONENT_PERF CLIENT_ON_DYNAMIC_COMPONENT_PERF;
  public final String com.lynx.tasm.base.trace.TraceEventDef.CLIENT_ON_MODULE_FUNCTION CLIENT_ON_MODULE_FUNCTION;
  public final String com.lynx.tasm.base.trace.TraceEventDef.CLIENT_ON_TEMPLATE_BUNDLE_READY CLIENT_ON_TEMPLATE_BUNDLE_READY;
  public final String com.lynx.tasm.base.trace.TraceEventDef.DESTORY_LYNXVIEW DESTORY_LYNXVIEW;
  public final String com.lynx.tasm.base.trace.TraceEventDef.LYNXVIEW_BUILDER_BUILD LYNXVIEW_BUILDER_BUILD;
  public final String com.lynx.tasm.base.trace.TraceEventDef.CLIENT_LYNXVIEW_AND_JSRUNTIME_DESTORY CLIENT_LYNXVIEW_AND_JSRUNTIME_DESTORY;
  public final String com.lynx.tasm.base.trace.TraceEventDef.CLIENT_PIPER_INVOKED CLIENT_PIPER_INVOKED;
  public final String com.lynx.tasm.base.trace.TraceEventDef.CLIENT_DESTORY CLIENT_DESTORY;
  public final String com.lynx.tasm.base.trace.TraceEventDef.CLIENT_TIMING_SETUP CLIENT_TIMING_SETUP;
  public final String com.lynx.tasm.base.trace.TraceEventDef.CLIENT_TIMING_UPDATE CLIENT_TIMING_UPDATE;
  public final String com.lynx.tasm.base.trace.TraceEventDef.CLIENT_SCROLL_STOP CLIENT_SCROLL_STOP;
  public final String com.lynx.tasm.base.trace.TraceEventDef.CLIENT_SCROLL_START CLIENT_SCROLL_START;
  public final String com.lynx.tasm.base.trace.TraceEventDef.CLIENT_FLING CLIENT_FLING;
  public final String com.lynx.tasm.base.trace.TraceEventDef.CLIENT_ON_FIRST_SCREEN CLIENT_ON_FIRST_SCREEN;
  public final String com.lynx.tasm.base.trace.TraceEventDef.TEMPLATE_BUNDLE_FROM_TEMPLATE TEMPLATE_BUNDLE_FROM_TEMPLATE;
  public final String com.lynx.tasm.base.trace.TraceEventDef.TEMPLATE_DATA_FROM_MAP TEMPLATE_DATA_FROM_MAP;
  public final String com.lynx.tasm.base.trace.TraceEventDef.TEMPLATE_DATA_FROM_STRING TEMPLATE_DATA_FROM_STRING;
  public final String com.lynx.tasm.base.trace.TraceEventDef.CLEAN_REF_RUN_CLEAN_TASK_REAPER_THREAD CLEAN_REF_RUN_CLEAN_TASK_REAPER_THREAD;
  public final String com.lynx.tasm.base.trace.TraceEventDef.CLEAN_REF_HANDLE_MESSAGE CLEAN_REF_HANDLE_MESSAGE;
  public final String com.lynx.tasm.base.trace.TraceEventDef.CLEAN_REF_RUN_CLEAN_TASK_INVOKE_THREAD CLEAN_REF_RUN_CLEAN_TASK_INVOKE_THREAD;
  public final String com.lynx.tasm.base.trace.TraceEventDef.LYNX_CONTEXT_UPDATE_SESSION_ID LYNX_CONTEXT_UPDATE_SESSION_ID;
  public final String com.lynx.tasm.base.trace.TraceEventDef.INTERSECTION_OBSERVER_MANAGER_INIT INTERSECTION_OBSERVER_MANAGER_INIT;
  public final String com.lynx.tasm.base.trace.TraceEventDef.OBSERVER_MANAGER_OBSERVER_HANDLER OBSERVER_MANAGER_OBSERVER_HANDLER;
  public final String com.lynx.tasm.base.trace.TraceEventDef.UI_OWNER_INIT UI_OWNER_INIT;
  public final String com.lynx.tasm.base.trace.TraceEventDef.UI_OWNER_UPDATE_PROPS UI_OWNER_UPDATE_PROPS;
  public final String com.lynx.tasm.base.trace.TraceEventDef.UI_OWNER_UPDATE_EXTRA_DATA UI_OWNER_UPDATE_EXTRA_DATA;
  public final String com.lynx.tasm.base.trace.TraceEventDef.UI_OWNER_UPDATE_LAYOUT UI_OWNER_UPDATE_LAYOUT;
  public final String com.lynx.tasm.base.trace.TraceEventDef.UI_OWNER_CREATE_VIEW UI_OWNER_CREATE_VIEW;
  public final String com.lynx.tasm.base.trace.TraceEventDef.UI_OWNER_CREATE_VIEW_ASYNC UI_OWNER_CREATE_VIEW_ASYNC;
  public final String com.lynx.tasm.base.trace.TraceEventDef.UI_OWNER_CREATE_VIEW_ASYNC_RUNNABLE UI_OWNER_CREATE_VIEW_ASYNC_RUNNABLE;
  public final String com.lynx.tasm.base.trace.TraceEventDef.UI_OWNER_CREATE_VIEW_ASYNC_RUNNABLE_AFTER UI_OWNER_CREATE_VIEW_ASYNC_RUNNABLE_AFTER;
  public final String com.lynx.tasm.base.trace.TraceEventDef.UI_OWNER_CREATE_VIEW_ASYNC_AFTER UI_OWNER_CREATE_VIEW_ASYNC_AFTER;
  public final String com.lynx.tasm.base.trace.TraceEventDef.UI_OWNER_UPDATE_FLATTEN UI_OWNER_UPDATE_FLATTEN;
  public final String com.lynx.tasm.base.trace.TraceEventDef.UI_OWNER_REBUILD_VIEW_TREE UI_OWNER_REBUILD_VIEW_TREE;
  public final String com.lynx.tasm.base.trace.TraceEventDef.UI_OWNER_REMOVE UI_OWNER_REMOVE;
  public final String com.lynx.tasm.base.trace.TraceEventDef.UI_OWNER_DESTORY_ITEM UI_OWNER_DESTORY_ITEM;
  public final String com.lynx.tasm.base.trace.TraceEventDef.UI_OWNER_DESTORY UI_OWNER_DESTORY;
  public final String com.lynx.tasm.base.trace.TraceEventDef.UI_OWNER_LAYOUT_FINISH UI_OWNER_LAYOUT_FINISH;
  public final String com.lynx.tasm.base.trace.TraceEventDef.UI_OWNER_INVOKE_UI_METHOD_FOR_SELECTOR_QUERY UI_OWNER_INVOKE_UI_METHOD_FOR_SELECTOR_QUERY;
  public final String com.lynx.tasm.base.trace.TraceEventDef.PAINTING_CONTEXT_REMOVE_LIST_ITEM PAINTING_CONTEXT_REMOVE_LIST_ITEM;
  public final String com.lynx.tasm.base.trace.TraceEventDef.PAINTING_CONTEXT_INSERT_LIST_ITEM PAINTING_CONTEXT_INSERT_LIST_ITEM;
  public final String com.lynx.tasm.base.trace.TraceEventDef.TYPEFACE_CACHE_CATCH_FROM_FILE TYPEFACE_CACHE_CATCH_FROM_FILE;
  public final String com.lynx.tasm.base.trace.TraceEventDef.FLATTEN_UI_DRAW FLATTEN_UI_DRAW;
  public final String com.lynx.tasm.base.trace.TraceEventDef.LYNX_UI_MEASURE LYNX_UI_MEASURE;
  public final String com.lynx.tasm.base.trace.TraceEventDef.LYNX_UI_LAYOUT LYNX_UI_LAYOUT;
  public final String com.lynx.tasm.base.trace.TraceEventDef.CREATE_BITMAP_SHADER CREATE_BITMAP_SHADER;
  public final String com.lynx.tasm.base.trace.TraceEventDef.IMAGE_SERVICE_PROXY_FETCH_IMAGE IMAGE_SERVICE_PROXY_FETCH_IMAGE;
  public final String com.lynx.tasm.base.trace.TraceEventDef.IMAGE_MANAGER_UPDATE_PROPS_INTERVAL IMAGE_MANAGER_UPDATE_PROPS_INTERVAL;
  public final String com.lynx.tasm.base.trace.TraceEventDef.IMAGE_MANAGER_UPDATE_IMAGE_SOURCE IMAGE_MANAGER_UPDATE_IMAGE_SOURCE;
  public final String com.lynx.tasm.base.trace.TraceEventDef.IMAGE_MANAGER_UPDATE_PLACEHOLDER_SOURCE IMAGE_MANAGER_UPDATE_PLACEHOLDER_SOURCE;
  public final String com.lynx.tasm.base.trace.TraceEventDef.UI_LIST_MEASURE UI_LIST_MEASURE;
  public final String com.lynx.tasm.base.trace.TraceEventDef.UI_LIST_LAYOUT UI_LIST_LAYOUT;
  public final String com.lynx.tasm.base.trace.TraceEventDef.LIST_CONTAINER_VIEW_DESTORY LIST_CONTAINER_VIEW_DESTORY;
  public final String com.lynx.tasm.base.trace.TraceEventDef.FLATTEN_UI_TEXT_DRAW FLATTEN_UI_TEXT_DRAW;
  public final String com.lynx.tasm.base.trace.TraceEventDef.LEPUS_BUFFER_ENCODE_MESSAGE LEPUS_BUFFER_ENCODE_MESSAGE;
  public final String com.lynx.tasm.base.trace.TraceEventDef.LEPUS_BUFFER_DECODE_MESSAGE LEPUS_BUFFER_DECODE_MESSAGE;
  public final String com.lynx.tasm.base.trace.TraceEventDef.EVENT_REPORTER_ON_EVENT EVENT_REPORTER_ON_EVENT;
  public final String com.lynx.tasm.base.trace.TraceEventDef.EVENT_REPORTER_HANDLE_EVENT EVENT_REPORTER_HANDLE_EVENT;
  public final String com.lynx.tasm.base.trace.TraceEventDef.EVENT_REPORTER_UPDATE_GENERIC_INFO EVENT_REPORTER_UPDATE_GENERIC_INFO;
  public final String com.lynx.tasm.base.trace.TraceEventDef.EVENT_REPORTER_REMOVE_GENERIC_INFO EVENT_REPORTER_REMOVE_GENERIC_INFO;
  public final String com.lynx.tasm.base.trace.TraceEventDef.FONT_FACE_MANAGER_LOAD_TYPEFACE_WITH_GENERIC_RESOURCE_FETCHER FONT_FACE_MANAGER_LOAD_TYPEFACE_WITH_GENERIC_RESOURCE_FETCHER;
  public final String com.lynx.tasm.base.trace.TraceEventDef.FONT_FACE_MANAGER_LOAD_TYPEFACE FONT_FACE_MANAGER_LOAD_TYPEFACE;
  public final String com.lynx.tasm.base.trace.TraceEventDef.NINE_PATCH_HELPER_GET_MATRIX NINE_PATCH_HELPER_GET_MATRIX;
  public final String com.lynx.tasm.base.trace.TraceEventDef.NINE_PATCH_HELPER_DRAW_NINE_PATH NINE_PATCH_HELPER_DRAW_NINE_PATH;
  public final String com.lynx.tasm.base.trace.TraceEventDef.NINE_PATCH_HELPER_DRAW_WITH_CAP_INSETS NINE_PATCH_HELPER_DRAW_WITH_CAP_INSETS;
  public final String com.lynx.tasm.base.trace.TraceEventDef.FETCHER_WRAPPER_USE_RESOURCE_SERVICE FETCHER_WRAPPER_USE_RESOURCE_SERVICE;
  public final String com.lynx.tasm.base.trace.TraceEventDef.FETCHER_WRAPPER_USE_LAZY_BUNDLE_FETCHER FETCHER_WRAPPER_USE_LAZY_BUNDLE_FETCHER;
  public final String com.lynx.tasm.base.trace.TraceEventDef.LYNX_SERVICE_CENTER_INIT LYNX_SERVICE_CENTER_INIT;
  public final String com.lynx.tasm.base.trace.TraceEventDef.FLUENCY_TRACER_START FLUENCY_TRACER_START;
  public final String com.lynx.tasm.base.trace.TraceEventDef.FLUENCY_TRACER_STOP FLUENCY_TRACER_STOP;
  public final String com.lynx.tasm.base.trace.TraceEventDef.INSTANCE_ID INSTANCE_ID;
}

public class com::lynx::tasm::behavior::ui::utils::TransformOrigin :  {
  public final TransformOrigin com.lynx.tasm.behavior.ui.utils.TransformOrigin.TRANSFORM_ORIGIN_DEFAULT TRANSFORM_ORIGIN_DEFAULT;
  public static TransformOrigin com.lynx.tasm.behavior.ui.utils.TransformOrigin.MakeTransformOrigin(ReadableArray array);
  public static boolean com.lynx.tasm.behavior.ui.utils.TransformOrigin.hasPercent(@Nullable TransformOrigin to);
  public boolean com.lynx.tasm.behavior.ui.utils.TransformOrigin.isValid();
  public boolean com.lynx.tasm.behavior.ui.utils.TransformOrigin.isP0Valid();
  public boolean com.lynx.tasm.behavior.ui.utils.TransformOrigin.isP1Valid();
  public boolean com.lynx.tasm.behavior.ui.utils.TransformOrigin.isP0Percent();
  public boolean com.lynx.tasm.behavior.ui.utils.TransformOrigin.isP1Percent();
  public boolean com.lynx.tasm.behavior.ui.utils.TransformOrigin.hasPercent();
  public float com.lynx.tasm.behavior.ui.utils.TransformOrigin.getP0();
  public float com.lynx.tasm.behavior.ui.utils.TransformOrigin.getP1();
}

public class com::lynx::tasm::behavior::ui::utils::TransformProps :  {
  public com.lynx.tasm.behavior.ui.utils.TransformProps.TransformProps();
  public void com.lynx.tasm.behavior.ui.utils.TransformProps.reset();
  public float com.lynx.tasm.behavior.ui.utils.TransformProps.getTranslationX();
  public void com.lynx.tasm.behavior.ui.utils.TransformProps.setTranslationX(float translationX);
  public float com.lynx.tasm.behavior.ui.utils.TransformProps.getTranslationY();
  public void com.lynx.tasm.behavior.ui.utils.TransformProps.setTranslationY(float translationY);
  public void com.lynx.tasm.behavior.ui.utils.TransformProps.setTranslationZ(float translationZ);
  public float com.lynx.tasm.behavior.ui.utils.TransformProps.getTranslationZ();
  public float com.lynx.tasm.behavior.ui.utils.TransformProps.getRotation();
  public void com.lynx.tasm.behavior.ui.utils.TransformProps.setRotation(float rotation);
  public float com.lynx.tasm.behavior.ui.utils.TransformProps.getRotationX();
  public void com.lynx.tasm.behavior.ui.utils.TransformProps.setRotationX(float rotationX);
  public float com.lynx.tasm.behavior.ui.utils.TransformProps.getRotationY();
  public void com.lynx.tasm.behavior.ui.utils.TransformProps.setRotationY(float rotationY);
  public float com.lynx.tasm.behavior.ui.utils.TransformProps.getScaleX();
  public void com.lynx.tasm.behavior.ui.utils.TransformProps.setScaleX(float scaleX);
  public float com.lynx.tasm.behavior.ui.utils.TransformProps.getScaleY();
  public void com.lynx.tasm.behavior.ui.utils.TransformProps.setScaleY(float scaleY);
  public float com.lynx.tasm.behavior.ui.utils.TransformProps.getSkewX();
  public void com.lynx.tasm.behavior.ui.utils.TransformProps.setSkewX(float radians);
  public float com.lynx.tasm.behavior.ui.utils.TransformProps.getSkewY();
  public void com.lynx.tasm.behavior.ui.utils.TransformProps.setSkewY(float radians);
  public Matrix com.lynx.tasm.behavior.ui.utils.TransformProps.getTransformMatrix(float px, float py, Matrix mMatrix);
  public float com.lynx.tasm.behavior.ui.utils.TransformProps.getTransformOriginX();
  public void com.lynx.tasm.behavior.ui.utils.TransformProps.setTransformOriginX(float transformOriginX);
  public float com.lynx.tasm.behavior.ui.utils.TransformProps.getTransformOriginY();
  public void com.lynx.tasm.behavior.ui.utils.TransformProps.setTransformOriginY(float transformOriginY);
  public float com.lynx.tasm.behavior.ui.utils.TransformProps.toFinalValue(TransformRaw tr, float anchor);
  public Matrix4f com.lynx.tasm.behavior.ui.utils.TransformProps.transformPropsToMatrix4f();
  public static TransformProps com.lynx.tasm.behavior.ui.utils.TransformProps.processTransform(List< TransformRaw > transforms, float rootFontSize, float curFontSize, int rootWidth, int rootHeight, int width, int height);
  public static TransformProps com.lynx.tasm.behavior.ui.utils.TransformProps.processTransformInOrder(List< TransformRaw > transforms, float rootFontSize, float curFontSize, int rootWidth, int rootHeight, int width, int height);
  public static TransformProps com.lynx.tasm.behavior.ui.utils.TransformProps.processTransformOrigin(TransformOrigin transformOrigin, float width, float height);
  public static double[] com.lynx.tasm.behavior.ui.utils.TransformProps.convertFloatsToDoubles(float[] input);
  public static void com.lynx.tasm.behavior.ui.utils.TransformProps.matrix4fToTransformProps(Matrix4f transformMatrix3D, TransformProps transformProps);
}

public class com::lynx::tasm::behavior::ui::utils::TransformRaw :  {
  public int com.lynx.tasm.behavior.ui.utils.TransformRaw.getTransformType();
  public float com.lynx.tasm.behavior.ui.utils.TransformRaw.getP0();
  public PlatformLength com.lynx.tasm.behavior.ui.utils.TransformRaw.getPlatformLengthP0();
  public boolean com.lynx.tasm.behavior.ui.utils.TransformRaw.isP0Percent();
  public float com.lynx.tasm.behavior.ui.utils.TransformRaw.getP1();
  public PlatformLength com.lynx.tasm.behavior.ui.utils.TransformRaw.getPlatformLengthP1();
  public boolean com.lynx.tasm.behavior.ui.utils.TransformRaw.isP1Percent();
  public float com.lynx.tasm.behavior.ui.utils.TransformRaw.getP2();
  public PlatformLength com.lynx.tasm.behavior.ui.utils.TransformRaw.getPlatformLengthP2();
  public boolean com.lynx.tasm.behavior.ui.utils.TransformRaw.isP2Percent();
  public boolean com.lynx.tasm.behavior.ui.utils.TransformRaw.hasPercent();
  public float[] com.lynx.tasm.behavior.ui.utils.TransformRaw.getTransformRawData();
  public static TransformRaw com.lynx.tasm.behavior.ui.utils.TransformRaw.createTransformRaw(int transformType, float p0, int p0Unit, float p1, int p1Unit, float p2, int p2Unit);
  public static TransformRaw com.lynx.tasm.behavior.ui.utils.TransformRaw.createTransformRaw(int transformType, PlatformLength platformLengthP0, int p0Unit, PlatformLength platformLengthP1, int p1Unit, PlatformLength platformLengthP2, int p2Unit);
  public static List< TransformRaw > com.lynx.tasm.behavior.ui.utils.TransformRaw.toTransformRaw(ReadableArray items);
  public static boolean com.lynx.tasm.behavior.ui.utils.TransformRaw.hasPercent(List< TransformRaw > transforms);
  public static float com.lynx.tasm.behavior.ui.utils.TransformRaw.hasZValue(List< TransformRaw > transforms);
  public static float com.lynx.tasm.behavior.ui.utils.TransformRaw.hasXValue(List< TransformRaw > transforms);
  public static float com.lynx.tasm.behavior.ui.utils.TransformRaw.hasYValue(List< TransformRaw > transforms);
}

public class com::lynx::tasm::animation::transition::TransitionAnimationManager :  {
  public com.lynx.tasm.animation.transition.TransitionAnimationManager.TransitionAnimationManager(@Nullable LynxBaseUI ui);
  public boolean com.lynx.tasm.animation.transition.TransitionAnimationManager.isShouldTransitionType(int type);
  public boolean com.lynx.tasm.animation.transition.TransitionAnimationManager.initializeFromConfig(final @Nullable ReadableMap config);
  public void com.lynx.tasm.animation.transition.TransitionAnimationManager.endAllAnimators();
  public void com.lynx.tasm.animation.transition.TransitionAnimationManager.endAllLayoutAnimators();
  public void com.lynx.tasm.animation.transition.TransitionAnimationManager.endTransitionAnimator(Integer propertyID);
  public boolean com.lynx.tasm.animation.transition.TransitionAnimationManager.containTransition(int property);
  public boolean com.lynx.tasm.animation.transition.TransitionAnimationManager.containLayoutTransition();
  public boolean com.lynx.tasm.animation.transition.TransitionAnimationManager.hasAnimationRunning();
  public boolean com.lynx.tasm.animation.transition.TransitionAnimationManager.applyPropertyTransition(final LynxBaseUI ui, final int property, final Object value);
  public void com.lynx.tasm.animation.transition.TransitionAnimationManager.applyLayoutTransition(final LynxBaseUI ui, final int x, final int y, final int width, final int height, final int paddingLeft, final int paddingTop, final int paddingRight, final int paddingBottom, final int marginLeft, final int marginTop, final int marginRight, final int marginBottom, final int borderLeftWidth, final int borderTopWidth, final int borderRightWidth, final int borderBottomWidth, final Rect bound);
  public void com.lynx.tasm.animation.transition.TransitionAnimationManager.applyTransformTransition(LynxBaseUI ui);
  public void com.lynx.tasm.animation.transition.TransitionAnimationManager.startTransitions();
  public void com.lynx.tasm.animation.transition.TransitionAnimationManager.onDestroy();
  public static boolean com.lynx.tasm.animation.transition.TransitionAnimationManager.hasTransitionAnimation(StylesDiffMap map);
}

public class com::lynx::tasm::behavior::ui::LynxBaseUI::TransOffset :  {
  public float [] com.lynx.tasm.behavior.ui.LynxBaseUI.TransOffset.left_top left_top;
  public float [] com.lynx.tasm.behavior.ui.LynxBaseUI.TransOffset.right_top right_top;
  public float [] com.lynx.tasm.behavior.ui.LynxBaseUI.TransOffset.right_bottom right_bottom;
  public float [] com.lynx.tasm.behavior.ui.LynxBaseUI.TransOffset.left_bottom left_bottom;
}

public enum com::lynx::tasm::fontface::FontFace::TYPE {
  public com.lynx.tasm.fontface.FontFace.TYPE.URL URL;
  public com.lynx.tasm.fontface.FontFace.TYPE.LOCAL LOCAL;
}

public enum com::lynx::tasm::utils::SizeValue::Type {
  public com.lynx.tasm.utils.SizeValue.Type.UNKNOWN UNKNOWN;
  public com.lynx.tasm.utils.SizeValue.Type.PERCENTAGE PERCENTAGE;
  public com.lynx.tasm.utils.SizeValue.Type.DEVICE_PX DEVICE_PX;
}

public class com::lynx::tasm::behavior::shadow::text::TypefaceCache :  {
  public static synchronized void com.lynx.tasm.behavior.shadow.text.TypefaceCache.addLazyProvider(LazyProvider provider);
  public static synchronized void com.lynx.tasm.behavior.shadow.text.TypefaceCache.removeLazyProvider(LazyProvider provider);
  public static synchronized boolean com.lynx.tasm.behavior.shadow.text.TypefaceCache.containsTypeface(String fontFamilyName);
  public static synchronized boolean com.lynx.tasm.behavior.shadow.text.TypefaceCache.containsTypeface(String fontFamilyName, int style);
  public static synchronized void com.lynx.tasm.behavior.shadow.text.TypefaceCache.cacheTypeface(String fontFamilyName, int style, @NonNull Typeface typeface);
  public static synchronized void com.lynx.tasm.behavior.shadow.text.TypefaceCache.removePreRegisteredFontCache(@Nullable String fontFamilyName);
  public static void com.lynx.tasm.behavior.shadow.text.TypefaceCache.cacheFullStyleTypefacesFromAssets(AssetManager assetManager, String fontFamilyName, String path);
  public static void com.lynx.tasm.behavior.shadow.text.TypefaceCache.cacheTypefaceFromAssets(@NonNull AssetManager assetManager, @NonNull String fontFamilyName, int style, @NonNull String path);
  public static Typeface com.lynx.tasm.behavior.shadow.text.TypefaceCache.getTypefaceFromAssets(@NonNull AssetManager assetManager, @NonNull String fontFamilyName, int style, @NonNull String path);
  public static void com.lynx.tasm.behavior.shadow.text.TypefaceCache.cacheFullStyleTypefacesFromFile(String fontFamily, String path);
  public static void com.lynx.tasm.behavior.shadow.text.TypefaceCache.cacheTypefaceFromFile( @NonNull String fontFamilyName, int style, @NonNull String path);
  public static Typeface com.lynx.tasm.behavior.shadow.text.TypefaceCache.getTypefaceFromFile( @NonNull String fontFamilyName, int style, @NonNull String path);
  public static synchronized Typeface com.lynx.tasm.behavior.shadow.text.TypefaceCache.getTypeface(LynxContext context, final String fontFamily, final int style);
  public static synchronized Typeface com.lynx.tasm.behavior.shadow.text.TypefaceCache.getCachedTypeface(final String fontFamily, final int style);
  public static synchronized Typeface com.lynx.tasm.behavior.shadow.text.TypefaceCache.getTypeface(Typeface family, int style);
}

public class com::lynx::tasm::behavior::shadow::text::TextMeasurer::TypefaceListener : com.lynx.tasm.behavior.shadow.text.TypefaceCache.TypefaceListener {
  public void com.lynx.tasm.behavior.shadow.text.TextMeasurer.TypefaceListener.onTypefaceUpdate(Typeface typeface, int style);
}

public interface com::lynx::tasm::behavior::shadow::text::TypefaceCache::TypefaceListener {
  public void com.lynx.tasm.behavior.shadow.text.TypefaceCache.TypefaceListener.onTypefaceUpdate(Typeface typeface, final int style);
}

public class com::lynx::tasm::utils::TypefaceUtils :  {
  public static Typeface com.lynx.tasm.utils.TypefaceUtils.createFromBytes(Context context, byte[] bytes);
}

public class com::lynx::tasm::behavior::ui::UIBody : com.lynx.tasm.behavior.ui.UIGroup< UIBodyView > {
  public com.lynx.tasm.behavior.ui.UIBody.UIBody(LynxContext context, final UIBodyView view);
  public UIBodyView com.lynx.tasm.behavior.ui.UIBody.getBodyView();
  public synchronized void com.lynx.tasm.behavior.ui.UIBody.attachUIBodyView(UIBodyView view);
  public synchronized void com.lynx.tasm.behavior.ui.UIBody.detachUIBodyView();
  public void com.lynx.tasm.behavior.ui.UIBody.appendUIWithCreateViewAsync(LynxUI ui);
  public void com.lynx.tasm.behavior.ui.UIBody.rebuildViewTree();
  public void com.lynx.tasm.behavior.ui.UIBody.initialize();
  public void com.lynx.tasm.behavior.ui.UIBody.onPageConfigDecoded(PageConfig config);
  public void com.lynx.tasm.behavior.ui.UIBody.onLayoutUpdated();
  public boolean com.lynx.tasm.behavior.ui.UIBody.eventThrough();
  public void com.lynx.tasm.behavior.ui.UIBody.removeAll();
  public boolean com.lynx.tasm.behavior.ui.UIBody.enableNewAccessibility();
  public LynxAccessibilityWrapper com.lynx.tasm.behavior.ui.UIBody.getLynxAccessibilityWrapper();
  public EventTarget com.lynx.tasm.behavior.ui.UIBody.getParentLynxPageUI();
  public void com.lynx.tasm.behavior.ui.UIBody.setParentLynxPageUI(EventTarget parentLynxPageUI);
  public HashMap< String, EventTarget > com.lynx.tasm.behavior.ui.UIBody.getChildrenLynxPageUI();
  public void com.lynx.tasm.behavior.ui.UIBody.setChildrenLynxPageUI(HashMap< String, EventTarget > childrenLynxPageUI);
}

public class com::lynx::tasm::behavior::ui::UIBody::UIBodyView : FrameLayout, com.lynx.tasm.behavior.ui.IDrawChildHook.IDrawChildHookBinding {
  public com.lynx.tasm.behavior.ui.UIBody.UIBodyView.UIBodyView(Context context);
  public com.lynx.tasm.behavior.ui.UIBody.UIBodyView.UIBodyView(Context context, AttributeSet attrs);
  public View com.lynx.tasm.behavior.ui.UIBody.UIBodyView.obtainViewAccordingToNodeIndex(int nodeIndex);
  public void com.lynx.tasm.behavior.ui.UIBody.UIBodyView.registerViewAccordingToNodeIndex(int nodeIndex, View view);
  public void com.lynx.tasm.behavior.ui.UIBody.UIBodyView.removeExistingViews();
  public void com.lynx.tasm.behavior.ui.UIBody.UIBodyView.bindDrawChildHook(IDrawChildHook hook);
  public void com.lynx.tasm.behavior.ui.UIBody.UIBodyView.setLynxAccessibilityWrapper(LynxAccessibilityWrapper wrapper);
  public void com.lynx.tasm.behavior.ui.UIBody.UIBodyView.requestLayout();
  public long com.lynx.tasm.behavior.ui.UIBody.UIBodyView.getMeaningfulPaintTiming();
  public void com.lynx.tasm.behavior.ui.UIBody.UIBodyView.setTimingCollector(ITimingCollector timingCollector);
  public void com.lynx.tasm.behavior.ui.UIBody.UIBodyView.setInstanceId(int instanceId);
  public void com.lynx.tasm.behavior.ui.UIBody.UIBodyView.setChildrenDrawingOrderEnabled(boolean enabled);
  public boolean com.lynx.tasm.behavior.ui.UIBody.UIBodyView.dispatchHoverEvent(MotionEvent event);
  public boolean com.lynx.tasm.behavior.ui.UIBody.UIBodyView.requestSendAccessibilityEvent(View child, android.view.accessibility.AccessibilityEvent event);
  public void com.lynx.tasm.behavior.ui.UIBody.UIBodyView.SetShouldInterceptRequestLayout(boolean intercept);
  public boolean com.lynx.tasm.behavior.ui.UIBody.UIBodyView.HasPendingRequestLayout();
  public LynxBooleanOption com.lynx.tasm.behavior.ui.UIBody.UIBodyView.getLongTaskMonitorEnabled();
  public boolean com.lynx.tasm.behavior.ui.UIBody.UIBodyView.isAccessibilityDisabled();
  public boolean com.lynx.tasm.behavior.ui.UIBody.UIBodyView.isChildLynxPageUI();
  public void com.lynx.tasm.behavior.ui.UIBody.UIBodyView.setIsChildLynxPageUI(boolean isChildLynxPageUI);
  public void com.lynx.tasm.behavior.ui.UIBody.UIBodyView.setAttachLynxPageUICallback(attachLynxPageUICallback callback);
  public void com.lynx.tasm.behavior.ui.UIBody.UIBodyView.runOnTasmThread(Runnable runnable);
  public ILynxUIRenderer com.lynx.tasm.behavior.ui.UIBody.UIBodyView.getLynxUIRendererInternal();
  public void com.lynx.tasm.behavior.ui.UIBody.UIBodyView.setLynxUIRendererInternal(ILynxUIRenderer uiRenderer);
  public void com.lynx.tasm.behavior.ui.UIBody.UIBodyView.innerSetMeasuredDimension(int w, int h);
}

public class com::lynx::tasm::behavior::ui::scroll::UIBounceView : com::lynx::tasm::behavior::ui::view::UISimpleView< AndroidView > {
  public final int com.lynx.tasm.behavior.ui.scroll.UIBounceView.RIGHT RIGHT;
  public final int com.lynx.tasm.behavior.ui.scroll.UIBounceView.LEFT LEFT;
  public final int com.lynx.tasm.behavior.ui.scroll.UIBounceView.TOP TOP;
  public final int com.lynx.tasm.behavior.ui.scroll.UIBounceView.BOTTOM BOTTOM;
  public int com.lynx.tasm.behavior.ui.scroll.UIBounceView.mDirection mDirection;
  public com.lynx.tasm.behavior.ui.scroll.UIBounceView.UIBounceView(LynxContext context);
  public AndroidView com.lynx.tasm.behavior.ui.scroll.UIBounceView.createView(Context context);
  public void com.lynx.tasm.behavior.ui.scroll.UIBounceView.setDirection(Dynamic direction);
}

public class com::lynx::tasm::behavior::ui::view::UIComponent : com.lynx.tasm.behavior.ui.view.UIView {
  public com.lynx.tasm.behavior.ui.view.UIComponent.UIComponent(LynxContext context);
  public void com.lynx.tasm.behavior.ui.view.UIComponent.onLayoutUpdated();
  public void com.lynx.tasm.behavior.ui.view.UIComponent.setOnUpdateListener(OnUpdateListener listener);
  public OnUpdateListener com.lynx.tasm.behavior.ui.view.UIComponent.getOnUpdateListener();
  public String com.lynx.tasm.behavior.ui.view.UIComponent.getType();
  public void com.lynx.tasm.behavior.ui.view.UIComponent.setType(String type);
  public void com.lynx.tasm.behavior.ui.view.UIComponent.destroy();
  public boolean com.lynx.tasm.behavior.ui.view.UIComponent.isAccessibilityHostUI();
  public void com.lynx.tasm.behavior.ui.view.UIComponent.onNodeReady();
  public void com.lynx.tasm.behavior.ui.view.UIComponent.setNodeReadyListener(NodeReadyListener listener);
  public void com.lynx.tasm.behavior.ui.view.UIComponent.setItemKey(String key);
  public String com.lynx.tasm.behavior.ui.view.UIComponent.getItemKey();
  public void com.lynx.tasm.behavior.ui.view.UIComponent.setZIndex(int zIndex);
  public int com.lynx.tasm.behavior.ui.view.UIComponent.getZIndex();
}

public class com::lynx::tasm::behavior::ui::UIExposure : com.lynx.tasm.behavior.LynxObserverManager {
  public com.lynx.tasm.behavior.ui.UIExposure.UIExposure();
  public void com.lynx.tasm.behavior.ui.UIExposure.setCallback(ICallBack callback);
  public void com.lynx.tasm.behavior.ui.UIExposure.stopExposure(HashMap< String, Object > options);
  public void com.lynx.tasm.behavior.ui.UIExposure.resumeExposure();
  public boolean com.lynx.tasm.behavior.ui.UIExposure.addUIToExposedMap(LynxBaseUI ui, @Nullable String uniqueID, @Nullable JavaOnlyMap data, @Nullable JavaOnlyMap options);
  public void com.lynx.tasm.behavior.ui.UIExposure.removeUIFromExposedMap(LynxBaseUI ui, @Nullable String uniqueID);
  public void com.lynx.tasm.behavior.ui.UIExposure.setRootUI(UIBody ui);
  public void com.lynx.tasm.behavior.ui.UIExposure.clear();
}

public class com::lynx::tasm::behavior::ui::frame::UIFrame : com::lynx::tasm::behavior::ui::LynxUI< LynxFrameView > {
  public com.lynx.tasm.behavior.ui.frame.UIFrame.UIFrame(LynxContext context);
  public void com.lynx.tasm.behavior.ui.frame.UIFrame.updateExtraData(Object data);
  public void com.lynx.tasm.behavior.ui.frame.UIFrame.onNodeRemoved();
  public void com.lynx.tasm.behavior.ui.frame.UIFrame.updateLayout(int left, int top, int width, int height, int paddingLeft, int paddingTop, int paddingRight, int paddingBottom, int marginLeft, int marginTop, int marginRight, int marginBottom, int borderLeftWidth, int borderTopWidth, int borderRightWidth, int borderBottomWidth, Rect bound);
}

public class abstract com::lynx::tasm::behavior::ui::UIGroup : com.lynx.tasm.behavior.ui.LynxUI< T >, com.lynx.tasm.behavior.ui.UIParent, com.lynx.tasm.behavior.ui.IDrawChildHook {
  public boolean com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.isInsertViewCalled();
  public boolean com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.enableAutoClipRadius();
  public com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.UIGroup(final LynxContext context);
  public com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.UIGroup(final LynxContext context, Object param);
  public void com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.initialize();
  public void com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.beforeProcessViewInfo(ViewInfo info);
  public void com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.beforeDispatchProcessViewInfo(ViewInfo info);
  public void com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.beforeProcessChildViewInfo(ViewInfo info, View child, long drawingTime);
  public void com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.afterDispatchProcessViewInfo(ViewInfo info);
  public void com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.processLayoutChildren();
  public void com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.processMeasureChildren();
  public void com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.onInsertChild(LynxBaseUI child, int index);
  public void com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.insertChildWhenRebuildView(LynxBaseUI child);
  public void com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.insertChild(LynxBaseUI child, int index);
  public void com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.insertView(LynxUI child);
  public boolean com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.onRemoveChild(LynxBaseUI child);
  public void com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.removeChild(LynxBaseUI child);
  public void com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.removeView(LynxBaseUI child);
  public void com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.removeAll();
  public void com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.measureChildren();
  public void com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.layoutChildren();
  public void com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.measure();
  public void com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.layout();
  public void com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.beforeDispatchDraw(final Canvas canvas);
  public void com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.afterDispatchDraw(final Canvas canvas);
  public void com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.afterDraw(Canvas canvas);
  public void com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.beforeDraw(Canvas canvas);
  public Rect com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.beforeDrawChild(final Canvas canvas, final View child, final long drawingTime);
  public void com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.afterDrawChild(final Canvas canvas, final View child, final long drawingTime);
  public int com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.getChildDrawingOrder(int childCount, int index);
  public boolean com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.hasOverlappingRendering();
  public void com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.performLayoutChildrenUI();
  public void com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.performMeasureChildrenUI();
  public void com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.destroy();
  public void com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.onAttach();
  public void com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.onDetach();
  public void com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.dispatchOnAttach();
  public void com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.dispatchOnDetach();
  public int com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.getIndex(LynxBaseUI child);
  public int com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.getChildCount();
  public LynxBaseUI com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.getChildAt(int index);
  public ViewGroup.LayoutParams com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.generateLayoutParams(ViewGroup.LayoutParams childParams);
  public boolean com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.needCustomLayout();
  public EventTarget com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.findUIWithCustomLayout(float x, float y, UIGroup parent);
  public void com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.updateDrawingOrder();
  public View com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.getAccessibilityHostView();
  public void com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.setTranslationZ(float zValue);
  public static void com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.setViewZIndex(View view, int zIndex);
  public static Integer com.lynx.tasm.behavior.ui.UIGroup< T extends ViewGroup >.getViewZIndex(View view);
}

public class com::lynx::tasm::behavior::ui::image::UIImage : com.lynx.tasm.behavior.ui.view.UIView {
  public com.lynx.tasm.behavior.ui.image.UIImage.UIImage(LynxContext context);
  public void com.lynx.tasm.behavior.ui.image.UIImage.pauseAnimation(ReadableMap params, com.lynx.react.bridge.Callback callback);
  public void com.lynx.tasm.behavior.ui.image.UIImage.resumeAnimation(ReadableMap params, com.lynx.react.bridge.Callback callback);
  public void com.lynx.tasm.behavior.ui.image.UIImage.stopAnimation(ReadableMap params, com.lynx.react.bridge.Callback callback);
  public void com.lynx.tasm.behavior.ui.image.UIImage.startAnimate(ReadableMap params, com.lynx.react.bridge.Callback callback);
  public void com.lynx.tasm.behavior.ui.image.UIImage.setImageRendering(int imageRendering);
  public void com.lynx.tasm.behavior.ui.image.UIImage.updatePropertiesInterval(StylesDiffMap props);
  public int com.lynx.tasm.behavior.ui.image.UIImage.getInitialOverflowType();
  public void com.lynx.tasm.behavior.ui.image.UIImage.onPropsUpdated();
  public void com.lynx.tasm.behavior.ui.image.UIImage.onNodeReady();
  public void com.lynx.tasm.behavior.ui.image.UIImage.destroy();
  public void com.lynx.tasm.behavior.ui.image.UIImage.beforeDraw(Canvas canvas);
  public void com.lynx.tasm.behavior.ui.image.UIImage.beforeProcessViewInfo(ViewInfo info);
  public void com.lynx.tasm.behavior.ui.image.UIImage.onAttach();
  public void com.lynx.tasm.behavior.ui.image.UIImage.onDetach();
  public void com.lynx.tasm.behavior.ui.image.UIImage.setEvents(Map< String, EventsListener > events);
  public void com.lynx.tasm.behavior.ui.image.UIImage.onLayoutUpdated();
}

public class com::lynx::tasm::behavior::ui::list::UIList : com.lynx.tasm.behavior.ui.list.AbsLynxList< RecyclerView >, com.lynx.tasm.gesture.GestureArenaMember {
  public void com.lynx.tasm.behavior.ui.list.UIList.setListNewScrollTopSwitch(boolean value);
  public void com.lynx.tasm.behavior.ui.list.UIList.setUpperLowerSwitch(boolean value);
  public void com.lynx.tasm.behavior.ui.list.UIList.setScrollIndex(int value);
  public void com.lynx.tasm.behavior.ui.list.UIList.setEnableOverflow(boolean value);
  public void com.lynx.tasm.behavior.ui.list.UIList.setListPlatformInfo(@NonNull ReadableMap map);
  public void com.lynx.tasm.behavior.ui.list.UIList.updateListActionInfo(@NonNull ReadableMap map);
  public void com.lynx.tasm.behavior.ui.list.UIList.setPreferenceConsumeGesture(boolean value);
  public void com.lynx.tasm.behavior.ui.list.UIList.setTriggerStickyLayout(boolean value);
  public void com.lynx.tasm.behavior.ui.list.UIList.setStackFromEnd(boolean value);
  public void com.lynx.tasm.behavior.ui.list.UIList.setInternalCellAppearNotification(boolean isNeedAppearNotification);
  public void com.lynx.tasm.behavior.ui.list.UIList.setInternalCellDisappearNotification(boolean isNeedDisAppearNotification);
  public void com.lynx.tasm.behavior.ui.list.UIList.setInternalCellPrepareForReuseNotification(boolean isNeedReuseNotification);
  public void com.lynx.tasm.behavior.ui.list.UIList.setShouldRequestStateRestore(boolean shouldRequestStateRestore);
  public void com.lynx.tasm.behavior.ui.list.UIList.setNeedVisibleCells(boolean needVisibleCells);
  public void com.lynx.tasm.behavior.ui.list.UIList.setScrollEnable(Dynamic value);
  public void com.lynx.tasm.behavior.ui.list.UIList.setTouchScroll(Dynamic value);
  public void com.lynx.tasm.behavior.ui.list.UIList.setComponentInitMeasure(boolean value);
  public void com.lynx.tasm.behavior.ui.list.UIList.setNoInvalidate(boolean noInvalidate);
  public void com.lynx.tasm.behavior.ui.list.UIList.setInitialRows(Dynamic initRows);
  public void com.lynx.tasm.behavior.ui.list.UIList.setInitialScrollIndex(Dynamic value);
  public void com.lynx.tasm.behavior.ui.list.UIList.destroy();
  public void com.lynx.tasm.behavior.ui.list.UIList.removeKeyFromNativeStorage(String key);
  public Object com.lynx.tasm.behavior.ui.list.UIList.getValueFromNativeStorage(String key);
  public void com.lynx.tasm.behavior.ui.list.UIList.storeKeyToNativeStorage(String key, Object value);
  public boolean com.lynx.tasm.behavior.ui.list.UIList.initialPropsFlushed(String initialPropKey, String cacheKey);
  public void com.lynx.tasm.behavior.ui.list.UIList.setInitialPropsHasFlushed(String initialPropKey, String cacheKey);
  public int com.lynx.tasm.behavior.ui.list.UIList.getMemberScrollX();
  public int com.lynx.tasm.behavior.ui.list.UIList.getMemberScrollY();
  public boolean com.lynx.tasm.behavior.ui.list.UIList.isVertical();
  public void com.lynx.tasm.behavior.ui.list.UIList.setAndroidIgnoreAttachForBinding(boolean value);
  public void com.lynx.tasm.behavior.ui.list.UIList.setEnableItemPrefetch(boolean value);
  public void com.lynx.tasm.behavior.ui.list.UIList.setEnableAsyncList(boolean value);
  public void com.lynx.tasm.behavior.ui.list.UIList.setItemHolderType(Dynamic value);
  public void com.lynx.tasm.behavior.ui.list.UIList.removeStickyView();
  public void com.lynx.tasm.behavior.ui.list.UIList.setEnableDisappear(boolean value);
  public void com.lynx.tasm.behavior.ui.list.UIList.setEnableSizeCache(boolean value);
  public void com.lynx.tasm.behavior.ui.list.UIList.enableRtl(boolean value);
  public void com.lynx.tasm.behavior.ui.list.UIList.enableNestedScroll(boolean value);
  public void com.lynx.tasm.behavior.ui.list.UIList.setPreloadBufferCount(Dynamic value);
  public void com.lynx.tasm.behavior.ui.list.UIList.setMaxFlingVelocityPercent(float value);
  public void com.lynx.tasm.behavior.ui.list.UIList.initCache();
  public void com.lynx.tasm.behavior.ui.list.UIList.setEnableStrictScrollable(boolean value);
  public void com.lynx.tasm.behavior.ui.list.UIList.setEnableFocusSearch(boolean value);
  public void com.lynx.tasm.behavior.ui.list.UIList.setEnableGapItemDecoration(boolean value);
  public void com.lynx.tasm.behavior.ui.list.UIList.setPreBufferListener();
  public int com.lynx.tasm.behavior.ui.list.UIList.findFirstListItem();
  public int com.lynx.tasm.behavior.ui.list.UIList.findLastListItem();
  public Map<String, Object> com.lynx.tasm.behavior.ui.list.UIList.nativeListStateCache nativeListStateCache;
  public Map<String, HashSet<String> > com.lynx.tasm.behavior.ui.list.UIList.initialFlushPropCache initialFlushPropCache;
  public int com.lynx.tasm.behavior.ui.list.UIList.mItemHolderType mItemHolderType;
  public final String com.lynx.tasm.behavior.ui.list.UIList.TAG TAG;
  public boolean com.lynx.tasm.behavior.ui.list.UIList.DEBUG DEBUG;
  public com.lynx.tasm.behavior.ui.list.UIList.UIList(LynxContext context);
  public void com.lynx.tasm.behavior.ui.list.UIList.onGestureScrollBy(float x, float y);
  public boolean com.lynx.tasm.behavior.ui.list.UIList.canConsumeGesture(float deltaX, float deltaY);
  public boolean com.lynx.tasm.behavior.ui.list.UIList.isAtBorder(boolean isStart);
  public void com.lynx.tasm.behavior.ui.list.UIList.onInvalidate();
  public Map< Integer, BaseGestureHandler > com.lynx.tasm.behavior.ui.list.UIList.getGestureHandlers();
  public void com.lynx.tasm.behavior.ui.list.UIList.setGestureDetectors(Map< Integer, GestureDetector > gestureDetectors);
  public RecyclerView com.lynx.tasm.behavior.ui.list.UIList.getRecyclerView();
  public boolean com.lynx.tasm.behavior.ui.list.UIList.isScrollContainer();
  public void com.lynx.tasm.behavior.ui.list.UIList.onPropsUpdated();
  public void com.lynx.tasm.behavior.ui.list.UIList.onLayoutFinish(long operationId, LynxBaseUI component);
  public void com.lynx.tasm.behavior.ui.list.UIList.onLayoutUpdated();
  public void com.lynx.tasm.behavior.ui.list.UIList.onInsertChild(LynxBaseUI child, int index);
  public boolean com.lynx.tasm.behavior.ui.list.UIList.isAsyncThreadStrategy();
  public void com.lynx.tasm.behavior.ui.list.UIList.measure();
  public void com.lynx.tasm.behavior.ui.list.UIList.layout();
  public void com.lynx.tasm.behavior.ui.list.UIList.requestLayout();
  public void com.lynx.tasm.behavior.ui.list.UIList.layoutChildren();
  public float[] com.lynx.tasm.behavior.ui.list.UIList.scrollBy(float deltaX, float deltaY);
  public void com.lynx.tasm.behavior.ui.list.UIList.setNewAppear(boolean value);
  public void com.lynx.tasm.behavior.ui.list.UIList.setScrollY(Dynamic enable);
  public void com.lynx.tasm.behavior.ui.list.UIList.setScrollX(Dynamic enable);
  public void com.lynx.tasm.behavior.ui.list.UIList.setUpperThreshold(Dynamic value);
  public void com.lynx.tasm.behavior.ui.list.UIList.setLowerThreshold(Dynamic value);
  public void com.lynx.tasm.behavior.ui.list.UIList.setUpperThresholdItemCount(Dynamic value);
  public void com.lynx.tasm.behavior.ui.list.UIList.setLowerThresholdItemCount(Dynamic value);
  public void com.lynx.tasm.behavior.ui.list.UIList.setScrollEventThrottle(Dynamic value);
  public void com.lynx.tasm.behavior.ui.list.UIList.setScrollStateChangeEventThrottle(String value);
  public void com.lynx.tasm.behavior.ui.list.UIList.setCacheQueueRatio(Dynamic value);
  public void com.lynx.tasm.behavior.ui.list.UIList.setColumnCount(int columnCount);
  public void com.lynx.tasm.behavior.ui.list.UIList.setMainAxisGap(float value);
  public void com.lynx.tasm.behavior.ui.list.UIList.setCrossAxisGap(float gap);
  public int com.lynx.tasm.behavior.ui.list.UIList.getMainAxisGap();
  public int com.lynx.tasm.behavior.ui.list.UIList.getCrossAxisGap();
  public void com.lynx.tasm.behavior.ui.list.UIList.setListType(String listType);
  public void com.lynx.tasm.behavior.ui.list.UIList.setUpdateAnimation(String animationType);
  public void com.lynx.tasm.behavior.ui.list.UIList.setEnablePagerSnap(Dynamic enable);
  public void com.lynx.tasm.behavior.ui.list.UIList.setPagingAlignment(ReadableMap map);
  public void com.lynx.tasm.behavior.ui.list.UIList.willSnapTo(int position, int currentOffsetX, int currentOffsetY, int distanceX, int distanceY);
  public void com.lynx.tasm.behavior.ui.list.UIList.setEnableSticky(Dynamic enable);
  public void com.lynx.tasm.behavior.ui.list.UIList.setStickyOffset(Dynamic value);
  public View com.lynx.tasm.behavior.ui.list.UIList.getContainer();
  public void com.lynx.tasm.behavior.ui.list.UIList.sendCustomEvent(int left, int top, int dx, int dy, String type);
  public EventTarget com.lynx.tasm.behavior.ui.list.UIList.hitTest(float x, float y);
  public EventTarget com.lynx.tasm.behavior.ui.list.UIList.hitTest(float x, float y, boolean ignoreUserInteraction);
  public void com.lynx.tasm.behavior.ui.list.UIList.autoScroll(ReadableMap params, Callback callback);
  public void com.lynx.tasm.behavior.ui.list.UIList.scrollToPosition(ReadableMap params);
  public void com.lynx.tasm.behavior.ui.list.UIList.getScrollInfo(Callback callback);
  public void com.lynx.tasm.behavior.ui.list.UIList.scrollBy(ReadableMap params, Callback callback);
  public void com.lynx.tasm.behavior.ui.list.UIList.scrollToPosition(ReadableMap params, Callback callback);
  public void com.lynx.tasm.behavior.ui.list.UIList.getVisibleCells(Callback callback);
  public void com.lynx.tasm.behavior.ui.list.UIList.setEvents(Map< String, EventsListener > events);
  public boolean com.lynx.tasm.behavior.ui.list.UIList.isAccessibilityHostUI();
  public boolean com.lynx.tasm.behavior.ui.list.UIList.isAccessibilityDirectionVertical();
  public boolean com.lynx.tasm.behavior.ui.list.UIList.requestChildUIRectangleOnScreen(LynxBaseUI child, Rect rect, boolean smooth);
  public ArrayList< String > com.lynx.tasm.behavior.ui.list.UIList.getComponentAccessibilityOrder();
  public HashMap< String, ArrayList< LynxNodeProvider.LynxCustomNodeInfo > > com.lynx.tasm.behavior.ui.list.UIList.getCustomNodeMap();
  public void com.lynx.tasm.behavior.ui.list.UIList.initNodeInfo();
  public void com.lynx.tasm.behavior.ui.list.UIList.updateNodeInfo(final String itemKey, final ArrayList< LynxNodeProvider.LynxCustomNodeInfo > nodeInfoList);
  public void com.lynx.tasm.behavior.ui.list.UIList.setVerticalOrientation(boolean verticalOrientation);
  public void com.lynx.tasm.behavior.ui.list.UIList.setAutoMeasure(Dynamic enable);
  public void com.lynx.tasm.behavior.ui.list.UIList.setDiffable(Dynamic value);
  public void com.lynx.tasm.behavior.ui.list.UIList.setListOldStickySwitch(boolean value);
}

public class com::lynx::tasm::behavior::ui::list::UIListAdapter : RecyclerView::Adapter< ListViewHolder > {
  public com.lynx.tasm.behavior.ui.list.UIListAdapter.UIListAdapter(@NonNull UIList list, @NonNull AppearEventCourier eventManager);
  public final boolean com.lynx.tasm.behavior.ui.list.UIListAdapter.getNewArch();
  public final JavaOnlyArray com.lynx.tasm.behavior.ui.list.UIListAdapter.getFullSpans();
  public final JavaOnlyArray com.lynx.tasm.behavior.ui.list.UIListAdapter.getStickyTopItems();
  public final JavaOnlyArray com.lynx.tasm.behavior.ui.list.UIListAdapter.getStickyBottomItems();
  public ListViewHolder com.lynx.tasm.behavior.ui.list.UIListAdapter.onCreateViewHolder(@NonNull ViewGroup parent, int viewType);
  public void com.lynx.tasm.behavior.ui.list.UIListAdapter.onBindViewHolder(@NonNull ListViewHolder holder, int position, List< Object > payload);
  public void com.lynx.tasm.behavior.ui.list.UIListAdapter.onBindViewHolder(@NonNull ListViewHolder holder, int position);
  public void com.lynx.tasm.behavior.ui.list.UIListAdapter.onViewAttachedToWindow(@NonNull ListViewHolder holder);
  public void com.lynx.tasm.behavior.ui.list.UIListAdapter.onViewDetachedFromWindow(@NonNull ListViewHolder holder);
  public int com.lynx.tasm.behavior.ui.list.UIListAdapter.getItemCount();
  public int com.lynx.tasm.behavior.ui.list.UIListAdapter.getItemViewType(int position);
  public long com.lynx.tasm.behavior.ui.list.UIListAdapter.getItemId(int position);
}

public class abstract com::lynx::tasm::behavior::ui::list::container::UIListAutoScroller :  {
  public void com.lynx.tasm.behavior.ui.list.container.UIListAutoScroller.setAutoScrollParams(boolean start, boolean autoStopOnBounds);
  public void com.lynx.tasm.behavior.ui.list.container.UIListAutoScroller.execute(String ratePerSecond, Context context);
  public void com.lynx.tasm.behavior.ui.list.container.UIListAutoScroller.removeFrameCallback();
}

public class com::lynx::tasm::behavior::ui::list::container::UIListContainer : com::lynx::tasm::behavior::ui::view::UISimpleView< ListContainerView >, com.lynx.tasm.behavior.ui.list.container.NestedScrollContainerView.OnScrollStateChangeListener, com.lynx.tasm.gesture.GestureArenaMember, com.lynx.tasm.behavior.ui.view.UIComponent.NodeReadyListener {
  public final int com.lynx.tasm.behavior.ui.list.container.UIListContainer.INVALID_SCROLL_ESTIMATED_OFFSET INVALID_SCROLL_ESTIMATED_OFFSET;
  public Map<String, Object> com.lynx.tasm.behavior.ui.list.container.UIListContainer.nativeListStateCache nativeListStateCache;
  public Map<String, HashSet<String> > com.lynx.tasm.behavior.ui.list.container.UIListContainer.initialFlushPropCache initialFlushPropCache;
  public com.lynx.tasm.behavior.ui.list.container.UIListContainer.UIListContainer(LynxContext context);
  public boolean com.lynx.tasm.behavior.ui.list.container.UIListContainer.isScrollContainer();
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.insertChild(LynxBaseUI child, int index);
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.onComponentNodeReady(UIComponent component);
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.removeChild(LynxBaseUI child);
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.onLayoutFinish(long operationId, @Nullable LynxBaseUI component);
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.insertListItemNode(@Nullable LynxBaseUI component);
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.removeView(LynxBaseUI child);
  public boolean com.lynx.tasm.behavior.ui.list.container.UIListContainer.isAsyncThreadStrategy();
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.onNodeReady();
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.onLayoutUpdated();
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.removeKeyFromNativeStorage(String key);
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.storeKeyToNativeStorage(String key, Object value);
  public boolean com.lynx.tasm.behavior.ui.list.container.UIListContainer.initialPropsFlushed(String initialPropKey, String cacheKey);
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.setInitialPropsHasFlushed(String initialPropKey, String cacheKey);
  public Object com.lynx.tasm.behavior.ui.list.container.UIListContainer.getValueFromNativeStorage(String key);
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.layout();
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.invalidate();
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.destroy();
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.updateContentSizeAndOffset(float contentSize, float deltaX, float deltaY);
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.setPagingAlignment(ReadableMap map);
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.willSnapTo(int position, int currentOffsetX, int currentOffsetY, int targetOffsetX, int targetOffsetY);
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.setMaxFlingDistanceRatio(Dynamic value);
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.setEnableScroll(boolean value);
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.setForceCanScroll(boolean value);
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.setVerticalOrientation(boolean value);
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.setScrollOrientation(String scrollOrientation);
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.setEnableNestedScroll(boolean nestedScroll);
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.setBatchRenderStrategy(int batchRenderStrategy);
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.setDiffInfo(ReadableMap map);
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.setEnableListSticky(boolean value);
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.setStickyOffset(Dynamic value);
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.setEnableFadeInAnimation(boolean value);
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.setUpdateAnimationFadeInDuration(int value);
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.setEnableRecycleStickyItem(boolean value);
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.setNeedVisibleItemInfo(boolean value);
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.setUpdateStickyForDiff(boolean value);
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.getScrollInfo(Callback callback);
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.scrollToPosition(ReadableMap params, Callback callback);
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.scrollBy(ReadableMap params, Callback callback);
  public float[] com.lynx.tasm.behavior.ui.list.container.UIListContainer.scrollBy(float deltaX, float deltaY);
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.getVisibleCells(ReadableMap params, Callback callback);
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.setEvents(Map< String, EventsListener > events);
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.autoScroll(ReadableMap params, Callback callback);
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.onScrollStateChange(NestedScrollContainerView scrollView, int state);
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.sendCustomEvent(int l, int t, int oldl, int oldt, String type);
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.updateScrollInfo(boolean smooth, float estimatedOffset, boolean scrolling);
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.updateStickyTops(int offsetTop);
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.updateStickyBottoms(int offsetTop);
  public int com.lynx.tasm.behavior.ui.list.container.UIListContainer.getScrollX();
  public int com.lynx.tasm.behavior.ui.list.container.UIListContainer.getScrollY();
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.onPropsUpdated();
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.onGestureScrollBy(float x, float y);
  public boolean com.lynx.tasm.behavior.ui.list.container.UIListContainer.canConsumeGesture(float deltaX, float deltaY);
  public int com.lynx.tasm.behavior.ui.list.container.UIListContainer.getMemberScrollX();
  public int com.lynx.tasm.behavior.ui.list.container.UIListContainer.getMemberScrollY();
  public boolean com.lynx.tasm.behavior.ui.list.container.UIListContainer.isAtBorder(boolean isStart);
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.onInvalidate();
  public void com.lynx.tasm.behavior.ui.list.container.UIListContainer.setGestureDetectors(Map< Integer, GestureDetector > gestureDetectors);
  public Map< Integer, BaseGestureHandler > com.lynx.tasm.behavior.ui.list.container.UIListContainer.getGestureHandlers();
}

public class com::lynx::tasm::behavior::ui::list::UIListItem : com.lynx.tasm.behavior.ui.view.UIComponent {
  public com.lynx.tasm.behavior.ui.list.UIListItem.UIListItem(LynxContext context);
}

public class com::lynx::tasm::behavior::CSSPropertySetter::UIPaintStyles :  {
}

public interface com::lynx::tasm::behavior::ui::UIParent {
  public ViewGroup.LayoutParams com.lynx.tasm.behavior.ui.UIParent.generateLayoutParams(ViewGroup.LayoutParams childParams);
  public boolean com.lynx.tasm.behavior.ui.UIParent.needCustomLayout();
  public void com.lynx.tasm.behavior.ui.UIParent.requestLayout();
  public void com.lynx.tasm.behavior.ui.UIParent.invalidate();
}

public class com::lynx::tasm::behavior::ui::scroll::UIScrollView : com.lynx.tasm.behavior.ui.scroll.AbsLynxUIScroll< AndroidScrollView >, com.lynx.tasm.behavior.ui.scroll.IScrollSticky, com.lynx.tasm.gesture.GestureArenaMember, com.lynx.tasm.gesture.LynxNewGestureDelegate {
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.setPreferenceConsumeGesture(boolean value);
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.setEnableNewBounce(boolean value);
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.onListCellAppear(String itemKey, LynxBaseUI list);
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.onListCellPrepareForReuse(String itemKey, LynxBaseUI list);
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.resetOffset();
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.onListCellDisAppear(String itemKey, LynxBaseUI list, boolean isExist);
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.setTouchSlop(String value);
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.setForceCanScroll(boolean value);
  public com.lynx.tasm.behavior.ui.scroll.UIScrollView.UIScrollView(LynxContext context);
  public boolean com.lynx.tasm.behavior.ui.scroll.UIScrollView.isScrollContainer();
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.onLayoutUpdated();
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.onNodeReady();
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.insertChild(LynxBaseUI child, int index);
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.setLynxDirection(int direction);
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.measure();
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.layout();
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.onNodeReload();
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.invalidate();
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.destroy();
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.setScrollY(boolean enable);
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.setScrollX(boolean enable);
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.setScrollBarEnable(boolean value);
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.setEnableSticky();
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.setUpperThreshole(int value);
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.setLowerThreshole(int value);
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.setScrollTop(int value);
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.setScrollLeft(int value);
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.handleComputeScroll();
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.scrollToIndex(int index);
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.setScrollOrientation(String scrollOrientation);
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.setEnableNestedScroll(boolean nestedScroll);
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.setInitialScrollToIndex(@Nullable Integer value);
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.setInitialScrollOffset(@Nullable Integer value);
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.setFadingEdgeLength(String fadingEdgeLength);
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.setScrollTap(boolean value);
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.setEnableScroll(boolean value);
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.autoScroll(ReadableMap params);
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.sendCustomEvent(int l, int t, int oldl, int oldt, String type);
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.scrollInto(LynxBaseUI node, boolean isSmooth, String block, String inline);
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.scrollInto(LynxBaseUI node, boolean isSmooth, String block, String inline, int bottomInset);
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.setEvents(Map< String, EventsListener > events);
  public int com.lynx.tasm.behavior.ui.scroll.UIScrollView.getMemberScrollX();
  public int com.lynx.tasm.behavior.ui.scroll.UIScrollView.getMemberScrollY();
  public int com.lynx.tasm.behavior.ui.scroll.UIScrollView.getScrollX();
  public int com.lynx.tasm.behavior.ui.scroll.UIScrollView.getScrollY();
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.onInvalidate();
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.getScrollInfo(Callback callback);
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.scrollBy(ReadableMap params, Callback callback);
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.scrollTo(ReadableMap params, Callback callback);
  public boolean com.lynx.tasm.behavior.ui.scroll.UIScrollView.canScroll(int direction);
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.scrollByX(double delta);
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.scrollByY(double delta);
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.flingX(double velocityX);
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.flingY(double velocityY);
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.setForbidFlingFocusChange(boolean value);
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.setBlockDescendantFocusability(boolean value);
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.onPropsUpdated();
  public boolean com.lynx.tasm.behavior.ui.scroll.UIScrollView.isAccessibilityHostUI();
  public boolean com.lynx.tasm.behavior.ui.scroll.UIScrollView.isAccessibilityDirectionVertical();
  public View com.lynx.tasm.behavior.ui.scroll.UIScrollView.getAccessibilityHostView();
  public boolean com.lynx.tasm.behavior.ui.scroll.UIScrollView.requestChildUIRectangleOnScreen(LynxBaseUI child, Rect rect, boolean smooth);
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.onGestureScrollBy(float x, float y);
  public Map< Integer, BaseGestureHandler > com.lynx.tasm.behavior.ui.scroll.UIScrollView.getGestureHandlers();
  public boolean com.lynx.tasm.behavior.ui.scroll.UIScrollView.canConsumeGesture(float deltaX, float deltaY);
  public boolean com.lynx.tasm.behavior.ui.scroll.UIScrollView.isAtBorder(boolean isStart);
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.setGestureDetectors(Map< Integer, GestureDetector > gestureDetectors);
  public float[] com.lynx.tasm.behavior.ui.scroll.UIScrollView.scrollBy(float deltaX, float deltaY);
  public void com.lynx.tasm.behavior.ui.scroll.UIScrollView.setEnableNewNested(boolean value);
}

public class com::lynx::tasm::behavior::ui::UIShadowProxy : com.lynx.tasm.behavior.ui.UIGroup< UIShadowProxy.ShadowView > {
  public boolean com.lynx.tasm.behavior.ui.UIShadowProxy.isNeedUpdateShadow();
  public void com.lynx.tasm.behavior.ui.UIShadowProxy.setNeedUpdateShadow(boolean needUpdateShadow);
  public com.lynx.tasm.behavior.ui.UIShadowProxy.UIShadowProxy(LynxContext context, LynxBaseUI child);
  public String com.lynx.tasm.behavior.ui.UIShadowProxy.getTagName();
  public String com.lynx.tasm.behavior.ui.UIShadowProxy.getIdSelector();
  public String com.lynx.tasm.behavior.ui.UIShadowProxy.getRefIdSelector();
  public void com.lynx.tasm.behavior.ui.UIShadowProxy.insertDrawList(LynxBaseUI mark, LynxBaseUI child);
  public EventTarget com.lynx.tasm.behavior.ui.UIShadowProxy.hitTest(float x, float y);
  public EventTarget com.lynx.tasm.behavior.ui.UIShadowProxy.hitTest(float x, float y, boolean ignoreUserInteraction);
  public boolean com.lynx.tasm.behavior.ui.UIShadowProxy.containsPoint(float x, float y);
  public boolean com.lynx.tasm.behavior.ui.UIShadowProxy.containsPoint(float x, float y, boolean ignoreUserInteraction);
  public boolean com.lynx.tasm.behavior.ui.UIShadowProxy.childrenContainPoint(float x, float y);
  public void com.lynx.tasm.behavior.ui.UIShadowProxy.insertView(LynxUI child);
  public boolean com.lynx.tasm.behavior.ui.UIShadowProxy.isInsertViewCalled();
  public boolean com.lynx.tasm.behavior.ui.UIShadowProxy.isFlatten();
  public List< LynxBaseUI > com.lynx.tasm.behavior.ui.UIShadowProxy.getChildren();
  public LynxBaseUI com.lynx.tasm.behavior.ui.UIShadowProxy.getChildAt(int index);
  public int com.lynx.tasm.behavior.ui.UIShadowProxy.getChildCount();
  public LynxBaseUI com.lynx.tasm.behavior.ui.UIShadowProxy.getChild();
  public void com.lynx.tasm.behavior.ui.UIShadowProxy.setOutlineStyle(@Nullable BorderStyle style);
  public void com.lynx.tasm.behavior.ui.UIShadowProxy.setOutlineColor(int color);
  public void com.lynx.tasm.behavior.ui.UIShadowProxy.setOutlineWidth(float width);
  public void com.lynx.tasm.behavior.ui.UIShadowProxy.updateLayout(int left, int top, int width, int height, int paddingLeft, int paddingTop, int paddingRight, int paddingBottom, int marginLeft, int marginTop, int marginRight, int marginBottom, int borderLeftWidth, int borderTopWidth, int borderRightWidth, int borderBottomWidth, Rect bound);
  public void com.lynx.tasm.behavior.ui.UIShadowProxy.onLayoutUpdated();
  public void com.lynx.tasm.behavior.ui.UIShadowProxy.updateSticky(float[] sticky);
  public void com.lynx.tasm.behavior.ui.UIShadowProxy.updateTransform();
  public Rect com.lynx.tasm.behavior.ui.UIShadowProxy.getBound();
  public int com.lynx.tasm.behavior.ui.UIShadowProxy.getWidth();
  public int com.lynx.tasm.behavior.ui.UIShadowProxy.getHeight();
  public int com.lynx.tasm.behavior.ui.UIShadowProxy.getTop();
  public int com.lynx.tasm.behavior.ui.UIShadowProxy.getLeft();
  public int com.lynx.tasm.behavior.ui.UIShadowProxy.getOriginTop();
  public int com.lynx.tasm.behavior.ui.UIShadowProxy.getOriginLeft();
  public void com.lynx.tasm.behavior.ui.UIShadowProxy.setLeft(int left);
  public void com.lynx.tasm.behavior.ui.UIShadowProxy.setTop(int top);
  public void com.lynx.tasm.behavior.ui.UIShadowProxy.setBound(Rect bound);
  public void com.lynx.tasm.behavior.ui.UIShadowProxy.layout();
  public TransOffset com.lynx.tasm.behavior.ui.UIShadowProxy.getTransformValue(float left, float right, float top, float bottom);
  public boolean com.lynx.tasm.behavior.ui.UIShadowProxy.updateDrawingLayoutInfo(int left, int top, Rect bounds);
  public void com.lynx.tasm.behavior.ui.UIShadowProxy.onDrawingPositionChanged();
  public void com.lynx.tasm.behavior.ui.UIShadowProxy.measure();
  public void com.lynx.tasm.behavior.ui.UIShadowProxy.insertChild(LynxBaseUI child, int index);
  public void com.lynx.tasm.behavior.ui.UIShadowProxy.removeChild(LynxBaseUI child);
  public JavaOnlyMap com.lynx.tasm.behavior.ui.UIShadowProxy.getProps();
  public void com.lynx.tasm.behavior.ui.UIShadowProxy.removeView(LynxBaseUI child);
  public void com.lynx.tasm.behavior.ui.UIShadowProxy.updateExtraData(Object data);
  public void com.lynx.tasm.behavior.ui.UIShadowProxy.updateLayoutInfo(LynxBaseUI layout);
  public void com.lynx.tasm.behavior.ui.UIShadowProxy.setBoxShadow(@Nullable ReadableArray shadow);
  public float com.lynx.tasm.behavior.ui.UIShadowProxy.getAlpha();
  public Matrix com.lynx.tasm.behavior.ui.UIShadowProxy.getMatrix();
  public float com.lynx.tasm.behavior.ui.UIShadowProxy.getTranslationZ();
  public float com.lynx.tasm.behavior.ui.UIShadowProxy.getRealTimeTranslationZ();
  public void com.lynx.tasm.behavior.ui.UIShadowProxy.notifyAnimating();
  public void com.lynx.tasm.behavior.ui.UIShadowProxy.onPropsUpdated();
  public boolean com.lynx.tasm.behavior.ui.UIShadowProxy.checkStickyOnParentScroll(int l, int t);
  public boolean com.lynx.tasm.behavior.ui.UIShadowProxy.enableLayoutAnimation();
  public LayoutAnimationManager com.lynx.tasm.behavior.ui.UIShadowProxy.getLayoutAnimator();
  public TransitionAnimationManager com.lynx.tasm.behavior.ui.UIShadowProxy.getTransitionAnimator();
  public void com.lynx.tasm.behavior.ui.UIShadowProxy.updatePropertiesInterval(StylesDiffMap props);
  public boolean com.lynx.tasm.behavior.ui.UIShadowProxy.isFirstAnimatedReady();
}

public class abstract com::lynx::tasm::behavior::ui::view::UISimpleView : com::lynx::tasm::behavior::ui::UIGroup< T > {
  public com.lynx.tasm.behavior.ui.view.UISimpleView< T extends ViewGroup >.UISimpleView(Context context);
  public com.lynx.tasm.behavior.ui.view.UISimpleView< T extends ViewGroup >.UISimpleView(LynxContext context);
  public com.lynx.tasm.behavior.ui.view.UISimpleView< T extends ViewGroup >.UISimpleView(LynxContext context, Object param);
}

public class com::lynx::tasm::behavior::ui::text::UIText : com::lynx::tasm::behavior::ui::UIGroup< AndroidText >, com.lynx.tasm.behavior.ui.text.IUIText, com.lynx.tasm.gesture.GestureArenaMember, com.lynx.tasm.gesture.LynxNewGestureDelegate {
  public com.lynx.tasm.behavior.ui.text.UIText.UIText(Context context);
  public com.lynx.tasm.behavior.ui.text.UIText.UIText(LynxContext context);
  public EventTarget com.lynx.tasm.behavior.ui.text.UIText.hitTest(float x, float y);
  public EventTarget com.lynx.tasm.behavior.ui.text.UIText.hitTest(float x, float y, boolean ignoreUserInteraction);
  public void com.lynx.tasm.behavior.ui.text.UIText.updateExtraData(Object data);
  public void com.lynx.tasm.behavior.ui.text.UIText.onNodeReady();
  public CharSequence com.lynx.tasm.behavior.ui.text.UIText.getOriginText();
  public void com.lynx.tasm.behavior.ui.text.UIText.onLayoutUpdated();
  public void com.lynx.tasm.behavior.ui.text.UIText.setAccessibilityLabel(@Nullable Dynamic value);
  public CharSequence com.lynx.tasm.behavior.ui.text.UIText.getAccessibilityLabel();
  public void com.lynx.tasm.behavior.ui.text.UIText.setTextGradient(String gradient);
  public void com.lynx.tasm.behavior.ui.text.UIText.setTextGradient(ReadableArray gradient);
  public void com.lynx.tasm.behavior.ui.text.UIText.setColor(int color);
  public void com.lynx.tasm.behavior.ui.text.UIText.setColor(Dynamic color);
  public void com.lynx.tasm.behavior.ui.text.UIText.setEnableTextSelection(boolean enable);
  public void com.lynx.tasm.behavior.ui.text.UIText.setCustomContextMenu(boolean enable);
  public void com.lynx.tasm.behavior.ui.text.UIText.setCustomTextSelection(boolean enable);
  public void com.lynx.tasm.behavior.ui.text.UIText.setSelectionBackgroundColor(int color);
  public void com.lynx.tasm.behavior.ui.text.UIText.setSelectionHandleColor(int color);
  public void com.lynx.tasm.behavior.ui.text.UIText.setSelectionHandleSize(int size);
  public Layout com.lynx.tasm.behavior.ui.text.UIText.getTextLayout();
  public void com.lynx.tasm.behavior.ui.text.UIText.setConsumeHoverEvent(boolean value);
  public void com.lynx.tasm.behavior.ui.text.UIText.destroy();
  public void com.lynx.tasm.behavior.ui.text.UIText.copyPropFromOldUiInUpdateFlatten(LynxBaseUI oldUI);
  public void com.lynx.tasm.behavior.ui.text.UIText.getTextBoundingRect(ReadableMap params, Callback callback);
  public void com.lynx.tasm.behavior.ui.text.UIText.setTextSelection(ReadableMap params, Callback callback);
  public void com.lynx.tasm.behavior.ui.text.UIText.getSelectedText(ReadableMap params, Callback callback);
  public void com.lynx.tasm.behavior.ui.text.UIText.onPropsUpdated();
  public void com.lynx.tasm.behavior.ui.text.UIText.onGestureScrollBy(float deltaX, float deltaY);
  public boolean com.lynx.tasm.behavior.ui.text.UIText.canConsumeGesture(float deltaX, float deltaY);
  public int com.lynx.tasm.behavior.ui.text.UIText.getMemberScrollX();
  public boolean com.lynx.tasm.behavior.ui.text.UIText.isAtBorder(boolean isStart);
  public int com.lynx.tasm.behavior.ui.text.UIText.getMemberScrollY();
  public void com.lynx.tasm.behavior.ui.text.UIText.onInvalidate();
  public void com.lynx.tasm.behavior.ui.text.UIText.setGestureDetectors(Map< Integer, GestureDetector > gestureDetectors);
  public Map< Integer, BaseGestureHandler > com.lynx.tasm.behavior.ui.text.UIText.getGestureHandlers();
}

public class com::lynx::tasm::behavior::ui::text::UITextUtils :  {
  public static Spanned com.lynx.tasm.behavior.ui.text.UITextUtils.getSpanned(AndroidText view);
  public static Spanned com.lynx.tasm.behavior.ui.text.UITextUtils.getSpanned(Layout layout);
  public static EventTarget com.lynx.tasm.behavior.ui.text.UITextUtils.hitTest(LynxBaseUI ui, float x, float y, EventTarget parent, Layout layout, Spanned spanned, PointF textTranslateOffset, boolean ignoreUserInteraction);
  public static void com.lynx.tasm.behavior.ui.text.UITextUtils.HandleInlineViewTruncated(TextUpdateBundle bundle, LynxBaseUI textUI);
}

public class com::lynx::tasm::utils::UIThreadUtils :  {
  public static boolean com.lynx.tasm.utils.UIThreadUtils.isOnUiThread();
  public static void com.lynx.tasm.utils.UIThreadUtils.assertOnUiThread();
  public static void com.lynx.tasm.utils.UIThreadUtils.assertNotOnUiThread();
  public static void com.lynx.tasm.utils.UIThreadUtils.runOnUiThread(Runnable runnable);
  public static void com.lynx.tasm.utils.UIThreadUtils.postAtFrontOfQueueOnUiThread(Runnable runnable);
  public static void com.lynx.tasm.utils.UIThreadUtils.runOnUiThreadImmediately(Runnable runnable);
  public static void com.lynx.tasm.utils.UIThreadUtils.runOnUiThreadImmediatelyWithPostAtFront(Runnable runnable);
  public static void com.lynx.tasm.utils.UIThreadUtils.runOnUiThread(Runnable runnable, long delayMs);
  public static void com.lynx.tasm.utils.UIThreadUtils.runOnUiThreadAtTime(Runnable runnable, Object token, long uptimeMillis);
  public static void com.lynx.tasm.utils.UIThreadUtils.removeCallbacks(Runnable r, Object token);
}

public class com::lynx::tasm::behavior::ui::view::UIView : com.lynx.tasm.behavior.ui.view.UISimpleView< AndroidView >, com.lynx.tasm.gesture.GestureArenaMember, com.lynx.tasm.gesture.LynxNewGestureDelegate {
  public void com.lynx.tasm.behavior.ui.view.UIView.setBlurSampling(int sampling);
  public void com.lynx.tasm.behavior.ui.view.UIView.copyable(boolean value);
  public void com.lynx.tasm.behavior.ui.view.UIView.onGestureScrollBy(float deltaX, float deltaY);
  public boolean com.lynx.tasm.behavior.ui.view.UIView.canConsumeGesture(float deltaX, float deltaY);
  public int com.lynx.tasm.behavior.ui.view.UIView.getMemberScrollX();
  public boolean com.lynx.tasm.behavior.ui.view.UIView.isAtBorder(boolean isStart);
  public int com.lynx.tasm.behavior.ui.view.UIView.getMemberScrollY();
  public void com.lynx.tasm.behavior.ui.view.UIView.onInvalidate();
  public void com.lynx.tasm.behavior.ui.view.UIView.setGestureDetectors(Map< Integer, GestureDetector > gestureDetectors);
  public Map< Integer, BaseGestureHandler > com.lynx.tasm.behavior.ui.view.UIView.getGestureHandlers();
  public void com.lynx.tasm.behavior.ui.view.UIView.destroy();
  public void com.lynx.tasm.behavior.ui.view.UIView.afterDraw(Canvas canvas);
  public com.lynx.tasm.behavior.ui.view.UIView.UIView(Context context);
  public com.lynx.tasm.behavior.ui.view.UIView.UIView(LynxContext context);
  public int com.lynx.tasm.behavior.ui.view.UIView.getInitialOverflowType();
  public void com.lynx.tasm.behavior.ui.view.UIView.setImpressionId(String value);
  public boolean com.lynx.tasm.behavior.ui.view.UIView.enableAutoClipRadius();
  public void com.lynx.tasm.behavior.ui.view.UIView.onPropsUpdated();
}

public class com::lynx::tasm::behavior::utils::UnicodeFontUtils :  {
  public final int com.lynx.tasm.behavior.utils.UnicodeFontUtils.DECODE_DEFAULT DECODE_DEFAULT;
  public final int com.lynx.tasm.behavior.utils.UnicodeFontUtils.DECODE_INSERT_ZERO_WIDTH_CHAR DECODE_INSERT_ZERO_WIDTH_CHAR;
  public final int com.lynx.tasm.behavior.utils.UnicodeFontUtils.DECODE_CJK_INSERT_WORD_JOINER DECODE_CJK_INSERT_WORD_JOINER;
  public static String com.lynx.tasm.behavior.utils.UnicodeFontUtils.decodeCSSContent(String unicodeStr, int decodeProperty);
  public static String com.lynx.tasm.behavior.utils.UnicodeFontUtils.decode(String unicodeStr, int decodeProperty);
}

public enum com::lynx::tasm::utils::Value::Unit {
  public com.lynx.tasm.utils.Value.Unit.PX PX;
  public com.lynx.tasm.utils.Value.Unit.PERCENTAGE PERCENTAGE;
}

public class com::lynx::tasm::utils::UnitUtils :  {
  public static boolean com.lynx.tasm.utils.UnitUtils.isPercentage(String v);
  public static float com.lynx.tasm.utils.UnitUtils.toPx(String valueWithUnit);
  public static float com.lynx.tasm.utils.UnitUtils.toPx(String valueWithUnit, float defaultValue);
  public static float com.lynx.tasm.utils.UnitUtils.toPx(String valueWithUnit, float rootFontSize, float curFontSize, float rootWidth, float rootHeight);
  public static float com.lynx.tasm.utils.UnitUtils.toPxWithDisplayMetrics(String valueWithUnit, float rootFontSize, float curFontSize, float rootWidth, float rootHeight, DisplayMetrics displayMetrics);
  public static float com.lynx.tasm.utils.UnitUtils.toPx(String valueWithUnit, float rootFontSize, float curFontSize, float rootWidth, float rootHeight, float defaultValue);
  public static float com.lynx.tasm.utils.UnitUtils.toPxWithDisplayMetrics(String valueWithUnit, float rootFontSize, float curFontSize, float rootWidth, float rootHeight, float defaultValue, DisplayMetrics displayMetrics);
  public static float com.lynx.tasm.utils.UnitUtils.toPx(String valueWithUnit, float rootFontSize, float curFontSize, float rootWidth, float rootHeight, float viewSize, float defaultValue);
  public static float com.lynx.tasm.utils.UnitUtils.toPxWithDisplayMetrics(String valueWithUnit, float rootFontSize, float curFontSize, float rootWidth, float rootHeight, float viewSize, float defaultValue, DisplayMetrics displayMetrics);
  public static float com.lynx.tasm.utils.UnitUtils.toPx(String valueWithUnit, float viewSize, float defaultValue);
  public static float com.lynx.tasm.utils.UnitUtils.toPxWithDisplayMetrics(String valueWithUnit, float viewSize, float defaultValue, DisplayMetrics displayMetrics);
  public static Value com.lynx.tasm.utils.UnitUtils.parserValue(String s, LynxBaseUI ui);
  public static< T extends Comparable< T > T com.lynx.tasm.utils.UnitUtils.clamp(T val, T min, T max);
}

public class com::lynx::tasm::utils::Value :  {
  public final float com.lynx.tasm.utils.Value.value value;
  public final Unit com.lynx.tasm.utils.Value.unit unit;
  public com.lynx.tasm.utils.Value.Value(float value, Unit unit);
}

public class com::lynx::tasm::behavior::ui::ViewGroupDrawingOrderHelper :  {
  public com.lynx.tasm.behavior.ui.ViewGroupDrawingOrderHelper.ViewGroupDrawingOrderHelper(ViewGroup viewGroup);
  public int[] com.lynx.tasm.behavior.ui.ViewGroupDrawingOrderHelper.getDrawingOrderIndices();
  public void com.lynx.tasm.behavior.ui.ViewGroupDrawingOrderHelper.handleAddView(View view);
  public void com.lynx.tasm.behavior.ui.ViewGroupDrawingOrderHelper.handleRemoveView(View view);
  public boolean com.lynx.tasm.behavior.ui.ViewGroupDrawingOrderHelper.shouldEnableCustomDrawingOrder();
  public int com.lynx.tasm.behavior.ui.ViewGroupDrawingOrderHelper.getChildDrawingOrder(int childCount, int index);
  public void com.lynx.tasm.behavior.ui.ViewGroupDrawingOrderHelper.prepareChildDrawingOrder();
  public void com.lynx.tasm.behavior.ui.ViewGroupDrawingOrderHelper.update();
}

public class com::lynx::tasm::behavior::ui::utils::ViewHelper :  {
  public static void com.lynx.tasm.behavior.ui.utils.ViewHelper.setBackground(View view, Drawable drawable);
  public static boolean com.lynx.tasm.behavior.ui.utils.ViewHelper.viewIsParentOfAnotherView(View parent, View child);
  public static PointF com.lynx.tasm.behavior.ui.utils.ViewHelper.convertPointFromAncestorToDescendant(final View ancestor, final View descendant, PointF point);
  public static PointF com.lynx.tasm.behavior.ui.utils.ViewHelper.convertPointFromDescendantToAncestor(final View descendant, final View ancestor, PointF point);
  public static PointF com.lynx.tasm.behavior.ui.utils.ViewHelper.convertPointFromViewToAnother(final View view, final View another, PointF point);
  public static RectF com.lynx.tasm.behavior.ui.utils.ViewHelper.convertRectFromAncestorToDescendant(final View ancestor, final View descendant, RectF rect);
  public static RectF com.lynx.tasm.behavior.ui.utils.ViewHelper.convertRectFromDescendantToAncestor(final View descendant, final View ancestor, RectF rect);
  public static RectF com.lynx.tasm.behavior.ui.utils.ViewHelper.convertRectFromViewToAnother(final View view, final View another, RectF rect);
}

public class com::lynx::tasm::behavior::ui::ViewInfo : com.lynx.tasm.behavior.ui.IDrawChildHook {
  public com.lynx.tasm.behavior.ui.ViewInfo.ViewInfo(IProcessViewInfoHook hook, View view);
  public void com.lynx.tasm.behavior.ui.ViewInfo.detachFromUI();
  public void com.lynx.tasm.behavior.ui.ViewInfo.detachWithUI();
  public void com.lynx.tasm.behavior.ui.ViewInfo.setWidth(int width);
  public void com.lynx.tasm.behavior.ui.ViewInfo.setHeight(int height);
  public void com.lynx.tasm.behavior.ui.ViewInfo.setSkewX(float x);
  public void com.lynx.tasm.behavior.ui.ViewInfo.setSkewY(float y);
  public void com.lynx.tasm.behavior.ui.ViewInfo.setClipPath(BasicShape path);
  public void com.lynx.tasm.behavior.ui.ViewInfo.setDrawingOrder(int[] order);
  public void com.lynx.tasm.behavior.ui.ViewInfo.setHasOverlappingRendering(boolean enable);
  public void com.lynx.tasm.behavior.ui.ViewInfo.setClipToRadius(boolean enable);
  public void com.lynx.tasm.behavior.ui.ViewInfo.setClipPathInBeforeDispatchDraw(Path path);
  public void com.lynx.tasm.behavior.ui.ViewInfo.setClipRectInBeforeDispatchDraw(Rect rect);
  public void com.lynx.tasm.behavior.ui.ViewInfo.setOverflowClipRect(Rect rect);
  public void com.lynx.tasm.behavior.ui.ViewInfo.addSubDrawInfo(int index, SubDrawInfo info);
  public void com.lynx.tasm.behavior.ui.ViewInfo.clearSubDrawInfo();
  public void com.lynx.tasm.behavior.ui.ViewInfo.setBoundsWidth(int width);
  public void com.lynx.tasm.behavior.ui.ViewInfo.setBoundsHeight(int height);
  public void com.lynx.tasm.behavior.ui.ViewInfo.setMaskDrawable(MaskDrawable drawable);
  public void com.lynx.tasm.behavior.ui.ViewInfo.setImageManagerUsedInBeforeDraw(LynxImageManager manager);
  public void com.lynx.tasm.behavior.ui.ViewInfo.beforeDraw(Canvas canvas);
  public void com.lynx.tasm.behavior.ui.ViewInfo.beforeDispatchDraw(Canvas canvas);
  public Rect com.lynx.tasm.behavior.ui.ViewInfo.beforeDrawChild(Canvas canvas, View child, long drawingTime);
  public void com.lynx.tasm.behavior.ui.ViewInfo.afterDrawChild(Canvas canvas, View child, long drawingTime);
  public void com.lynx.tasm.behavior.ui.ViewInfo.afterDispatchDraw(Canvas canvas);
  public void com.lynx.tasm.behavior.ui.ViewInfo.afterDraw(Canvas canvas);
  public int com.lynx.tasm.behavior.ui.ViewInfo.getChildDrawingOrder(int childCount, int index);
  public boolean com.lynx.tasm.behavior.ui.ViewInfo.hasOverlappingRendering();
  public void com.lynx.tasm.behavior.ui.ViewInfo.performLayoutChildrenUI();
  public void com.lynx.tasm.behavior.ui.ViewInfo.performMeasureChildrenUI();
  public void com.lynx.tasm.behavior.ui.ViewInfo.invalidate();
}

public class com::lynx::tasm::behavior::shadow::ViewLayoutTick : com.lynx.tasm.behavior.shadow.LayoutTick {
  public com.lynx.tasm.behavior.shadow.ViewLayoutTick.ViewLayoutTick(View root);
  public void com.lynx.tasm.behavior.shadow.ViewLayoutTick.request(Runnable runnable);
  public void com.lynx.tasm.behavior.shadow.ViewLayoutTick.attach(View view);
  public void com.lynx.tasm.behavior.shadow.ViewLayoutTick.triggerLayout();
}

public class com::lynx::tasm::behavior::ui::swiper::ViewPager : ViewGroup {
  public final String com.lynx.tasm.behavior.ui.swiper.ViewPager.TAG TAG;
  public final boolean com.lynx.tasm.behavior.ui.swiper.ViewPager.DEBUG DEBUG;
  public final boolean com.lynx.tasm.behavior.ui.swiper.ViewPager.DEBUG_GESTURE DEBUG_GESTURE;
  public final int com.lynx.tasm.behavior.ui.swiper.ViewPager.SCROLL_DIRECTION_BEGIN SCROLL_DIRECTION_BEGIN;
  public final int com.lynx.tasm.behavior.ui.swiper.ViewPager.SCROLL_DIRECTION_END SCROLL_DIRECTION_END;
  public com.lynx.tasm.behavior.ui.swiper.ViewPager.ViewPager(Context context);
  public com.lynx.tasm.behavior.ui.swiper.ViewPager.ViewPager(Context context, AttributeSet attrs);
  public void com.lynx.tasm.behavior.ui.swiper.ViewPager.setCurrentIndex(int index, boolean smooth, int direction);
  public void com.lynx.tasm.behavior.ui.swiper.ViewPager.setAdapter(Adapter adapter);
  public void com.lynx.tasm.behavior.ui.swiper.ViewPager.setOffset(int offset, boolean triggerScrollTo);
  public void com.lynx.tasm.behavior.ui.swiper.ViewPager.setPadding(int left, int top, int right, int bottom);
  public void com.lynx.tasm.behavior.ui.swiper.ViewPager.addView(View child, int index, ViewGroup.LayoutParams params);
  public void com.lynx.tasm.behavior.ui.swiper.ViewPager.requestLayout();
  public boolean com.lynx.tasm.behavior.ui.swiper.ViewPager.canScrollHorizontally(int direction);
  public boolean com.lynx.tasm.behavior.ui.swiper.ViewPager.canScrollVertically(int direction);
  public void com.lynx.tasm.behavior.ui.swiper.ViewPager.computeScroll();
  public boolean com.lynx.tasm.behavior.ui.swiper.ViewPager.onInterceptTouchEvent(MotionEvent event);
  public boolean com.lynx.tasm.behavior.ui.swiper.ViewPager.onTouchEvent(MotionEvent event);
  public void com.lynx.tasm.behavior.ui.swiper.ViewPager.scrollTo(int x, int y);
  public void com.lynx.tasm.behavior.ui.swiper.ViewPager.addPageScrollListener(OnPageScrollListener listener);
  public void com.lynx.tasm.behavior.ui.swiper.ViewPager.removePageScrollListener(OnPageScrollListener listener);
  public Adapter com.lynx.tasm.behavior.ui.swiper.ViewPager.getAdapter();
  public int com.lynx.tasm.behavior.ui.swiper.ViewPager.getTotalCount();
  public boolean com.lynx.tasm.behavior.ui.swiper.ViewPager.isVertical();
  public int com.lynx.tasm.behavior.ui.swiper.ViewPager.getCurrentIndex();
  public int com.lynx.tasm.behavior.ui.swiper.ViewPager.getChildExpectSize();
  public int com.lynx.tasm.behavior.ui.swiper.ViewPager.getOffset();
  public void com.lynx.tasm.behavior.ui.swiper.ViewPager.setTransformer(PageTransformer transformer);
  public void com.lynx.tasm.behavior.ui.swiper.ViewPager.setIsRTL(boolean isRTL);
  public void com.lynx.tasm.behavior.ui.swiper.ViewPager.setOrientation(int orientation);
  public void com.lynx.tasm.behavior.ui.swiper.ViewPager.setHLayoutUpdated(boolean value);
  public void com.lynx.tasm.behavior.ui.swiper.ViewPager.setVLayoutUpdated(boolean value);
  public void com.lynx.tasm.behavior.ui.swiper.ViewPager.setPropsUpdated(boolean value);
  public void com.lynx.tasm.behavior.ui.swiper.ViewPager.setPendingCurrentIndex(int pendingCurrentIndex, boolean pendingSmoothScroll);
  public void com.lynx.tasm.behavior.ui.swiper.ViewPager.setAnimDuration(int animDuration);
  public void com.lynx.tasm.behavior.ui.swiper.ViewPager.setTouchable(boolean touchable);
  public void com.lynx.tasm.behavior.ui.swiper.ViewPager.setLoop(boolean loop);
  public void com.lynx.tasm.behavior.ui.swiper.ViewPager.setPageSize(int pageSize);
  public void com.lynx.tasm.behavior.ui.swiper.ViewPager.setPageMargin(int pageMargin);
  public void com.lynx.tasm.behavior.ui.swiper.ViewPager.setKeepItemView(boolean value);
  public void com.lynx.tasm.behavior.ui.swiper.ViewPager.setForceCanScroll(boolean value);
  public void com.lynx.tasm.behavior.ui.swiper.ViewPager.setEnableViceLoop(boolean value);
  public void com.lynx.tasm.behavior.ui.swiper.ViewPager.setEnableNestedChild(boolean value);
  public boolean com.lynx.tasm.behavior.ui.swiper.ViewPager.enableBounceBegin();
  public boolean com.lynx.tasm.behavior.ui.swiper.ViewPager.enableBounceEnd();
  public void com.lynx.tasm.behavior.ui.swiper.ViewPager.setEnableBounce(boolean value);
  public void com.lynx.tasm.behavior.ui.swiper.ViewPager.setBounceBeginThreshold(float value);
  public void com.lynx.tasm.behavior.ui.swiper.ViewPager.setBounceEndThreshold(float value);
  public void com.lynx.tasm.behavior.ui.swiper.ViewPager.setBounceDuration(int value);
  public void com.lynx.tasm.behavior.ui.swiper.ViewPager.setIgnoreLayoutUpdate(boolean value);
  public void com.lynx.tasm.behavior.ui.swiper.ViewPager.setHandleGesture(boolean value);
}

public interface com::lynx::tasm::utils::LynxFrameRateControl::VSyncListener {
  public void com.lynx.tasm.utils.LynxFrameRateControl.VSyncListener.OnVSync(long frameTimeNanos);
}

public class com::lynx::tasm::core::VSyncMonitor :  {
  public final long com.lynx.tasm.core.VSyncMonitor.DEFAULT_FRAME_TIME_NS DEFAULT_FRAME_TIME_NS;
  public static void com.lynx.tasm.core.VSyncMonitor.setCurrentWindowManager(WindowManager vm);
  public static void com.lynx.tasm.core.VSyncMonitor.setCurrentDisplayManager(DisplayManager dm);
  public static void com.lynx.tasm.core.VSyncMonitor.initUIThreadChoreographer();
  public static void com.lynx.tasm.core.VSyncMonitor.request(final long nativePtr);
  public static void com.lynx.tasm.core.VSyncMonitor.requestOnUIThread(final long nativePtr);
}

public interface com::lynx::react::bridge::WritableArray {
  public void com.lynx.react.bridge.WritableArray.pushNull();
  public void com.lynx.react.bridge.WritableArray.pushBoolean(boolean value);
  public void com.lynx.react.bridge.WritableArray.pushDouble(double value);
  public void com.lynx.react.bridge.WritableArray.pushLong(long value);
  public void com.lynx.react.bridge.WritableArray.pushInt(int value);
  public void com.lynx.react.bridge.WritableArray.pushString(String value);
  public void com.lynx.react.bridge.WritableArray.pushArray(WritableArray array);
  public void com.lynx.react.bridge.WritableArray.pushMap(WritableMap map);
  public void com.lynx.react.bridge.WritableArray.pushByteArray(byte[] array);
  public void com.lynx.react.bridge.WritableArray.pushPiperData(PiperData json);
}

public interface com::lynx::react::bridge::WritableMap {
  public void com.lynx.react.bridge.WritableMap.putNull(String key);
  public void com.lynx.react.bridge.WritableMap.putBoolean(String key, boolean value);
  public void com.lynx.react.bridge.WritableMap.putDouble(String key, double value);
  public void com.lynx.react.bridge.WritableMap.putInt(String key, int value);
  public void com.lynx.react.bridge.WritableMap.putLong(String key, long value);
  public void com.lynx.react.bridge.WritableMap.putString(String key, String value);
  public void com.lynx.react.bridge.WritableMap.putArray(String key, WritableArray value);
  public void com.lynx.react.bridge.WritableMap.putMap(String key, WritableMap value);
  public void com.lynx.react.bridge.WritableMap.putByteArrayAsString(byte[] key, byte[] value);
  public void com.lynx.react.bridge.WritableMap.putByteArray(String key, byte[] value);
  public void com.lynx.react.bridge.WritableMap.putPiperData(String key, PiperData value);
  public void com.lynx.react.bridge.WritableMap.putByteBuffer(String key, ByteBuffer value);
  public void com.lynx.react.bridge.WritableMap.merge(ReadableMap source);
}

public class com::lynx::tasm::behavior::ui::swiper::XSwiperUI : com::lynx::tasm::behavior::ui::view::UISimpleView< SwiperView > {
  public void com.lynx.tasm.behavior.ui.swiper.XSwiperUI.setEnableNestedChild(boolean value);
  public final String com.lynx.tasm.behavior.ui.swiper.XSwiperUI.TAG TAG;
  public final boolean com.lynx.tasm.behavior.ui.swiper.XSwiperUI.DEBUG DEBUG;
  public com.lynx.tasm.behavior.ui.swiper.XSwiperUI.XSwiperUI(Context context);
  public com.lynx.tasm.behavior.ui.swiper.XSwiperUI.XSwiperUI(LynxContext context);
  public com.lynx.tasm.behavior.ui.swiper.XSwiperUI.XSwiperUI(LynxContext context, Object param);
  public void com.lynx.tasm.behavior.ui.swiper.XSwiperUI.insertChild(LynxBaseUI child, int index);
  public void com.lynx.tasm.behavior.ui.swiper.XSwiperUI.removeChild(LynxBaseUI child);
  public void com.lynx.tasm.behavior.ui.swiper.XSwiperUI.setEvents(Map< String, EventsListener > events);
  public void com.lynx.tasm.behavior.ui.swiper.XSwiperUI.onPropsUpdated();
  public void com.lynx.tasm.behavior.ui.swiper.XSwiperUI.onLayoutUpdated();
  public void com.lynx.tasm.behavior.ui.swiper.XSwiperUI.onNodeReload();
  public boolean com.lynx.tasm.behavior.ui.swiper.XSwiperUI.isScrollContainer();
  public boolean com.lynx.tasm.behavior.ui.swiper.XSwiperUI.needCustomLayout();
  public boolean com.lynx.tasm.behavior.ui.swiper.XSwiperUI.isScrollable();
  public void com.lynx.tasm.behavior.ui.swiper.XSwiperUI.setLynxDirection(int direction);
  public boolean com.lynx.tasm.behavior.ui.swiper.XSwiperUI.isAccessibilityHostUI();
  public boolean com.lynx.tasm.behavior.ui.swiper.XSwiperUI.isAccessibilityDirectionVertical();
  public View com.lynx.tasm.behavior.ui.swiper.XSwiperUI.getAccessibilityHostView();
  public void com.lynx.tasm.behavior.ui.swiper.XSwiperUI.scrollTo(ReadableMap params, Callback callback);
  public void com.lynx.tasm.behavior.ui.swiper.XSwiperUI.setMode(String mode);
  public void com.lynx.tasm.behavior.ui.swiper.XSwiperUI.setAutoPlay(boolean autoPlay);
  public void com.lynx.tasm.behavior.ui.swiper.XSwiperUI.setFinishReset(boolean isReset);
  public void com.lynx.tasm.behavior.ui.swiper.XSwiperUI.setCurrentIndex(final int index);
  public void com.lynx.tasm.behavior.ui.swiper.XSwiperUI.onListCellAppear(String itemKey, UIList list);
  public void com.lynx.tasm.behavior.ui.swiper.XSwiperUI.onListCellPrepareForReuse(String itemKey, LynxBaseUI list);
  public void com.lynx.tasm.behavior.ui.swiper.XSwiperUI.onListCellDisAppear(String itemKey, LynxBaseUI list, boolean isExist);
  public void com.lynx.tasm.behavior.ui.swiper.XSwiperUI.setPageMargin(Dynamic pageMargin);
  public void com.lynx.tasm.behavior.ui.swiper.XSwiperUI.setPreviousMargin(Dynamic previousMarginValue);
  public void com.lynx.tasm.behavior.ui.swiper.XSwiperUI.setNextMargin(Dynamic nextMarginValue);
  public void com.lynx.tasm.behavior.ui.swiper.XSwiperUI.setOrientation(String orientation);
  public void com.lynx.tasm.behavior.ui.swiper.XSwiperUI.setVertical(boolean isVertical);
  public void com.lynx.tasm.behavior.ui.swiper.XSwiperUI.setNormalTranslationFactor(double factor);
  public void com.lynx.tasm.behavior.ui.swiper.XSwiperUI.setInterval(int interval);
  public void com.lynx.tasm.behavior.ui.swiper.XSwiperUI.setDuration(int duration);
  public void com.lynx.tasm.behavior.ui.swiper.XSwiperUI.setCircular(boolean circular);
  public void com.lynx.tasm.behavior.ui.swiper.XSwiperUI.setTouchable(boolean touchable);
  public void com.lynx.tasm.behavior.ui.swiper.XSwiperUI.setSmoothScroll(boolean smoothScroll);
  public void com.lynx.tasm.behavior.ui.swiper.XSwiperUI.setIndicator(boolean enable);
  public void com.lynx.tasm.behavior.ui.swiper.XSwiperUI.setIndicatorColor(String color);
  public void com.lynx.tasm.behavior.ui.swiper.XSwiperUI.setIndicatorActiveColor(String color);
  public void com.lynx.tasm.behavior.ui.swiper.XSwiperUI.setKeepItemView(boolean value);
  public void com.lynx.tasm.behavior.ui.swiper.XSwiperUI.setForceCanScroll(boolean canScroll);
  public void com.lynx.tasm.behavior.ui.swiper.XSwiperUI.setCompatible(boolean value);
  public void com.lynx.tasm.behavior.ui.swiper.XSwiperUI.setEnableViceLoop(boolean value);
  public void com.lynx.tasm.behavior.ui.swiper.XSwiperUI.setEnableBounce(final boolean value);
  public void com.lynx.tasm.behavior.ui.swiper.XSwiperUI.setBounceBeginThreshold(final float value);
  public void com.lynx.tasm.behavior.ui.swiper.XSwiperUI.setBounceEndThreshold(final float value);
  public void com.lynx.tasm.behavior.ui.swiper.XSwiperUI.setBounceDuration(int bounceDuration);
  public void com.lynx.tasm.behavior.ui.swiper.XSwiperUI.setIgnoreLayoutUpdate(boolean value);
  public void com.lynx.tasm.behavior.ui.swiper.XSwiperUI.setScrollBeforeDetached(boolean value);
  public void com.lynx.tasm.behavior.ui.swiper.XSwiperUI.setMaxXScale(double scale);
  public void com.lynx.tasm.behavior.ui.swiper.XSwiperUI.setMinXScale(double scale);
  public void com.lynx.tasm.behavior.ui.swiper.XSwiperUI.setMaxYScale(double scale);
  public void com.lynx.tasm.behavior.ui.swiper.XSwiperUI.setMinYScale(double scale);
  public void com.lynx.tasm.behavior.ui.swiper.XSwiperUI.setTransitionThrottle(int value);
  public void com.lynx.tasm.behavior.ui.swiper.XSwiperUI.setHandleGesture(boolean value);
  public boolean com.lynx.tasm.behavior.ui.swiper.XSwiperUI.enableAutoClipRadius();
}

